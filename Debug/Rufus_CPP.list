
Rufus_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800739c  0800739c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800739c  0800739c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000070  0800741c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800741c  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d4  00000000  00000000  0002f04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c86  00000000  00000000  000341d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fbb  00000000  00000000  00045e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000603a2  00000000  00000000  00057e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b81bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  000b8210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006f14 	.word	0x08006f14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006f14 	.word	0x08006f14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb4f 	bl	8000aa0 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fad3 	bl	80009b8 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb41 	bl	8000aa0 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb37 	bl	8000aa0 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fae1 	bl	8000a08 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fad7 	bl	8000a08 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4646      	mov	r6, r8
 800046c:	46d6      	mov	lr, sl
 800046e:	464f      	mov	r7, r9
 8000470:	024d      	lsls	r5, r1, #9
 8000472:	0242      	lsls	r2, r0, #9
 8000474:	b5c0      	push	{r6, r7, lr}
 8000476:	0a52      	lsrs	r2, r2, #9
 8000478:	0a6e      	lsrs	r6, r5, #9
 800047a:	0047      	lsls	r7, r0, #1
 800047c:	46b0      	mov	r8, r6
 800047e:	0e3f      	lsrs	r7, r7, #24
 8000480:	004e      	lsls	r6, r1, #1
 8000482:	0fc4      	lsrs	r4, r0, #31
 8000484:	00d0      	lsls	r0, r2, #3
 8000486:	4694      	mov	ip, r2
 8000488:	003b      	movs	r3, r7
 800048a:	4682      	mov	sl, r0
 800048c:	0e36      	lsrs	r6, r6, #24
 800048e:	0fc9      	lsrs	r1, r1, #31
 8000490:	09ad      	lsrs	r5, r5, #6
 8000492:	428c      	cmp	r4, r1
 8000494:	d06d      	beq.n	8000572 <__aeabi_fadd+0x10a>
 8000496:	1bb8      	subs	r0, r7, r6
 8000498:	4681      	mov	r9, r0
 800049a:	2800      	cmp	r0, #0
 800049c:	dd4d      	ble.n	800053a <__aeabi_fadd+0xd2>
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x3c>
 80004a2:	e088      	b.n	80005b6 <__aeabi_fadd+0x14e>
 80004a4:	2fff      	cmp	r7, #255	; 0xff
 80004a6:	d05a      	beq.n	800055e <__aeabi_fadd+0xf6>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	04db      	lsls	r3, r3, #19
 80004ac:	431d      	orrs	r5, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2201      	movs	r2, #1
 80004b2:	2b1b      	cmp	r3, #27
 80004b4:	dc0a      	bgt.n	80004cc <__aeabi_fadd+0x64>
 80004b6:	002b      	movs	r3, r5
 80004b8:	464a      	mov	r2, r9
 80004ba:	4649      	mov	r1, r9
 80004bc:	40d3      	lsrs	r3, r2
 80004be:	2220      	movs	r2, #32
 80004c0:	1a52      	subs	r2, r2, r1
 80004c2:	4095      	lsls	r5, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	1e55      	subs	r5, r2, #1
 80004c8:	41aa      	sbcs	r2, r5
 80004ca:	431a      	orrs	r2, r3
 80004cc:	4653      	mov	r3, sl
 80004ce:	1a9a      	subs	r2, r3, r2
 80004d0:	0153      	lsls	r3, r2, #5
 80004d2:	d400      	bmi.n	80004d6 <__aeabi_fadd+0x6e>
 80004d4:	e0b9      	b.n	800064a <__aeabi_fadd+0x1e2>
 80004d6:	0192      	lsls	r2, r2, #6
 80004d8:	0996      	lsrs	r6, r2, #6
 80004da:	0030      	movs	r0, r6
 80004dc:	f001 fc68 	bl	8001db0 <__clzsi2>
 80004e0:	3805      	subs	r0, #5
 80004e2:	4086      	lsls	r6, r0
 80004e4:	4287      	cmp	r7, r0
 80004e6:	dd00      	ble.n	80004ea <__aeabi_fadd+0x82>
 80004e8:	e0d4      	b.n	8000694 <__aeabi_fadd+0x22c>
 80004ea:	0033      	movs	r3, r6
 80004ec:	1bc7      	subs	r7, r0, r7
 80004ee:	2020      	movs	r0, #32
 80004f0:	3701      	adds	r7, #1
 80004f2:	40fb      	lsrs	r3, r7
 80004f4:	1bc7      	subs	r7, r0, r7
 80004f6:	40be      	lsls	r6, r7
 80004f8:	0032      	movs	r2, r6
 80004fa:	1e56      	subs	r6, r2, #1
 80004fc:	41b2      	sbcs	r2, r6
 80004fe:	2700      	movs	r7, #0
 8000500:	431a      	orrs	r2, r3
 8000502:	0753      	lsls	r3, r2, #29
 8000504:	d004      	beq.n	8000510 <__aeabi_fadd+0xa8>
 8000506:	230f      	movs	r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	2b04      	cmp	r3, #4
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0xa8>
 800050e:	3204      	adds	r2, #4
 8000510:	0153      	lsls	r3, r2, #5
 8000512:	d400      	bmi.n	8000516 <__aeabi_fadd+0xae>
 8000514:	e09c      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000516:	1c7b      	adds	r3, r7, #1
 8000518:	2ffe      	cmp	r7, #254	; 0xfe
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0xb6>
 800051c:	e09a      	b.n	8000654 <__aeabi_fadd+0x1ec>
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	0a52      	lsrs	r2, r2, #9
 8000522:	4694      	mov	ip, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	05d8      	lsls	r0, r3, #23
 8000528:	4663      	mov	r3, ip
 800052a:	07e4      	lsls	r4, r4, #31
 800052c:	4318      	orrs	r0, r3
 800052e:	4320      	orrs	r0, r4
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	2800      	cmp	r0, #0
 800053c:	d049      	beq.n	80005d2 <__aeabi_fadd+0x16a>
 800053e:	1bf3      	subs	r3, r6, r7
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0xde>
 8000544:	e0b6      	b.n	80006b4 <__aeabi_fadd+0x24c>
 8000546:	4652      	mov	r2, sl
 8000548:	2a00      	cmp	r2, #0
 800054a:	d060      	beq.n	800060e <__aeabi_fadd+0x1a6>
 800054c:	3b01      	subs	r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0xec>
 8000552:	e0fc      	b.n	800074e <__aeabi_fadd+0x2e6>
 8000554:	2eff      	cmp	r6, #255	; 0xff
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0xf2>
 8000558:	e0b4      	b.n	80006c4 <__aeabi_fadd+0x25c>
 800055a:	000c      	movs	r4, r1
 800055c:	4642      	mov	r2, r8
 800055e:	2a00      	cmp	r2, #0
 8000560:	d078      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 8000562:	2080      	movs	r0, #128	; 0x80
 8000564:	03c0      	lsls	r0, r0, #15
 8000566:	4310      	orrs	r0, r2
 8000568:	0242      	lsls	r2, r0, #9
 800056a:	0a53      	lsrs	r3, r2, #9
 800056c:	469c      	mov	ip, r3
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	e7d9      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000572:	1bb9      	subs	r1, r7, r6
 8000574:	2900      	cmp	r1, #0
 8000576:	dd71      	ble.n	800065c <__aeabi_fadd+0x1f4>
 8000578:	2e00      	cmp	r6, #0
 800057a:	d03f      	beq.n	80005fc <__aeabi_fadd+0x194>
 800057c:	2fff      	cmp	r7, #255	; 0xff
 800057e:	d0ee      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	04db      	lsls	r3, r3, #19
 8000584:	431d      	orrs	r5, r3
 8000586:	2201      	movs	r2, #1
 8000588:	291b      	cmp	r1, #27
 800058a:	dc07      	bgt.n	800059c <__aeabi_fadd+0x134>
 800058c:	002a      	movs	r2, r5
 800058e:	2320      	movs	r3, #32
 8000590:	40ca      	lsrs	r2, r1
 8000592:	1a59      	subs	r1, r3, r1
 8000594:	408d      	lsls	r5, r1
 8000596:	1e6b      	subs	r3, r5, #1
 8000598:	419d      	sbcs	r5, r3
 800059a:	432a      	orrs	r2, r5
 800059c:	4452      	add	r2, sl
 800059e:	0153      	lsls	r3, r2, #5
 80005a0:	d553      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 80005a2:	3701      	adds	r7, #1
 80005a4:	2fff      	cmp	r7, #255	; 0xff
 80005a6:	d055      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80005a8:	2301      	movs	r3, #1
 80005aa:	497b      	ldr	r1, [pc, #492]	; (8000798 <__aeabi_fadd+0x330>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	0852      	lsrs	r2, r2, #1
 80005b0:	400a      	ands	r2, r1
 80005b2:	431a      	orrs	r2, r3
 80005b4:	e7a5      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d02c      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 80005ba:	2301      	movs	r3, #1
 80005bc:	425b      	negs	r3, r3
 80005be:	469c      	mov	ip, r3
 80005c0:	44e1      	add	r9, ip
 80005c2:	464b      	mov	r3, r9
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x162>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x2be>
 80005ca:	2fff      	cmp	r7, #255	; 0xff
 80005cc:	d000      	beq.n	80005d0 <__aeabi_fadd+0x168>
 80005ce:	e76e      	b.n	80004ae <__aeabi_fadd+0x46>
 80005d0:	e7c5      	b.n	800055e <__aeabi_fadd+0xf6>
 80005d2:	20fe      	movs	r0, #254	; 0xfe
 80005d4:	1c7e      	adds	r6, r7, #1
 80005d6:	4230      	tst	r0, r6
 80005d8:	d160      	bne.n	800069c <__aeabi_fadd+0x234>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fadd+0x178>
 80005de:	e093      	b.n	8000708 <__aeabi_fadd+0x2a0>
 80005e0:	4652      	mov	r2, sl
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x180>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_fadd+0x2ee>
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d09c      	beq.n	8000526 <__aeabi_fadd+0xbe>
 80005ec:	1b52      	subs	r2, r2, r5
 80005ee:	0150      	lsls	r0, r2, #5
 80005f0:	d400      	bmi.n	80005f4 <__aeabi_fadd+0x18c>
 80005f2:	e0c3      	b.n	800077c <__aeabi_fadd+0x314>
 80005f4:	4653      	mov	r3, sl
 80005f6:	000c      	movs	r4, r1
 80005f8:	1aea      	subs	r2, r5, r3
 80005fa:	e782      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d009      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 8000600:	3901      	subs	r1, #1
 8000602:	2900      	cmp	r1, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_fadd+0x1a0>
 8000606:	e08b      	b.n	8000720 <__aeabi_fadd+0x2b8>
 8000608:	2fff      	cmp	r7, #255	; 0xff
 800060a:	d1bc      	bne.n	8000586 <__aeabi_fadd+0x11e>
 800060c:	e7a7      	b.n	800055e <__aeabi_fadd+0xf6>
 800060e:	000c      	movs	r4, r1
 8000610:	4642      	mov	r2, r8
 8000612:	0037      	movs	r7, r6
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0a2      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	0a53      	lsrs	r3, r2, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2fb      	uxtb	r3, r7
 8000620:	e781      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000622:	21fe      	movs	r1, #254	; 0xfe
 8000624:	3701      	adds	r7, #1
 8000626:	4239      	tst	r1, r7
 8000628:	d165      	bne.n	80006f6 <__aeabi_fadd+0x28e>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d17e      	bne.n	800072c <__aeabi_fadd+0x2c4>
 800062e:	2800      	cmp	r0, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e0aa      	b.n	800078a <__aeabi_fadd+0x322>
 8000634:	2d00      	cmp	r5, #0
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0x1d2>
 8000638:	e775      	b.n	8000526 <__aeabi_fadd+0xbe>
 800063a:	002a      	movs	r2, r5
 800063c:	4452      	add	r2, sl
 800063e:	2700      	movs	r7, #0
 8000640:	0153      	lsls	r3, r2, #5
 8000642:	d502      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <__aeabi_fadd+0x334>)
 8000646:	3701      	adds	r7, #1
 8000648:	401a      	ands	r2, r3
 800064a:	0753      	lsls	r3, r2, #29
 800064c:	d000      	beq.n	8000650 <__aeabi_fadd+0x1e8>
 800064e:	e75a      	b.n	8000506 <__aeabi_fadd+0x9e>
 8000650:	08d2      	lsrs	r2, r2, #3
 8000652:	e7df      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000654:	2200      	movs	r2, #0
 8000656:	23ff      	movs	r3, #255	; 0xff
 8000658:	4694      	mov	ip, r2
 800065a:	e764      	b.n	8000526 <__aeabi_fadd+0xbe>
 800065c:	2900      	cmp	r1, #0
 800065e:	d0e0      	beq.n	8000622 <__aeabi_fadd+0x1ba>
 8000660:	1bf3      	subs	r3, r6, r7
 8000662:	2f00      	cmp	r7, #0
 8000664:	d03e      	beq.n	80006e4 <__aeabi_fadd+0x27c>
 8000666:	2eff      	cmp	r6, #255	; 0xff
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x204>
 800066a:	e777      	b.n	800055c <__aeabi_fadd+0xf4>
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0001      	movs	r1, r0
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	4311      	orrs	r1, r2
 8000674:	468a      	mov	sl, r1
 8000676:	2201      	movs	r2, #1
 8000678:	2b1b      	cmp	r3, #27
 800067a:	dc08      	bgt.n	800068e <__aeabi_fadd+0x226>
 800067c:	4652      	mov	r2, sl
 800067e:	2120      	movs	r1, #32
 8000680:	4650      	mov	r0, sl
 8000682:	40da      	lsrs	r2, r3
 8000684:	1acb      	subs	r3, r1, r3
 8000686:	4098      	lsls	r0, r3
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	4302      	orrs	r2, r0
 800068e:	0037      	movs	r7, r6
 8000690:	1952      	adds	r2, r2, r5
 8000692:	e784      	b.n	800059e <__aeabi_fadd+0x136>
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <__aeabi_fadd+0x334>)
 8000696:	1a3f      	subs	r7, r7, r0
 8000698:	4032      	ands	r2, r6
 800069a:	e732      	b.n	8000502 <__aeabi_fadd+0x9a>
 800069c:	4653      	mov	r3, sl
 800069e:	1b5e      	subs	r6, r3, r5
 80006a0:	0173      	lsls	r3, r6, #5
 80006a2:	d42d      	bmi.n	8000700 <__aeabi_fadd+0x298>
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x242>
 80006a8:	e717      	b.n	80004da <__aeabi_fadd+0x72>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2400      	movs	r4, #0
 80006ae:	2300      	movs	r3, #0
 80006b0:	4694      	mov	ip, r2
 80006b2:	e738      	b.n	8000526 <__aeabi_fadd+0xbe>
 80006b4:	2eff      	cmp	r6, #255	; 0xff
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x252>
 80006b8:	e74f      	b.n	800055a <__aeabi_fadd+0xf2>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4650      	mov	r0, sl
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4310      	orrs	r0, r2
 80006c2:	4682      	mov	sl, r0
 80006c4:	2201      	movs	r2, #1
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dc08      	bgt.n	80006dc <__aeabi_fadd+0x274>
 80006ca:	4652      	mov	r2, sl
 80006cc:	2420      	movs	r4, #32
 80006ce:	4650      	mov	r0, sl
 80006d0:	40da      	lsrs	r2, r3
 80006d2:	1ae3      	subs	r3, r4, r3
 80006d4:	4098      	lsls	r0, r3
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	4302      	orrs	r2, r0
 80006dc:	000c      	movs	r4, r1
 80006de:	0037      	movs	r7, r6
 80006e0:	1aaa      	subs	r2, r5, r2
 80006e2:	e6f5      	b.n	80004d0 <__aeabi_fadd+0x68>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d093      	beq.n	8000610 <__aeabi_fadd+0x1a8>
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d04f      	beq.n	800078e <__aeabi_fadd+0x326>
 80006ee:	2eff      	cmp	r6, #255	; 0xff
 80006f0:	d1c1      	bne.n	8000676 <__aeabi_fadd+0x20e>
 80006f2:	4642      	mov	r2, r8
 80006f4:	e733      	b.n	800055e <__aeabi_fadd+0xf6>
 80006f6:	2fff      	cmp	r7, #255	; 0xff
 80006f8:	d0ac      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80006fa:	4455      	add	r5, sl
 80006fc:	086a      	lsrs	r2, r5, #1
 80006fe:	e7a4      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000700:	4653      	mov	r3, sl
 8000702:	000c      	movs	r4, r1
 8000704:	1aee      	subs	r6, r5, r3
 8000706:	e6e8      	b.n	80004da <__aeabi_fadd+0x72>
 8000708:	4653      	mov	r3, sl
 800070a:	2b00      	cmp	r3, #0
 800070c:	d128      	bne.n	8000760 <__aeabi_fadd+0x2f8>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x2ac>
 8000712:	e722      	b.n	800055a <__aeabi_fadd+0xf2>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	03db      	lsls	r3, r3, #15
 8000718:	469c      	mov	ip, r3
 800071a:	2400      	movs	r4, #0
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	e702      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000720:	002a      	movs	r2, r5
 8000722:	4452      	add	r2, sl
 8000724:	e73b      	b.n	800059e <__aeabi_fadd+0x136>
 8000726:	4653      	mov	r3, sl
 8000728:	1b5a      	subs	r2, r3, r5
 800072a:	e6d1      	b.n	80004d0 <__aeabi_fadd+0x68>
 800072c:	2800      	cmp	r0, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x2ca>
 8000730:	e714      	b.n	800055c <__aeabi_fadd+0xf4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x2d0>
 8000736:	e712      	b.n	800055e <__aeabi_fadd+0xf6>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	421a      	tst	r2, r3
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2da>
 8000740:	e70d      	b.n	800055e <__aeabi_fadd+0xf6>
 8000742:	4641      	mov	r1, r8
 8000744:	4219      	tst	r1, r3
 8000746:	d000      	beq.n	800074a <__aeabi_fadd+0x2e2>
 8000748:	e709      	b.n	800055e <__aeabi_fadd+0xf6>
 800074a:	4642      	mov	r2, r8
 800074c:	e707      	b.n	800055e <__aeabi_fadd+0xf6>
 800074e:	000c      	movs	r4, r1
 8000750:	0037      	movs	r7, r6
 8000752:	1aaa      	subs	r2, r5, r2
 8000754:	e6bc      	b.n	80004d0 <__aeabi_fadd+0x68>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d013      	beq.n	8000782 <__aeabi_fadd+0x31a>
 800075a:	000c      	movs	r4, r1
 800075c:	46c4      	mov	ip, r8
 800075e:	e6e2      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2fe>
 8000764:	e6fb      	b.n	800055e <__aeabi_fadd+0xf6>
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	03db      	lsls	r3, r3, #15
 800076a:	421a      	tst	r2, r3
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x308>
 800076e:	e6f6      	b.n	800055e <__aeabi_fadd+0xf6>
 8000770:	4640      	mov	r0, r8
 8000772:	4218      	tst	r0, r3
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000776:	e6f2      	b.n	800055e <__aeabi_fadd+0xf6>
 8000778:	000c      	movs	r4, r1
 800077a:	e6ef      	b.n	800055c <__aeabi_fadd+0xf4>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x31a>
 8000780:	e763      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000782:	2200      	movs	r2, #0
 8000784:	2400      	movs	r4, #0
 8000786:	4694      	mov	ip, r2
 8000788:	e6cd      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078a:	46c4      	mov	ip, r8
 800078c:	e6cb      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078e:	002a      	movs	r2, r5
 8000790:	0037      	movs	r7, r6
 8000792:	4452      	add	r2, sl
 8000794:	e703      	b.n	800059e <__aeabi_fadd+0x136>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	7dffffff 	.word	0x7dffffff
 800079c:	fbffffff 	.word	0xfbffffff

080007a0 <__aeabi_fdiv>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	464f      	mov	r7, r9
 80007a4:	4646      	mov	r6, r8
 80007a6:	46d6      	mov	lr, sl
 80007a8:	0245      	lsls	r5, r0, #9
 80007aa:	b5c0      	push	{r6, r7, lr}
 80007ac:	0047      	lsls	r7, r0, #1
 80007ae:	1c0c      	adds	r4, r1, #0
 80007b0:	0a6d      	lsrs	r5, r5, #9
 80007b2:	0e3f      	lsrs	r7, r7, #24
 80007b4:	0fc6      	lsrs	r6, r0, #31
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d066      	beq.n	8000888 <__aeabi_fdiv+0xe8>
 80007ba:	2fff      	cmp	r7, #255	; 0xff
 80007bc:	d06c      	beq.n	8000898 <__aeabi_fdiv+0xf8>
 80007be:	2300      	movs	r3, #0
 80007c0:	00ea      	lsls	r2, r5, #3
 80007c2:	2580      	movs	r5, #128	; 0x80
 80007c4:	4699      	mov	r9, r3
 80007c6:	469a      	mov	sl, r3
 80007c8:	04ed      	lsls	r5, r5, #19
 80007ca:	4315      	orrs	r5, r2
 80007cc:	3f7f      	subs	r7, #127	; 0x7f
 80007ce:	0260      	lsls	r0, r4, #9
 80007d0:	0061      	lsls	r1, r4, #1
 80007d2:	0a43      	lsrs	r3, r0, #9
 80007d4:	4698      	mov	r8, r3
 80007d6:	0e09      	lsrs	r1, r1, #24
 80007d8:	0fe4      	lsrs	r4, r4, #31
 80007da:	2900      	cmp	r1, #0
 80007dc:	d048      	beq.n	8000870 <__aeabi_fdiv+0xd0>
 80007de:	29ff      	cmp	r1, #255	; 0xff
 80007e0:	d010      	beq.n	8000804 <__aeabi_fdiv+0x64>
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	00d8      	lsls	r0, r3, #3
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	4302      	orrs	r2, r0
 80007ea:	4690      	mov	r8, r2
 80007ec:	2000      	movs	r0, #0
 80007ee:	397f      	subs	r1, #127	; 0x7f
 80007f0:	464a      	mov	r2, r9
 80007f2:	0033      	movs	r3, r6
 80007f4:	1a7f      	subs	r7, r7, r1
 80007f6:	4302      	orrs	r2, r0
 80007f8:	496c      	ldr	r1, [pc, #432]	; (80009ac <__aeabi_fdiv+0x20c>)
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	588a      	ldr	r2, [r1, r2]
 80007fe:	4063      	eors	r3, r4
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4697      	mov	pc, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d16d      	bne.n	80008e4 <__aeabi_fdiv+0x144>
 8000808:	2002      	movs	r0, #2
 800080a:	3fff      	subs	r7, #255	; 0xff
 800080c:	e033      	b.n	8000876 <__aeabi_fdiv+0xd6>
 800080e:	2300      	movs	r3, #0
 8000810:	4698      	mov	r8, r3
 8000812:	0026      	movs	r6, r4
 8000814:	4645      	mov	r5, r8
 8000816:	4682      	mov	sl, r0
 8000818:	4653      	mov	r3, sl
 800081a:	2b02      	cmp	r3, #2
 800081c:	d100      	bne.n	8000820 <__aeabi_fdiv+0x80>
 800081e:	e07f      	b.n	8000920 <__aeabi_fdiv+0x180>
 8000820:	2b03      	cmp	r3, #3
 8000822:	d100      	bne.n	8000826 <__aeabi_fdiv+0x86>
 8000824:	e094      	b.n	8000950 <__aeabi_fdiv+0x1b0>
 8000826:	2b01      	cmp	r3, #1
 8000828:	d017      	beq.n	800085a <__aeabi_fdiv+0xba>
 800082a:	0038      	movs	r0, r7
 800082c:	307f      	adds	r0, #127	; 0x7f
 800082e:	2800      	cmp	r0, #0
 8000830:	dd5f      	ble.n	80008f2 <__aeabi_fdiv+0x152>
 8000832:	076b      	lsls	r3, r5, #29
 8000834:	d004      	beq.n	8000840 <__aeabi_fdiv+0xa0>
 8000836:	230f      	movs	r3, #15
 8000838:	402b      	ands	r3, r5
 800083a:	2b04      	cmp	r3, #4
 800083c:	d000      	beq.n	8000840 <__aeabi_fdiv+0xa0>
 800083e:	3504      	adds	r5, #4
 8000840:	012b      	lsls	r3, r5, #4
 8000842:	d503      	bpl.n	800084c <__aeabi_fdiv+0xac>
 8000844:	0038      	movs	r0, r7
 8000846:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <__aeabi_fdiv+0x210>)
 8000848:	3080      	adds	r0, #128	; 0x80
 800084a:	401d      	ands	r5, r3
 800084c:	28fe      	cmp	r0, #254	; 0xfe
 800084e:	dc67      	bgt.n	8000920 <__aeabi_fdiv+0x180>
 8000850:	01ad      	lsls	r5, r5, #6
 8000852:	0a6d      	lsrs	r5, r5, #9
 8000854:	b2c0      	uxtb	r0, r0
 8000856:	e002      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000858:	001e      	movs	r6, r3
 800085a:	2000      	movs	r0, #0
 800085c:	2500      	movs	r5, #0
 800085e:	05c0      	lsls	r0, r0, #23
 8000860:	4328      	orrs	r0, r5
 8000862:	07f6      	lsls	r6, r6, #31
 8000864:	4330      	orrs	r0, r6
 8000866:	bce0      	pop	{r5, r6, r7}
 8000868:	46ba      	mov	sl, r7
 800086a:	46b1      	mov	r9, r6
 800086c:	46a8      	mov	r8, r5
 800086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000870:	2b00      	cmp	r3, #0
 8000872:	d12b      	bne.n	80008cc <__aeabi_fdiv+0x12c>
 8000874:	2001      	movs	r0, #1
 8000876:	464a      	mov	r2, r9
 8000878:	0033      	movs	r3, r6
 800087a:	494e      	ldr	r1, [pc, #312]	; (80009b4 <__aeabi_fdiv+0x214>)
 800087c:	4302      	orrs	r2, r0
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	588a      	ldr	r2, [r1, r2]
 8000882:	4063      	eors	r3, r4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4697      	mov	pc, r2
 8000888:	2d00      	cmp	r5, #0
 800088a:	d113      	bne.n	80008b4 <__aeabi_fdiv+0x114>
 800088c:	2304      	movs	r3, #4
 800088e:	4699      	mov	r9, r3
 8000890:	3b03      	subs	r3, #3
 8000892:	2700      	movs	r7, #0
 8000894:	469a      	mov	sl, r3
 8000896:	e79a      	b.n	80007ce <__aeabi_fdiv+0x2e>
 8000898:	2d00      	cmp	r5, #0
 800089a:	d105      	bne.n	80008a8 <__aeabi_fdiv+0x108>
 800089c:	2308      	movs	r3, #8
 800089e:	4699      	mov	r9, r3
 80008a0:	3b06      	subs	r3, #6
 80008a2:	27ff      	movs	r7, #255	; 0xff
 80008a4:	469a      	mov	sl, r3
 80008a6:	e792      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008a8:	230c      	movs	r3, #12
 80008aa:	4699      	mov	r9, r3
 80008ac:	3b09      	subs	r3, #9
 80008ae:	27ff      	movs	r7, #255	; 0xff
 80008b0:	469a      	mov	sl, r3
 80008b2:	e78c      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008b4:	0028      	movs	r0, r5
 80008b6:	f001 fa7b 	bl	8001db0 <__clzsi2>
 80008ba:	2776      	movs	r7, #118	; 0x76
 80008bc:	1f43      	subs	r3, r0, #5
 80008be:	409d      	lsls	r5, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	427f      	negs	r7, r7
 80008c4:	4699      	mov	r9, r3
 80008c6:	469a      	mov	sl, r3
 80008c8:	1a3f      	subs	r7, r7, r0
 80008ca:	e780      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fa6f 	bl	8001db0 <__clzsi2>
 80008d2:	4642      	mov	r2, r8
 80008d4:	1f43      	subs	r3, r0, #5
 80008d6:	2176      	movs	r1, #118	; 0x76
 80008d8:	409a      	lsls	r2, r3
 80008da:	4249      	negs	r1, r1
 80008dc:	1a09      	subs	r1, r1, r0
 80008de:	4690      	mov	r8, r2
 80008e0:	2000      	movs	r0, #0
 80008e2:	e785      	b.n	80007f0 <__aeabi_fdiv+0x50>
 80008e4:	21ff      	movs	r1, #255	; 0xff
 80008e6:	2003      	movs	r0, #3
 80008e8:	e782      	b.n	80007f0 <__aeabi_fdiv+0x50>
 80008ea:	001e      	movs	r6, r3
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2500      	movs	r5, #0
 80008f0:	e7b5      	b.n	800085e <__aeabi_fdiv+0xbe>
 80008f2:	2301      	movs	r3, #1
 80008f4:	1a1b      	subs	r3, r3, r0
 80008f6:	2b1b      	cmp	r3, #27
 80008f8:	dcaf      	bgt.n	800085a <__aeabi_fdiv+0xba>
 80008fa:	379e      	adds	r7, #158	; 0x9e
 80008fc:	0029      	movs	r1, r5
 80008fe:	40bd      	lsls	r5, r7
 8000900:	40d9      	lsrs	r1, r3
 8000902:	1e6a      	subs	r2, r5, #1
 8000904:	4195      	sbcs	r5, r2
 8000906:	430d      	orrs	r5, r1
 8000908:	076b      	lsls	r3, r5, #29
 800090a:	d004      	beq.n	8000916 <__aeabi_fdiv+0x176>
 800090c:	230f      	movs	r3, #15
 800090e:	402b      	ands	r3, r5
 8000910:	2b04      	cmp	r3, #4
 8000912:	d000      	beq.n	8000916 <__aeabi_fdiv+0x176>
 8000914:	3504      	adds	r5, #4
 8000916:	016b      	lsls	r3, r5, #5
 8000918:	d544      	bpl.n	80009a4 <__aeabi_fdiv+0x204>
 800091a:	2001      	movs	r0, #1
 800091c:	2500      	movs	r5, #0
 800091e:	e79e      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000920:	20ff      	movs	r0, #255	; 0xff
 8000922:	2500      	movs	r5, #0
 8000924:	e79b      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000926:	2580      	movs	r5, #128	; 0x80
 8000928:	2600      	movs	r6, #0
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	03ed      	lsls	r5, r5, #15
 800092e:	e796      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000930:	2300      	movs	r3, #0
 8000932:	4698      	mov	r8, r3
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	03c0      	lsls	r0, r0, #15
 8000938:	4205      	tst	r5, r0
 800093a:	d009      	beq.n	8000950 <__aeabi_fdiv+0x1b0>
 800093c:	4643      	mov	r3, r8
 800093e:	4203      	tst	r3, r0
 8000940:	d106      	bne.n	8000950 <__aeabi_fdiv+0x1b0>
 8000942:	4645      	mov	r5, r8
 8000944:	4305      	orrs	r5, r0
 8000946:	026d      	lsls	r5, r5, #9
 8000948:	0026      	movs	r6, r4
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	e786      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000950:	2080      	movs	r0, #128	; 0x80
 8000952:	03c0      	lsls	r0, r0, #15
 8000954:	4305      	orrs	r5, r0
 8000956:	026d      	lsls	r5, r5, #9
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	e77f      	b.n	800085e <__aeabi_fdiv+0xbe>
 800095e:	4641      	mov	r1, r8
 8000960:	016a      	lsls	r2, r5, #5
 8000962:	0148      	lsls	r0, r1, #5
 8000964:	4282      	cmp	r2, r0
 8000966:	d219      	bcs.n	800099c <__aeabi_fdiv+0x1fc>
 8000968:	211b      	movs	r1, #27
 800096a:	2500      	movs	r5, #0
 800096c:	3f01      	subs	r7, #1
 800096e:	2601      	movs	r6, #1
 8000970:	0014      	movs	r4, r2
 8000972:	006d      	lsls	r5, r5, #1
 8000974:	0052      	lsls	r2, r2, #1
 8000976:	2c00      	cmp	r4, #0
 8000978:	db01      	blt.n	800097e <__aeabi_fdiv+0x1de>
 800097a:	4290      	cmp	r0, r2
 800097c:	d801      	bhi.n	8000982 <__aeabi_fdiv+0x1e2>
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	4335      	orrs	r5, r6
 8000982:	3901      	subs	r1, #1
 8000984:	2900      	cmp	r1, #0
 8000986:	d1f3      	bne.n	8000970 <__aeabi_fdiv+0x1d0>
 8000988:	1e50      	subs	r0, r2, #1
 800098a:	4182      	sbcs	r2, r0
 800098c:	0038      	movs	r0, r7
 800098e:	307f      	adds	r0, #127	; 0x7f
 8000990:	001e      	movs	r6, r3
 8000992:	4315      	orrs	r5, r2
 8000994:	2800      	cmp	r0, #0
 8000996:	dd00      	ble.n	800099a <__aeabi_fdiv+0x1fa>
 8000998:	e74b      	b.n	8000832 <__aeabi_fdiv+0x92>
 800099a:	e7aa      	b.n	80008f2 <__aeabi_fdiv+0x152>
 800099c:	211a      	movs	r1, #26
 800099e:	2501      	movs	r5, #1
 80009a0:	1a12      	subs	r2, r2, r0
 80009a2:	e7e4      	b.n	800096e <__aeabi_fdiv+0x1ce>
 80009a4:	01ad      	lsls	r5, r5, #6
 80009a6:	2000      	movs	r0, #0
 80009a8:	0a6d      	lsrs	r5, r5, #9
 80009aa:	e758      	b.n	800085e <__aeabi_fdiv+0xbe>
 80009ac:	08007198 	.word	0x08007198
 80009b0:	f7ffffff 	.word	0xf7ffffff
 80009b4:	080071d8 	.word	0x080071d8

080009b8 <__eqsf2>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	0042      	lsls	r2, r0, #1
 80009bc:	024e      	lsls	r6, r1, #9
 80009be:	004c      	lsls	r4, r1, #1
 80009c0:	0245      	lsls	r5, r0, #9
 80009c2:	0a6d      	lsrs	r5, r5, #9
 80009c4:	0e12      	lsrs	r2, r2, #24
 80009c6:	0fc3      	lsrs	r3, r0, #31
 80009c8:	0a76      	lsrs	r6, r6, #9
 80009ca:	0e24      	lsrs	r4, r4, #24
 80009cc:	0fc9      	lsrs	r1, r1, #31
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d00f      	beq.n	80009f2 <__eqsf2+0x3a>
 80009d2:	2cff      	cmp	r4, #255	; 0xff
 80009d4:	d011      	beq.n	80009fa <__eqsf2+0x42>
 80009d6:	2001      	movs	r0, #1
 80009d8:	42a2      	cmp	r2, r4
 80009da:	d000      	beq.n	80009de <__eqsf2+0x26>
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
 80009de:	42b5      	cmp	r5, r6
 80009e0:	d1fc      	bne.n	80009dc <__eqsf2+0x24>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d00d      	beq.n	8000a02 <__eqsf2+0x4a>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d1f8      	bne.n	80009dc <__eqsf2+0x24>
 80009ea:	0028      	movs	r0, r5
 80009ec:	1e45      	subs	r5, r0, #1
 80009ee:	41a8      	sbcs	r0, r5
 80009f0:	e7f4      	b.n	80009dc <__eqsf2+0x24>
 80009f2:	2001      	movs	r0, #1
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d1f1      	bne.n	80009dc <__eqsf2+0x24>
 80009f8:	e7eb      	b.n	80009d2 <__eqsf2+0x1a>
 80009fa:	2001      	movs	r0, #1
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d1ed      	bne.n	80009dc <__eqsf2+0x24>
 8000a00:	e7e9      	b.n	80009d6 <__eqsf2+0x1e>
 8000a02:	2000      	movs	r0, #0
 8000a04:	e7ea      	b.n	80009dc <__eqsf2+0x24>
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <__gesf2>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	0042      	lsls	r2, r0, #1
 8000a0c:	0246      	lsls	r6, r0, #9
 8000a0e:	024d      	lsls	r5, r1, #9
 8000a10:	004c      	lsls	r4, r1, #1
 8000a12:	0fc3      	lsrs	r3, r0, #31
 8000a14:	0a76      	lsrs	r6, r6, #9
 8000a16:	0e12      	lsrs	r2, r2, #24
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e24      	lsrs	r4, r4, #24
 8000a1c:	0fc8      	lsrs	r0, r1, #31
 8000a1e:	2aff      	cmp	r2, #255	; 0xff
 8000a20:	d01f      	beq.n	8000a62 <__gesf2+0x5a>
 8000a22:	2cff      	cmp	r4, #255	; 0xff
 8000a24:	d010      	beq.n	8000a48 <__gesf2+0x40>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d11f      	bne.n	8000a6a <__gesf2+0x62>
 8000a2a:	4271      	negs	r1, r6
 8000a2c:	4171      	adcs	r1, r6
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d101      	bne.n	8000a36 <__gesf2+0x2e>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d01e      	beq.n	8000a74 <__gesf2+0x6c>
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d10e      	bne.n	8000a58 <__gesf2+0x50>
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	d01e      	beq.n	8000a7c <__gesf2+0x74>
 8000a3e:	2102      	movs	r1, #2
 8000a40:	1e58      	subs	r0, r3, #1
 8000a42:	4008      	ands	r0, r1
 8000a44:	3801      	subs	r0, #1
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d126      	bne.n	8000a9a <__gesf2+0x92>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f4      	bne.n	8000a3a <__gesf2+0x32>
 8000a50:	4271      	negs	r1, r6
 8000a52:	4171      	adcs	r1, r6
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d0f0      	beq.n	8000a3a <__gesf2+0x32>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d1f4      	bne.n	8000a46 <__gesf2+0x3e>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	4240      	negs	r0, r0
 8000a60:	e7f1      	b.n	8000a46 <__gesf2+0x3e>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d119      	bne.n	8000a9a <__gesf2+0x92>
 8000a66:	2cff      	cmp	r4, #255	; 0xff
 8000a68:	d0ee      	beq.n	8000a48 <__gesf2+0x40>
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d1e5      	bne.n	8000a3a <__gesf2+0x32>
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d1e3      	bne.n	8000a3a <__gesf2+0x32>
 8000a72:	e7e4      	b.n	8000a3e <__gesf2+0x36>
 8000a74:	2000      	movs	r0, #0
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d0e5      	beq.n	8000a46 <__gesf2+0x3e>
 8000a7a:	e7e0      	b.n	8000a3e <__gesf2+0x36>
 8000a7c:	42a2      	cmp	r2, r4
 8000a7e:	dc05      	bgt.n	8000a8c <__gesf2+0x84>
 8000a80:	dbea      	blt.n	8000a58 <__gesf2+0x50>
 8000a82:	42ae      	cmp	r6, r5
 8000a84:	d802      	bhi.n	8000a8c <__gesf2+0x84>
 8000a86:	d3e7      	bcc.n	8000a58 <__gesf2+0x50>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e7dc      	b.n	8000a46 <__gesf2+0x3e>
 8000a8c:	4241      	negs	r1, r0
 8000a8e:	4141      	adcs	r1, r0
 8000a90:	4248      	negs	r0, r1
 8000a92:	2102      	movs	r1, #2
 8000a94:	4008      	ands	r0, r1
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7d5      	b.n	8000a46 <__gesf2+0x3e>
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	4240      	negs	r0, r0
 8000a9e:	e7d2      	b.n	8000a46 <__gesf2+0x3e>

08000aa0 <__lesf2>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0246      	lsls	r6, r0, #9
 8000aa6:	024d      	lsls	r5, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc8      	lsrs	r0, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00d      	beq.n	8000ad6 <__lesf2+0x36>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d00f      	beq.n	8000ade <__lesf2+0x3e>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d123      	bne.n	8000b0a <__lesf2+0x6a>
 8000ac2:	4271      	negs	r1, r6
 8000ac4:	4171      	adcs	r1, r6
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d10f      	bne.n	8000aea <__lesf2+0x4a>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d10d      	bne.n	8000aea <__lesf2+0x4a>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	d014      	beq.n	8000afe <__lesf2+0x5e>
 8000ad4:	e00d      	b.n	8000af2 <__lesf2+0x52>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d110      	bne.n	8000afc <__lesf2+0x5c>
 8000ada:	2cff      	cmp	r4, #255	; 0xff
 8000adc:	d115      	bne.n	8000b0a <__lesf2+0x6a>
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	d10c      	bne.n	8000afc <__lesf2+0x5c>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d103      	bne.n	8000aee <__lesf2+0x4e>
 8000ae6:	4271      	negs	r1, r6
 8000ae8:	4171      	adcs	r1, r6
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d108      	bne.n	8000b00 <__lesf2+0x60>
 8000aee:	4283      	cmp	r3, r0
 8000af0:	d010      	beq.n	8000b14 <__lesf2+0x74>
 8000af2:	2102      	movs	r1, #2
 8000af4:	1e58      	subs	r0, r3, #1
 8000af6:	4008      	ands	r0, r1
 8000af8:	3801      	subs	r0, #1
 8000afa:	e000      	b.n	8000afe <__lesf2+0x5e>
 8000afc:	2002      	movs	r0, #2
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1fc      	bne.n	8000afe <__lesf2+0x5e>
 8000b04:	2001      	movs	r0, #1
 8000b06:	4240      	negs	r0, r0
 8000b08:	e7f9      	b.n	8000afe <__lesf2+0x5e>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d1ef      	bne.n	8000aee <__lesf2+0x4e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d1ed      	bne.n	8000aee <__lesf2+0x4e>
 8000b12:	e7ee      	b.n	8000af2 <__lesf2+0x52>
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	dc05      	bgt.n	8000b24 <__lesf2+0x84>
 8000b18:	dbf2      	blt.n	8000b00 <__lesf2+0x60>
 8000b1a:	42ae      	cmp	r6, r5
 8000b1c:	d802      	bhi.n	8000b24 <__lesf2+0x84>
 8000b1e:	d3ef      	bcc.n	8000b00 <__lesf2+0x60>
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ec      	b.n	8000afe <__lesf2+0x5e>
 8000b24:	4241      	negs	r1, r0
 8000b26:	4141      	adcs	r1, r0
 8000b28:	4248      	negs	r0, r1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4008      	ands	r0, r1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7e5      	b.n	8000afe <__lesf2+0x5e>
 8000b32:	46c0      	nop			; (mov r8, r8)

08000b34 <__aeabi_fmul>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	4657      	mov	r7, sl
 8000b38:	464e      	mov	r6, r9
 8000b3a:	4645      	mov	r5, r8
 8000b3c:	46de      	mov	lr, fp
 8000b3e:	0244      	lsls	r4, r0, #9
 8000b40:	b5e0      	push	{r5, r6, r7, lr}
 8000b42:	0045      	lsls	r5, r0, #1
 8000b44:	1c0f      	adds	r7, r1, #0
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	0e2d      	lsrs	r5, r5, #24
 8000b4a:	0fc6      	lsrs	r6, r0, #31
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d047      	beq.n	8000be0 <__aeabi_fmul+0xac>
 8000b50:	2dff      	cmp	r5, #255	; 0xff
 8000b52:	d04d      	beq.n	8000bf0 <__aeabi_fmul+0xbc>
 8000b54:	2300      	movs	r3, #0
 8000b56:	2080      	movs	r0, #128	; 0x80
 8000b58:	469a      	mov	sl, r3
 8000b5a:	469b      	mov	fp, r3
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	04c0      	lsls	r0, r0, #19
 8000b60:	4304      	orrs	r4, r0
 8000b62:	3d7f      	subs	r5, #127	; 0x7f
 8000b64:	0278      	lsls	r0, r7, #9
 8000b66:	0a43      	lsrs	r3, r0, #9
 8000b68:	4699      	mov	r9, r3
 8000b6a:	007a      	lsls	r2, r7, #1
 8000b6c:	0ffb      	lsrs	r3, r7, #31
 8000b6e:	4698      	mov	r8, r3
 8000b70:	0e12      	lsrs	r2, r2, #24
 8000b72:	464b      	mov	r3, r9
 8000b74:	d044      	beq.n	8000c00 <__aeabi_fmul+0xcc>
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d011      	beq.n	8000b9e <__aeabi_fmul+0x6a>
 8000b7a:	00d8      	lsls	r0, r3, #3
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	04db      	lsls	r3, r3, #19
 8000b80:	4303      	orrs	r3, r0
 8000b82:	4699      	mov	r9, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	3a7f      	subs	r2, #127	; 0x7f
 8000b88:	18ad      	adds	r5, r5, r2
 8000b8a:	4647      	mov	r7, r8
 8000b8c:	4653      	mov	r3, sl
 8000b8e:	4077      	eors	r7, r6
 8000b90:	1c69      	adds	r1, r5, #1
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d83f      	bhi.n	8000c16 <__aeabi_fmul+0xe2>
 8000b96:	4a72      	ldr	r2, [pc, #456]	; (8000d60 <__aeabi_fmul+0x22c>)
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	58d3      	ldr	r3, [r2, r3]
 8000b9c:	469f      	mov	pc, r3
 8000b9e:	35ff      	adds	r5, #255	; 0xff
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fmul+0x72>
 8000ba4:	e079      	b.n	8000c9a <__aeabi_fmul+0x166>
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	2302      	movs	r3, #2
 8000baa:	431a      	orrs	r2, r3
 8000bac:	4692      	mov	sl, r2
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e7eb      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000bb2:	4647      	mov	r7, r8
 8000bb4:	464c      	mov	r4, r9
 8000bb6:	4683      	mov	fp, r0
 8000bb8:	465b      	mov	r3, fp
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d028      	beq.n	8000c10 <__aeabi_fmul+0xdc>
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fmul+0x90>
 8000bc2:	e0c6      	b.n	8000d52 <__aeabi_fmul+0x21e>
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d14f      	bne.n	8000c68 <__aeabi_fmul+0x134>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	05c0      	lsls	r0, r0, #23
 8000bce:	07ff      	lsls	r7, r7, #31
 8000bd0:	4320      	orrs	r0, r4
 8000bd2:	4338      	orrs	r0, r7
 8000bd4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd6:	46bb      	mov	fp, r7
 8000bd8:	46b2      	mov	sl, r6
 8000bda:	46a9      	mov	r9, r5
 8000bdc:	46a0      	mov	r8, r4
 8000bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d171      	bne.n	8000cc8 <__aeabi_fmul+0x194>
 8000be4:	2304      	movs	r3, #4
 8000be6:	469a      	mov	sl, r3
 8000be8:	3b03      	subs	r3, #3
 8000bea:	2500      	movs	r5, #0
 8000bec:	469b      	mov	fp, r3
 8000bee:	e7b9      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d163      	bne.n	8000cbc <__aeabi_fmul+0x188>
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	3b06      	subs	r3, #6
 8000bfa:	25ff      	movs	r5, #255	; 0xff
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	e7b1      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d150      	bne.n	8000ca6 <__aeabi_fmul+0x172>
 8000c04:	4652      	mov	r2, sl
 8000c06:	3301      	adds	r3, #1
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4692      	mov	sl, r2
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	e7bc      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000c10:	20ff      	movs	r0, #255	; 0xff
 8000c12:	2400      	movs	r4, #0
 8000c14:	e7da      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000c16:	4648      	mov	r0, r9
 8000c18:	0c26      	lsrs	r6, r4, #16
 8000c1a:	0424      	lsls	r4, r4, #16
 8000c1c:	0c22      	lsrs	r2, r4, #16
 8000c1e:	0404      	lsls	r4, r0, #16
 8000c20:	0c24      	lsrs	r4, r4, #16
 8000c22:	464b      	mov	r3, r9
 8000c24:	0020      	movs	r0, r4
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	4350      	muls	r0, r2
 8000c2a:	4374      	muls	r4, r6
 8000c2c:	435a      	muls	r2, r3
 8000c2e:	435e      	muls	r6, r3
 8000c30:	1912      	adds	r2, r2, r4
 8000c32:	0c03      	lsrs	r3, r0, #16
 8000c34:	189b      	adds	r3, r3, r2
 8000c36:	429c      	cmp	r4, r3
 8000c38:	d903      	bls.n	8000c42 <__aeabi_fmul+0x10e>
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0252      	lsls	r2, r2, #9
 8000c3e:	4694      	mov	ip, r2
 8000c40:	4466      	add	r6, ip
 8000c42:	0400      	lsls	r0, r0, #16
 8000c44:	041a      	lsls	r2, r3, #16
 8000c46:	0c00      	lsrs	r0, r0, #16
 8000c48:	1812      	adds	r2, r2, r0
 8000c4a:	0194      	lsls	r4, r2, #6
 8000c4c:	1e60      	subs	r0, r4, #1
 8000c4e:	4184      	sbcs	r4, r0
 8000c50:	0c1b      	lsrs	r3, r3, #16
 8000c52:	0e92      	lsrs	r2, r2, #26
 8000c54:	199b      	adds	r3, r3, r6
 8000c56:	4314      	orrs	r4, r2
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	d572      	bpl.n	8000d46 <__aeabi_fmul+0x212>
 8000c60:	2001      	movs	r0, #1
 8000c62:	0863      	lsrs	r3, r4, #1
 8000c64:	4004      	ands	r4, r0
 8000c66:	431c      	orrs	r4, r3
 8000c68:	0008      	movs	r0, r1
 8000c6a:	307f      	adds	r0, #127	; 0x7f
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	dd3c      	ble.n	8000cea <__aeabi_fmul+0x1b6>
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fmul+0x14a>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fmul+0x14a>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0123      	lsls	r3, r4, #4
 8000c80:	d503      	bpl.n	8000c8a <__aeabi_fmul+0x156>
 8000c82:	3180      	adds	r1, #128	; 0x80
 8000c84:	0008      	movs	r0, r1
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <__aeabi_fmul+0x230>)
 8000c88:	401c      	ands	r4, r3
 8000c8a:	28fe      	cmp	r0, #254	; 0xfe
 8000c8c:	dcc0      	bgt.n	8000c10 <__aeabi_fmul+0xdc>
 8000c8e:	01a4      	lsls	r4, r4, #6
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	b2c0      	uxtb	r0, r0
 8000c94:	e79a      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000c96:	0037      	movs	r7, r6
 8000c98:	e78e      	b.n	8000bb8 <__aeabi_fmul+0x84>
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	4692      	mov	sl, r2
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	e771      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	f001 f882 	bl	8001db0 <__clzsi2>
 8000cac:	464a      	mov	r2, r9
 8000cae:	1f43      	subs	r3, r0, #5
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	1a2d      	subs	r5, r5, r0
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	3d76      	subs	r5, #118	; 0x76
 8000cba:	e766      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	3b09      	subs	r3, #9
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	e74d      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000cc8:	0020      	movs	r0, r4
 8000cca:	f001 f871 	bl	8001db0 <__clzsi2>
 8000cce:	2576      	movs	r5, #118	; 0x76
 8000cd0:	1f43      	subs	r3, r0, #5
 8000cd2:	409c      	lsls	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	426d      	negs	r5, r5
 8000cd8:	469a      	mov	sl, r3
 8000cda:	469b      	mov	fp, r3
 8000cdc:	1a2d      	subs	r5, r5, r0
 8000cde:	e741      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000ce0:	2480      	movs	r4, #128	; 0x80
 8000ce2:	2700      	movs	r7, #0
 8000ce4:	20ff      	movs	r0, #255	; 0xff
 8000ce6:	03e4      	lsls	r4, r4, #15
 8000ce8:	e770      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000cea:	2301      	movs	r3, #1
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	2b1b      	cmp	r3, #27
 8000cf0:	dd00      	ble.n	8000cf4 <__aeabi_fmul+0x1c0>
 8000cf2:	e769      	b.n	8000bc8 <__aeabi_fmul+0x94>
 8000cf4:	319e      	adds	r1, #158	; 0x9e
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	408c      	lsls	r4, r1
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	4304      	orrs	r4, r0
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x1dc>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x1dc>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	d51a      	bpl.n	8000d4a <__aeabi_fmul+0x216>
 8000d14:	2001      	movs	r0, #1
 8000d16:	2400      	movs	r4, #0
 8000d18:	e758      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d1a:	2080      	movs	r0, #128	; 0x80
 8000d1c:	03c0      	lsls	r0, r0, #15
 8000d1e:	4204      	tst	r4, r0
 8000d20:	d009      	beq.n	8000d36 <__aeabi_fmul+0x202>
 8000d22:	464b      	mov	r3, r9
 8000d24:	4203      	tst	r3, r0
 8000d26:	d106      	bne.n	8000d36 <__aeabi_fmul+0x202>
 8000d28:	464c      	mov	r4, r9
 8000d2a:	4304      	orrs	r4, r0
 8000d2c:	0264      	lsls	r4, r4, #9
 8000d2e:	4647      	mov	r7, r8
 8000d30:	20ff      	movs	r0, #255	; 0xff
 8000d32:	0a64      	lsrs	r4, r4, #9
 8000d34:	e74a      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d36:	2080      	movs	r0, #128	; 0x80
 8000d38:	03c0      	lsls	r0, r0, #15
 8000d3a:	4304      	orrs	r4, r0
 8000d3c:	0264      	lsls	r4, r4, #9
 8000d3e:	0037      	movs	r7, r6
 8000d40:	20ff      	movs	r0, #255	; 0xff
 8000d42:	0a64      	lsrs	r4, r4, #9
 8000d44:	e742      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d46:	0029      	movs	r1, r5
 8000d48:	e78e      	b.n	8000c68 <__aeabi_fmul+0x134>
 8000d4a:	01a4      	lsls	r4, r4, #6
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	e73c      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	03c0      	lsls	r0, r0, #15
 8000d56:	4304      	orrs	r4, r0
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	0a64      	lsrs	r4, r4, #9
 8000d5e:	e735      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d60:	08007218 	.word	0x08007218
 8000d64:	f7ffffff 	.word	0xf7ffffff

08000d68 <__aeabi_fsub>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	4646      	mov	r6, r8
 8000d6c:	46d6      	mov	lr, sl
 8000d6e:	464f      	mov	r7, r9
 8000d70:	0243      	lsls	r3, r0, #9
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	00da      	lsls	r2, r3, #3
 8000d76:	4694      	mov	ip, r2
 8000d78:	024a      	lsls	r2, r1, #9
 8000d7a:	b5c0      	push	{r6, r7, lr}
 8000d7c:	0044      	lsls	r4, r0, #1
 8000d7e:	0a56      	lsrs	r6, r2, #9
 8000d80:	1c05      	adds	r5, r0, #0
 8000d82:	46b0      	mov	r8, r6
 8000d84:	0e24      	lsrs	r4, r4, #24
 8000d86:	004e      	lsls	r6, r1, #1
 8000d88:	0992      	lsrs	r2, r2, #6
 8000d8a:	001f      	movs	r7, r3
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	4692      	mov	sl, r2
 8000d90:	0fed      	lsrs	r5, r5, #31
 8000d92:	0e36      	lsrs	r6, r6, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2eff      	cmp	r6, #255	; 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x34>
 8000d9a:	e07f      	b.n	8000e9c <__aeabi_fsub+0x134>
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4051      	eors	r1, r2
 8000da0:	428d      	cmp	r5, r1
 8000da2:	d051      	beq.n	8000e48 <__aeabi_fsub+0xe0>
 8000da4:	1ba2      	subs	r2, r4, r6
 8000da6:	4691      	mov	r9, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	dc00      	bgt.n	8000dae <__aeabi_fsub+0x46>
 8000dac:	e07e      	b.n	8000eac <__aeabi_fsub+0x144>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x4c>
 8000db2:	e099      	b.n	8000ee8 <__aeabi_fsub+0x180>
 8000db4:	2cff      	cmp	r4, #255	; 0xff
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x52>
 8000db8:	e08c      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	04db      	lsls	r3, r3, #19
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	4692      	mov	sl, r2
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2a1b      	cmp	r2, #27
 8000dca:	dc08      	bgt.n	8000dde <__aeabi_fsub+0x76>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	2120      	movs	r1, #32
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1a89      	subs	r1, r1, r2
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	408a      	lsls	r2, r1
 8000dd8:	1e51      	subs	r1, r2, #1
 8000dda:	418a      	sbcs	r2, r1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	4662      	mov	r2, ip
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	015a      	lsls	r2, r3, #5
 8000de4:	d400      	bmi.n	8000de8 <__aeabi_fsub+0x80>
 8000de6:	e0f3      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	099e      	lsrs	r6, r3, #6
 8000dec:	0030      	movs	r0, r6
 8000dee:	f000 ffdf 	bl	8001db0 <__clzsi2>
 8000df2:	3805      	subs	r0, #5
 8000df4:	4086      	lsls	r6, r0
 8000df6:	4284      	cmp	r4, r0
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_fsub+0x94>
 8000dfa:	e0f7      	b.n	8000fec <__aeabi_fsub+0x284>
 8000dfc:	0032      	movs	r2, r6
 8000dfe:	1b04      	subs	r4, r0, r4
 8000e00:	2020      	movs	r0, #32
 8000e02:	3401      	adds	r4, #1
 8000e04:	40e2      	lsrs	r2, r4
 8000e06:	1b04      	subs	r4, r0, r4
 8000e08:	40a6      	lsls	r6, r4
 8000e0a:	0033      	movs	r3, r6
 8000e0c:	1e5e      	subs	r6, r3, #1
 8000e0e:	41b3      	sbcs	r3, r6
 8000e10:	2400      	movs	r4, #0
 8000e12:	4313      	orrs	r3, r2
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	d004      	beq.n	8000e22 <__aeabi_fsub+0xba>
 8000e18:	220f      	movs	r2, #15
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	2a04      	cmp	r2, #4
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0xba>
 8000e20:	3304      	adds	r3, #4
 8000e22:	015a      	lsls	r2, r3, #5
 8000e24:	d400      	bmi.n	8000e28 <__aeabi_fsub+0xc0>
 8000e26:	e0d6      	b.n	8000fd6 <__aeabi_fsub+0x26e>
 8000e28:	1c62      	adds	r2, r4, #1
 8000e2a:	2cfe      	cmp	r4, #254	; 0xfe
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0xc8>
 8000e2e:	e0da      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	0a5f      	lsrs	r7, r3, #9
 8000e34:	b2d0      	uxtb	r0, r2
 8000e36:	05c0      	lsls	r0, r0, #23
 8000e38:	4338      	orrs	r0, r7
 8000e3a:	07ed      	lsls	r5, r5, #31
 8000e3c:	4328      	orrs	r0, r5
 8000e3e:	bce0      	pop	{r5, r6, r7}
 8000e40:	46ba      	mov	sl, r7
 8000e42:	46b1      	mov	r9, r6
 8000e44:	46a8      	mov	r8, r5
 8000e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e48:	1ba2      	subs	r2, r4, r6
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	dd63      	ble.n	8000f18 <__aeabi_fsub+0x1b0>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0xee>
 8000e54:	e099      	b.n	8000f8a <__aeabi_fsub+0x222>
 8000e56:	2cff      	cmp	r4, #255	; 0xff
 8000e58:	d03c      	beq.n	8000ed4 <__aeabi_fsub+0x16c>
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	04db      	lsls	r3, r3, #19
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4692      	mov	sl, r2
 8000e64:	464a      	mov	r2, r9
 8000e66:	2301      	movs	r3, #1
 8000e68:	2a1b      	cmp	r2, #27
 8000e6a:	dc08      	bgt.n	8000e7e <__aeabi_fsub+0x116>
 8000e6c:	4653      	mov	r3, sl
 8000e6e:	2120      	movs	r1, #32
 8000e70:	40d3      	lsrs	r3, r2
 8000e72:	1a89      	subs	r1, r1, r2
 8000e74:	4652      	mov	r2, sl
 8000e76:	408a      	lsls	r2, r1
 8000e78:	1e51      	subs	r1, r2, #1
 8000e7a:	418a      	sbcs	r2, r1
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	4463      	add	r3, ip
 8000e80:	015a      	lsls	r2, r3, #5
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_fsub+0x11e>
 8000e84:	e0a4      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8000e86:	3401      	adds	r4, #1
 8000e88:	2cff      	cmp	r4, #255	; 0xff
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x126>
 8000e8c:	e0ab      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4997      	ldr	r1, [pc, #604]	; (80010f0 <__aeabi_fsub+0x388>)
 8000e92:	401a      	ands	r2, r3
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	400b      	ands	r3, r1
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	e7bb      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d032      	beq.n	8000f06 <__aeabi_fsub+0x19e>
 8000ea0:	428d      	cmp	r5, r1
 8000ea2:	d035      	beq.n	8000f10 <__aeabi_fsub+0x1a8>
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	4252      	negs	r2, r2
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	44a1      	add	r9, r4
 8000eac:	464a      	mov	r2, r9
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d051      	beq.n	8000f56 <__aeabi_fsub+0x1ee>
 8000eb2:	1b30      	subs	r0, r6, r4
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0x152>
 8000eb8:	e09c      	b.n	8000ff4 <__aeabi_fsub+0x28c>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x15a>
 8000ec0:	e0df      	b.n	8001082 <__aeabi_fsub+0x31a>
 8000ec2:	3801      	subs	r0, #1
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x162>
 8000ec8:	e0f7      	b.n	80010ba <__aeabi_fsub+0x352>
 8000eca:	2eff      	cmp	r6, #255	; 0xff
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0x168>
 8000ece:	e099      	b.n	8001004 <__aeabi_fsub+0x29c>
 8000ed0:	000d      	movs	r5, r1
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x172>
 8000ed8:	e085      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000eda:	2780      	movs	r7, #128	; 0x80
 8000edc:	03ff      	lsls	r7, r7, #15
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	027f      	lsls	r7, r7, #9
 8000ee2:	20ff      	movs	r0, #255	; 0xff
 8000ee4:	0a7f      	lsrs	r7, r7, #9
 8000ee6:	e7a6      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000ee8:	4652      	mov	r2, sl
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d074      	beq.n	8000fd8 <__aeabi_fsub+0x270>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4252      	negs	r2, r2
 8000ef2:	4690      	mov	r8, r2
 8000ef4:	44c1      	add	r9, r8
 8000ef6:	464a      	mov	r2, r9
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x196>
 8000efc:	e0c8      	b.n	8001090 <__aeabi_fsub+0x328>
 8000efe:	2cff      	cmp	r4, #255	; 0xff
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x19c>
 8000f02:	e75f      	b.n	8000dc4 <__aeabi_fsub+0x5c>
 8000f04:	e7e6      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000f06:	2201      	movs	r2, #1
 8000f08:	4051      	eors	r1, r2
 8000f0a:	42a9      	cmp	r1, r5
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x1a8>
 8000f0e:	e749      	b.n	8000da4 <__aeabi_fsub+0x3c>
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	4252      	negs	r2, r2
 8000f14:	4691      	mov	r9, r2
 8000f16:	44a1      	add	r9, r4
 8000f18:	464a      	mov	r2, r9
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d043      	beq.n	8000fa6 <__aeabi_fsub+0x23e>
 8000f1e:	1b31      	subs	r1, r6, r4
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x1be>
 8000f24:	e08c      	b.n	8001040 <__aeabi_fsub+0x2d8>
 8000f26:	2eff      	cmp	r6, #255	; 0xff
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x1c4>
 8000f2a:	e092      	b.n	8001052 <__aeabi_fsub+0x2ea>
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	4662      	mov	r2, ip
 8000f30:	04db      	lsls	r3, r3, #19
 8000f32:	431a      	orrs	r2, r3
 8000f34:	4694      	mov	ip, r2
 8000f36:	2301      	movs	r3, #1
 8000f38:	291b      	cmp	r1, #27
 8000f3a:	dc09      	bgt.n	8000f50 <__aeabi_fsub+0x1e8>
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	4663      	mov	r3, ip
 8000f40:	4662      	mov	r2, ip
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	1a41      	subs	r1, r0, r1
 8000f46:	408a      	lsls	r2, r1
 8000f48:	0011      	movs	r1, r2
 8000f4a:	1e48      	subs	r0, r1, #1
 8000f4c:	4181      	sbcs	r1, r0
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	0034      	movs	r4, r6
 8000f52:	4453      	add	r3, sl
 8000f54:	e794      	b.n	8000e80 <__aeabi_fsub+0x118>
 8000f56:	22fe      	movs	r2, #254	; 0xfe
 8000f58:	1c66      	adds	r6, r4, #1
 8000f5a:	4232      	tst	r2, r6
 8000f5c:	d164      	bne.n	8001028 <__aeabi_fsub+0x2c0>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x1fc>
 8000f62:	e082      	b.n	800106a <__aeabi_fsub+0x302>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x204>
 8000f6a:	e0ab      	b.n	80010c4 <__aeabi_fsub+0x35c>
 8000f6c:	4653      	mov	r3, sl
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x20c>
 8000f72:	e760      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000f74:	4663      	mov	r3, ip
 8000f76:	4652      	mov	r2, sl
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d400      	bmi.n	8000f80 <__aeabi_fsub+0x218>
 8000f7e:	e0aa      	b.n	80010d6 <__aeabi_fsub+0x36e>
 8000f80:	4663      	mov	r3, ip
 8000f82:	4652      	mov	r2, sl
 8000f84:	000d      	movs	r5, r1
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	e744      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d023      	beq.n	8000fd8 <__aeabi_fsub+0x270>
 8000f90:	2201      	movs	r2, #1
 8000f92:	4252      	negs	r2, r2
 8000f94:	4690      	mov	r8, r2
 8000f96:	44c1      	add	r9, r8
 8000f98:	464a      	mov	r2, r9
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d075      	beq.n	800108a <__aeabi_fsub+0x322>
 8000f9e:	2cff      	cmp	r4, #255	; 0xff
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_fsub+0x23c>
 8000fa2:	e75f      	b.n	8000e64 <__aeabi_fsub+0xfc>
 8000fa4:	e796      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000fa6:	26fe      	movs	r6, #254	; 0xfe
 8000fa8:	3401      	adds	r4, #1
 8000faa:	4226      	tst	r6, r4
 8000fac:	d153      	bne.n	8001056 <__aeabi_fsub+0x2ee>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d172      	bne.n	8001098 <__aeabi_fsub+0x330>
 8000fb2:	4663      	mov	r3, ip
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x252>
 8000fb8:	e093      	b.n	80010e2 <__aeabi_fsub+0x37a>
 8000fba:	4653      	mov	r3, sl
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x25a>
 8000fc0:	e739      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fc2:	4463      	add	r3, ip
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	015a      	lsls	r2, r3, #5
 8000fc8:	d502      	bpl.n	8000fd0 <__aeabi_fsub+0x268>
 8000fca:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <__aeabi_fsub+0x38c>)
 8000fcc:	3401      	adds	r4, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	075a      	lsls	r2, r3, #29
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_fsub+0x26e>
 8000fd4:	e720      	b.n	8000e18 <__aeabi_fsub+0xb0>
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	2cff      	cmp	r4, #255	; 0xff
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x276>
 8000fdc:	e77a      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	0a5f      	lsrs	r7, r3, #9
 8000fe2:	b2e0      	uxtb	r0, r4
 8000fe4:	e727      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fe6:	20ff      	movs	r0, #255	; 0xff
 8000fe8:	2700      	movs	r7, #0
 8000fea:	e724      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fec:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <__aeabi_fsub+0x38c>)
 8000fee:	1a24      	subs	r4, r4, r0
 8000ff0:	4033      	ands	r3, r6
 8000ff2:	e70f      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000ff4:	2eff      	cmp	r6, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x292>
 8000ff8:	e76a      	b.n	8000ed0 <__aeabi_fsub+0x168>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	431a      	orrs	r2, r3
 8001002:	4694      	mov	ip, r2
 8001004:	2301      	movs	r3, #1
 8001006:	281b      	cmp	r0, #27
 8001008:	dc09      	bgt.n	800101e <__aeabi_fsub+0x2b6>
 800100a:	2420      	movs	r4, #32
 800100c:	4663      	mov	r3, ip
 800100e:	4662      	mov	r2, ip
 8001010:	40c3      	lsrs	r3, r0
 8001012:	1a20      	subs	r0, r4, r0
 8001014:	4082      	lsls	r2, r0
 8001016:	0010      	movs	r0, r2
 8001018:	1e44      	subs	r4, r0, #1
 800101a:	41a0      	sbcs	r0, r4
 800101c:	4303      	orrs	r3, r0
 800101e:	4652      	mov	r2, sl
 8001020:	000d      	movs	r5, r1
 8001022:	0034      	movs	r4, r6
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	e6dc      	b.n	8000de2 <__aeabi_fsub+0x7a>
 8001028:	4663      	mov	r3, ip
 800102a:	4652      	mov	r2, sl
 800102c:	1a9e      	subs	r6, r3, r2
 800102e:	0173      	lsls	r3, r6, #5
 8001030:	d417      	bmi.n	8001062 <__aeabi_fsub+0x2fa>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x2d0>
 8001036:	e6d9      	b.n	8000dec <__aeabi_fsub+0x84>
 8001038:	2500      	movs	r5, #0
 800103a:	2000      	movs	r0, #0
 800103c:	2700      	movs	r7, #0
 800103e:	e6fa      	b.n	8000e36 <__aeabi_fsub+0xce>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d044      	beq.n	80010d0 <__aeabi_fsub+0x368>
 8001046:	3901      	subs	r1, #1
 8001048:	2900      	cmp	r1, #0
 800104a:	d04c      	beq.n	80010e6 <__aeabi_fsub+0x37e>
 800104c:	2eff      	cmp	r6, #255	; 0xff
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x2ea>
 8001050:	e771      	b.n	8000f36 <__aeabi_fsub+0x1ce>
 8001052:	4643      	mov	r3, r8
 8001054:	e73e      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8001056:	2cff      	cmp	r4, #255	; 0xff
 8001058:	d0c5      	beq.n	8000fe6 <__aeabi_fsub+0x27e>
 800105a:	4652      	mov	r2, sl
 800105c:	4462      	add	r2, ip
 800105e:	0853      	lsrs	r3, r2, #1
 8001060:	e7b6      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8001062:	4663      	mov	r3, ip
 8001064:	000d      	movs	r5, r1
 8001066:	1ad6      	subs	r6, r2, r3
 8001068:	e6c0      	b.n	8000dec <__aeabi_fsub+0x84>
 800106a:	4662      	mov	r2, ip
 800106c:	2a00      	cmp	r2, #0
 800106e:	d116      	bne.n	800109e <__aeabi_fsub+0x336>
 8001070:	4653      	mov	r3, sl
 8001072:	2b00      	cmp	r3, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_fsub+0x310>
 8001076:	e72b      	b.n	8000ed0 <__aeabi_fsub+0x168>
 8001078:	2780      	movs	r7, #128	; 0x80
 800107a:	2500      	movs	r5, #0
 800107c:	20ff      	movs	r0, #255	; 0xff
 800107e:	03ff      	lsls	r7, r7, #15
 8001080:	e6d9      	b.n	8000e36 <__aeabi_fsub+0xce>
 8001082:	000d      	movs	r5, r1
 8001084:	4643      	mov	r3, r8
 8001086:	0034      	movs	r4, r6
 8001088:	e7a6      	b.n	8000fd8 <__aeabi_fsub+0x270>
 800108a:	4653      	mov	r3, sl
 800108c:	4463      	add	r3, ip
 800108e:	e6f7      	b.n	8000e80 <__aeabi_fsub+0x118>
 8001090:	4663      	mov	r3, ip
 8001092:	4652      	mov	r2, sl
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	e6a4      	b.n	8000de2 <__aeabi_fsub+0x7a>
 8001098:	4662      	mov	r2, ip
 800109a:	2a00      	cmp	r2, #0
 800109c:	d0d9      	beq.n	8001052 <__aeabi_fsub+0x2ea>
 800109e:	4652      	mov	r2, sl
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x33e>
 80010a4:	e716      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	4213      	tst	r3, r2
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x348>
 80010ae:	e711      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010b0:	4640      	mov	r0, r8
 80010b2:	4210      	tst	r0, r2
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x350>
 80010b6:	e70d      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010b8:	e70a      	b.n	8000ed0 <__aeabi_fsub+0x168>
 80010ba:	4652      	mov	r2, sl
 80010bc:	000d      	movs	r5, r1
 80010be:	0034      	movs	r4, r6
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	e68e      	b.n	8000de2 <__aeabi_fsub+0x7a>
 80010c4:	4653      	mov	r3, sl
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d008      	beq.n	80010dc <__aeabi_fsub+0x374>
 80010ca:	000d      	movs	r5, r1
 80010cc:	4647      	mov	r7, r8
 80010ce:	e6b2      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010d0:	4643      	mov	r3, r8
 80010d2:	0034      	movs	r4, r6
 80010d4:	e780      	b.n	8000fd8 <__aeabi_fsub+0x270>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x374>
 80010da:	e779      	b.n	8000fd0 <__aeabi_fsub+0x268>
 80010dc:	2500      	movs	r5, #0
 80010de:	2700      	movs	r7, #0
 80010e0:	e6a9      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010e2:	4647      	mov	r7, r8
 80010e4:	e6a7      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010e6:	4653      	mov	r3, sl
 80010e8:	0034      	movs	r4, r6
 80010ea:	4463      	add	r3, ip
 80010ec:	e6c8      	b.n	8000e80 <__aeabi_fsub+0x118>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	7dffffff 	.word	0x7dffffff
 80010f4:	fbffffff 	.word	0xfbffffff

080010f8 <__aeabi_f2iz>:
 80010f8:	0241      	lsls	r1, r0, #9
 80010fa:	0042      	lsls	r2, r0, #1
 80010fc:	0fc3      	lsrs	r3, r0, #31
 80010fe:	0a49      	lsrs	r1, r1, #9
 8001100:	2000      	movs	r0, #0
 8001102:	0e12      	lsrs	r2, r2, #24
 8001104:	2a7e      	cmp	r2, #126	; 0x7e
 8001106:	d903      	bls.n	8001110 <__aeabi_f2iz+0x18>
 8001108:	2a9d      	cmp	r2, #157	; 0x9d
 800110a:	d902      	bls.n	8001112 <__aeabi_f2iz+0x1a>
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <__aeabi_f2iz+0x3c>)
 800110e:	1898      	adds	r0, r3, r2
 8001110:	4770      	bx	lr
 8001112:	2080      	movs	r0, #128	; 0x80
 8001114:	0400      	lsls	r0, r0, #16
 8001116:	4301      	orrs	r1, r0
 8001118:	2a95      	cmp	r2, #149	; 0x95
 800111a:	dc07      	bgt.n	800112c <__aeabi_f2iz+0x34>
 800111c:	2096      	movs	r0, #150	; 0x96
 800111e:	1a82      	subs	r2, r0, r2
 8001120:	40d1      	lsrs	r1, r2
 8001122:	4248      	negs	r0, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f3      	bne.n	8001110 <__aeabi_f2iz+0x18>
 8001128:	0008      	movs	r0, r1
 800112a:	e7f1      	b.n	8001110 <__aeabi_f2iz+0x18>
 800112c:	3a96      	subs	r2, #150	; 0x96
 800112e:	4091      	lsls	r1, r2
 8001130:	e7f7      	b.n	8001122 <__aeabi_f2iz+0x2a>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	7fffffff 	.word	0x7fffffff

08001138 <__aeabi_i2f>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	2800      	cmp	r0, #0
 800113c:	d013      	beq.n	8001166 <__aeabi_i2f+0x2e>
 800113e:	17c3      	asrs	r3, r0, #31
 8001140:	18c5      	adds	r5, r0, r3
 8001142:	405d      	eors	r5, r3
 8001144:	0fc4      	lsrs	r4, r0, #31
 8001146:	0028      	movs	r0, r5
 8001148:	f000 fe32 	bl	8001db0 <__clzsi2>
 800114c:	239e      	movs	r3, #158	; 0x9e
 800114e:	0001      	movs	r1, r0
 8001150:	1a1b      	subs	r3, r3, r0
 8001152:	2b96      	cmp	r3, #150	; 0x96
 8001154:	dc0f      	bgt.n	8001176 <__aeabi_i2f+0x3e>
 8001156:	2808      	cmp	r0, #8
 8001158:	dd01      	ble.n	800115e <__aeabi_i2f+0x26>
 800115a:	3908      	subs	r1, #8
 800115c:	408d      	lsls	r5, r1
 800115e:	026d      	lsls	r5, r5, #9
 8001160:	0a6d      	lsrs	r5, r5, #9
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	e002      	b.n	800116c <__aeabi_i2f+0x34>
 8001166:	2400      	movs	r4, #0
 8001168:	2000      	movs	r0, #0
 800116a:	2500      	movs	r5, #0
 800116c:	05c0      	lsls	r0, r0, #23
 800116e:	4328      	orrs	r0, r5
 8001170:	07e4      	lsls	r4, r4, #31
 8001172:	4320      	orrs	r0, r4
 8001174:	bd70      	pop	{r4, r5, r6, pc}
 8001176:	2b99      	cmp	r3, #153	; 0x99
 8001178:	dd0b      	ble.n	8001192 <__aeabi_i2f+0x5a>
 800117a:	2205      	movs	r2, #5
 800117c:	002e      	movs	r6, r5
 800117e:	1a12      	subs	r2, r2, r0
 8001180:	40d6      	lsrs	r6, r2
 8001182:	0002      	movs	r2, r0
 8001184:	321b      	adds	r2, #27
 8001186:	4095      	lsls	r5, r2
 8001188:	0028      	movs	r0, r5
 800118a:	1e45      	subs	r5, r0, #1
 800118c:	41a8      	sbcs	r0, r5
 800118e:	0035      	movs	r5, r6
 8001190:	4305      	orrs	r5, r0
 8001192:	2905      	cmp	r1, #5
 8001194:	dd01      	ble.n	800119a <__aeabi_i2f+0x62>
 8001196:	1f4a      	subs	r2, r1, #5
 8001198:	4095      	lsls	r5, r2
 800119a:	002a      	movs	r2, r5
 800119c:	4e08      	ldr	r6, [pc, #32]	; (80011c0 <__aeabi_i2f+0x88>)
 800119e:	4032      	ands	r2, r6
 80011a0:	0768      	lsls	r0, r5, #29
 80011a2:	d009      	beq.n	80011b8 <__aeabi_i2f+0x80>
 80011a4:	200f      	movs	r0, #15
 80011a6:	4028      	ands	r0, r5
 80011a8:	2804      	cmp	r0, #4
 80011aa:	d005      	beq.n	80011b8 <__aeabi_i2f+0x80>
 80011ac:	3204      	adds	r2, #4
 80011ae:	0150      	lsls	r0, r2, #5
 80011b0:	d502      	bpl.n	80011b8 <__aeabi_i2f+0x80>
 80011b2:	239f      	movs	r3, #159	; 0x9f
 80011b4:	4032      	ands	r2, r6
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	0192      	lsls	r2, r2, #6
 80011ba:	0a55      	lsrs	r5, r2, #9
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	e7d5      	b.n	800116c <__aeabi_i2f+0x34>
 80011c0:	fbffffff 	.word	0xfbffffff

080011c4 <__aeabi_ui2f>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	1e05      	subs	r5, r0, #0
 80011c8:	d00e      	beq.n	80011e8 <__aeabi_ui2f+0x24>
 80011ca:	f000 fdf1 	bl	8001db0 <__clzsi2>
 80011ce:	239e      	movs	r3, #158	; 0x9e
 80011d0:	0004      	movs	r4, r0
 80011d2:	1a1b      	subs	r3, r3, r0
 80011d4:	2b96      	cmp	r3, #150	; 0x96
 80011d6:	dc0c      	bgt.n	80011f2 <__aeabi_ui2f+0x2e>
 80011d8:	2808      	cmp	r0, #8
 80011da:	dd01      	ble.n	80011e0 <__aeabi_ui2f+0x1c>
 80011dc:	3c08      	subs	r4, #8
 80011de:	40a5      	lsls	r5, r4
 80011e0:	026d      	lsls	r5, r5, #9
 80011e2:	0a6d      	lsrs	r5, r5, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e001      	b.n	80011ec <__aeabi_ui2f+0x28>
 80011e8:	2000      	movs	r0, #0
 80011ea:	2500      	movs	r5, #0
 80011ec:	05c0      	lsls	r0, r0, #23
 80011ee:	4328      	orrs	r0, r5
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	2b99      	cmp	r3, #153	; 0x99
 80011f4:	dd09      	ble.n	800120a <__aeabi_ui2f+0x46>
 80011f6:	0002      	movs	r2, r0
 80011f8:	0029      	movs	r1, r5
 80011fa:	321b      	adds	r2, #27
 80011fc:	4091      	lsls	r1, r2
 80011fe:	1e4a      	subs	r2, r1, #1
 8001200:	4191      	sbcs	r1, r2
 8001202:	2205      	movs	r2, #5
 8001204:	1a12      	subs	r2, r2, r0
 8001206:	40d5      	lsrs	r5, r2
 8001208:	430d      	orrs	r5, r1
 800120a:	2c05      	cmp	r4, #5
 800120c:	dd01      	ble.n	8001212 <__aeabi_ui2f+0x4e>
 800120e:	1f62      	subs	r2, r4, #5
 8001210:	4095      	lsls	r5, r2
 8001212:	0029      	movs	r1, r5
 8001214:	4e08      	ldr	r6, [pc, #32]	; (8001238 <__aeabi_ui2f+0x74>)
 8001216:	4031      	ands	r1, r6
 8001218:	076a      	lsls	r2, r5, #29
 800121a:	d009      	beq.n	8001230 <__aeabi_ui2f+0x6c>
 800121c:	200f      	movs	r0, #15
 800121e:	4028      	ands	r0, r5
 8001220:	2804      	cmp	r0, #4
 8001222:	d005      	beq.n	8001230 <__aeabi_ui2f+0x6c>
 8001224:	3104      	adds	r1, #4
 8001226:	014a      	lsls	r2, r1, #5
 8001228:	d502      	bpl.n	8001230 <__aeabi_ui2f+0x6c>
 800122a:	239f      	movs	r3, #159	; 0x9f
 800122c:	4031      	ands	r1, r6
 800122e:	1b1b      	subs	r3, r3, r4
 8001230:	0189      	lsls	r1, r1, #6
 8001232:	0a4d      	lsrs	r5, r1, #9
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	e7d9      	b.n	80011ec <__aeabi_ui2f+0x28>
 8001238:	fbffffff 	.word	0xfbffffff

0800123c <__aeabi_ddiv>:
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	4657      	mov	r7, sl
 8001240:	464e      	mov	r6, r9
 8001242:	4645      	mov	r5, r8
 8001244:	46de      	mov	lr, fp
 8001246:	b5e0      	push	{r5, r6, r7, lr}
 8001248:	4681      	mov	r9, r0
 800124a:	0005      	movs	r5, r0
 800124c:	030c      	lsls	r4, r1, #12
 800124e:	0048      	lsls	r0, r1, #1
 8001250:	4692      	mov	sl, r2
 8001252:	001f      	movs	r7, r3
 8001254:	b085      	sub	sp, #20
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	0d40      	lsrs	r0, r0, #21
 800125a:	0fce      	lsrs	r6, r1, #31
 800125c:	2800      	cmp	r0, #0
 800125e:	d059      	beq.n	8001314 <__aeabi_ddiv+0xd8>
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <__aeabi_ddiv+0x244>)
 8001262:	4298      	cmp	r0, r3
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x2c>
 8001266:	e098      	b.n	800139a <__aeabi_ddiv+0x15e>
 8001268:	0f6b      	lsrs	r3, r5, #29
 800126a:	00e4      	lsls	r4, r4, #3
 800126c:	431c      	orrs	r4, r3
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	4323      	orrs	r3, r4
 8001274:	4698      	mov	r8, r3
 8001276:	4b83      	ldr	r3, [pc, #524]	; (8001484 <__aeabi_ddiv+0x248>)
 8001278:	00ed      	lsls	r5, r5, #3
 800127a:	469b      	mov	fp, r3
 800127c:	2300      	movs	r3, #0
 800127e:	4699      	mov	r9, r3
 8001280:	4483      	add	fp, r0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	033c      	lsls	r4, r7, #12
 8001286:	007b      	lsls	r3, r7, #1
 8001288:	4650      	mov	r0, sl
 800128a:	0b24      	lsrs	r4, r4, #12
 800128c:	0d5b      	lsrs	r3, r3, #21
 800128e:	0fff      	lsrs	r7, r7, #31
 8001290:	2b00      	cmp	r3, #0
 8001292:	d067      	beq.n	8001364 <__aeabi_ddiv+0x128>
 8001294:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <__aeabi_ddiv+0x244>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d018      	beq.n	80012cc <__aeabi_ddiv+0x90>
 800129a:	497a      	ldr	r1, [pc, #488]	; (8001484 <__aeabi_ddiv+0x248>)
 800129c:	0f42      	lsrs	r2, r0, #29
 800129e:	468c      	mov	ip, r1
 80012a0:	00e4      	lsls	r4, r4, #3
 80012a2:	4659      	mov	r1, fp
 80012a4:	4314      	orrs	r4, r2
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	4463      	add	r3, ip
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	4314      	orrs	r4, r2
 80012b0:	469b      	mov	fp, r3
 80012b2:	00c2      	lsls	r2, r0, #3
 80012b4:	2000      	movs	r0, #0
 80012b6:	0033      	movs	r3, r6
 80012b8:	407b      	eors	r3, r7
 80012ba:	469a      	mov	sl, r3
 80012bc:	464b      	mov	r3, r9
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d900      	bls.n	80012c4 <__aeabi_ddiv+0x88>
 80012c2:	e0ef      	b.n	80014a4 <__aeabi_ddiv+0x268>
 80012c4:	4970      	ldr	r1, [pc, #448]	; (8001488 <__aeabi_ddiv+0x24c>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	58cb      	ldr	r3, [r1, r3]
 80012ca:	469f      	mov	pc, r3
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <__aeabi_ddiv+0x250>)
 80012ce:	4652      	mov	r2, sl
 80012d0:	469c      	mov	ip, r3
 80012d2:	4322      	orrs	r2, r4
 80012d4:	44e3      	add	fp, ip
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa0>
 80012da:	e095      	b.n	8001408 <__aeabi_ddiv+0x1cc>
 80012dc:	4649      	mov	r1, r9
 80012de:	2302      	movs	r3, #2
 80012e0:	4319      	orrs	r1, r3
 80012e2:	4689      	mov	r9, r1
 80012e4:	2400      	movs	r4, #0
 80012e6:	2002      	movs	r0, #2
 80012e8:	e7e5      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2400      	movs	r4, #0
 80012ee:	2500      	movs	r5, #0
 80012f0:	4652      	mov	r2, sl
 80012f2:	051b      	lsls	r3, r3, #20
 80012f4:	4323      	orrs	r3, r4
 80012f6:	07d2      	lsls	r2, r2, #31
 80012f8:	4313      	orrs	r3, r2
 80012fa:	0028      	movs	r0, r5
 80012fc:	0019      	movs	r1, r3
 80012fe:	b005      	add	sp, #20
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	2400      	movs	r4, #0
 800130e:	2500      	movs	r5, #0
 8001310:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <__aeabi_ddiv+0x244>)
 8001312:	e7ed      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 8001314:	464b      	mov	r3, r9
 8001316:	4323      	orrs	r3, r4
 8001318:	4698      	mov	r8, r3
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0xe2>
 800131c:	e089      	b.n	8001432 <__aeabi_ddiv+0x1f6>
 800131e:	2c00      	cmp	r4, #0
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0xe8>
 8001322:	e1e0      	b.n	80016e6 <__aeabi_ddiv+0x4aa>
 8001324:	0020      	movs	r0, r4
 8001326:	f000 fd43 	bl	8001db0 <__clzsi2>
 800132a:	0001      	movs	r1, r0
 800132c:	0002      	movs	r2, r0
 800132e:	390b      	subs	r1, #11
 8001330:	231d      	movs	r3, #29
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	4649      	mov	r1, r9
 8001336:	0010      	movs	r0, r2
 8001338:	40d9      	lsrs	r1, r3
 800133a:	3808      	subs	r0, #8
 800133c:	4084      	lsls	r4, r0
 800133e:	000b      	movs	r3, r1
 8001340:	464d      	mov	r5, r9
 8001342:	4323      	orrs	r3, r4
 8001344:	4698      	mov	r8, r3
 8001346:	4085      	lsls	r5, r0
 8001348:	4851      	ldr	r0, [pc, #324]	; (8001490 <__aeabi_ddiv+0x254>)
 800134a:	033c      	lsls	r4, r7, #12
 800134c:	1a83      	subs	r3, r0, r2
 800134e:	469b      	mov	fp, r3
 8001350:	2300      	movs	r3, #0
 8001352:	4699      	mov	r9, r3
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	007b      	lsls	r3, r7, #1
 8001358:	4650      	mov	r0, sl
 800135a:	0b24      	lsrs	r4, r4, #12
 800135c:	0d5b      	lsrs	r3, r3, #21
 800135e:	0fff      	lsrs	r7, r7, #31
 8001360:	2b00      	cmp	r3, #0
 8001362:	d197      	bne.n	8001294 <__aeabi_ddiv+0x58>
 8001364:	4652      	mov	r2, sl
 8001366:	4322      	orrs	r2, r4
 8001368:	d055      	beq.n	8001416 <__aeabi_ddiv+0x1da>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x134>
 800136e:	e1ca      	b.n	8001706 <__aeabi_ddiv+0x4ca>
 8001370:	0020      	movs	r0, r4
 8001372:	f000 fd1d 	bl	8001db0 <__clzsi2>
 8001376:	0002      	movs	r2, r0
 8001378:	3a0b      	subs	r2, #11
 800137a:	231d      	movs	r3, #29
 800137c:	0001      	movs	r1, r0
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	4652      	mov	r2, sl
 8001382:	3908      	subs	r1, #8
 8001384:	40da      	lsrs	r2, r3
 8001386:	408c      	lsls	r4, r1
 8001388:	4314      	orrs	r4, r2
 800138a:	4652      	mov	r2, sl
 800138c:	408a      	lsls	r2, r1
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <__aeabi_ddiv+0x258>)
 8001390:	4458      	add	r0, fp
 8001392:	469b      	mov	fp, r3
 8001394:	4483      	add	fp, r0
 8001396:	2000      	movs	r0, #0
 8001398:	e78d      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 800139a:	464b      	mov	r3, r9
 800139c:	4323      	orrs	r3, r4
 800139e:	4698      	mov	r8, r3
 80013a0:	d140      	bne.n	8001424 <__aeabi_ddiv+0x1e8>
 80013a2:	2308      	movs	r3, #8
 80013a4:	4699      	mov	r9, r3
 80013a6:	3b06      	subs	r3, #6
 80013a8:	2500      	movs	r5, #0
 80013aa:	4683      	mov	fp, r0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	e769      	b.n	8001284 <__aeabi_ddiv+0x48>
 80013b0:	46b2      	mov	sl, r6
 80013b2:	9b00      	ldr	r3, [sp, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d0a9      	beq.n	800130c <__aeabi_ddiv+0xd0>
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x182>
 80013bc:	e211      	b.n	80017e2 <__aeabi_ddiv+0x5a6>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d093      	beq.n	80012ea <__aeabi_ddiv+0xae>
 80013c2:	4a35      	ldr	r2, [pc, #212]	; (8001498 <__aeabi_ddiv+0x25c>)
 80013c4:	445a      	add	r2, fp
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	dc00      	bgt.n	80013cc <__aeabi_ddiv+0x190>
 80013ca:	e13c      	b.n	8001646 <__aeabi_ddiv+0x40a>
 80013cc:	076b      	lsls	r3, r5, #29
 80013ce:	d000      	beq.n	80013d2 <__aeabi_ddiv+0x196>
 80013d0:	e1a7      	b.n	8001722 <__aeabi_ddiv+0x4e6>
 80013d2:	08ed      	lsrs	r5, r5, #3
 80013d4:	4643      	mov	r3, r8
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	d506      	bpl.n	80013e8 <__aeabi_ddiv+0x1ac>
 80013da:	4642      	mov	r2, r8
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <__aeabi_ddiv+0x260>)
 80013de:	401a      	ands	r2, r3
 80013e0:	4690      	mov	r8, r2
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	445a      	add	r2, fp
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <__aeabi_ddiv+0x264>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dc8e      	bgt.n	800130c <__aeabi_ddiv+0xd0>
 80013ee:	4643      	mov	r3, r8
 80013f0:	0552      	lsls	r2, r2, #21
 80013f2:	0758      	lsls	r0, r3, #29
 80013f4:	025c      	lsls	r4, r3, #9
 80013f6:	4305      	orrs	r5, r0
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	0d53      	lsrs	r3, r2, #21
 80013fc:	e778      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80013fe:	46ba      	mov	sl, r7
 8001400:	46a0      	mov	r8, r4
 8001402:	0015      	movs	r5, r2
 8001404:	9000      	str	r0, [sp, #0]
 8001406:	e7d4      	b.n	80013b2 <__aeabi_ddiv+0x176>
 8001408:	464a      	mov	r2, r9
 800140a:	2303      	movs	r3, #3
 800140c:	431a      	orrs	r2, r3
 800140e:	4691      	mov	r9, r2
 8001410:	2003      	movs	r0, #3
 8001412:	4652      	mov	r2, sl
 8001414:	e74f      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 8001416:	4649      	mov	r1, r9
 8001418:	2301      	movs	r3, #1
 800141a:	4319      	orrs	r1, r3
 800141c:	4689      	mov	r9, r1
 800141e:	2400      	movs	r4, #0
 8001420:	2001      	movs	r0, #1
 8001422:	e748      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 8001424:	230c      	movs	r3, #12
 8001426:	4699      	mov	r9, r3
 8001428:	3b09      	subs	r3, #9
 800142a:	46a0      	mov	r8, r4
 800142c:	4683      	mov	fp, r0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	e728      	b.n	8001284 <__aeabi_ddiv+0x48>
 8001432:	2304      	movs	r3, #4
 8001434:	4699      	mov	r9, r3
 8001436:	2300      	movs	r3, #0
 8001438:	469b      	mov	fp, r3
 800143a:	3301      	adds	r3, #1
 800143c:	2500      	movs	r5, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	e720      	b.n	8001284 <__aeabi_ddiv+0x48>
 8001442:	2300      	movs	r3, #0
 8001444:	2480      	movs	r4, #128	; 0x80
 8001446:	469a      	mov	sl, r3
 8001448:	2500      	movs	r5, #0
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <__aeabi_ddiv+0x244>)
 800144c:	0324      	lsls	r4, r4, #12
 800144e:	e74f      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	4641      	mov	r1, r8
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d008      	beq.n	800146c <__aeabi_ddiv+0x230>
 800145a:	421c      	tst	r4, r3
 800145c:	d106      	bne.n	800146c <__aeabi_ddiv+0x230>
 800145e:	431c      	orrs	r4, r3
 8001460:	0324      	lsls	r4, r4, #12
 8001462:	46ba      	mov	sl, r7
 8001464:	0015      	movs	r5, r2
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <__aeabi_ddiv+0x244>)
 8001468:	0b24      	lsrs	r4, r4, #12
 800146a:	e741      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 800146c:	2480      	movs	r4, #128	; 0x80
 800146e:	4643      	mov	r3, r8
 8001470:	0324      	lsls	r4, r4, #12
 8001472:	431c      	orrs	r4, r3
 8001474:	0324      	lsls	r4, r4, #12
 8001476:	46b2      	mov	sl, r6
 8001478:	4b01      	ldr	r3, [pc, #4]	; (8001480 <__aeabi_ddiv+0x244>)
 800147a:	0b24      	lsrs	r4, r4, #12
 800147c:	e738      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	000007ff 	.word	0x000007ff
 8001484:	fffffc01 	.word	0xfffffc01
 8001488:	08007258 	.word	0x08007258
 800148c:	fffff801 	.word	0xfffff801
 8001490:	fffffc0d 	.word	0xfffffc0d
 8001494:	000003f3 	.word	0x000003f3
 8001498:	000003ff 	.word	0x000003ff
 800149c:	feffffff 	.word	0xfeffffff
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	4544      	cmp	r4, r8
 80014a6:	d200      	bcs.n	80014aa <__aeabi_ddiv+0x26e>
 80014a8:	e116      	b.n	80016d8 <__aeabi_ddiv+0x49c>
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x272>
 80014ac:	e111      	b.n	80016d2 <__aeabi_ddiv+0x496>
 80014ae:	2301      	movs	r3, #1
 80014b0:	425b      	negs	r3, r3
 80014b2:	469c      	mov	ip, r3
 80014b4:	002e      	movs	r6, r5
 80014b6:	4640      	mov	r0, r8
 80014b8:	2500      	movs	r5, #0
 80014ba:	44e3      	add	fp, ip
 80014bc:	0223      	lsls	r3, r4, #8
 80014be:	0e14      	lsrs	r4, r2, #24
 80014c0:	431c      	orrs	r4, r3
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	4699      	mov	r9, r3
 80014c6:	0423      	lsls	r3, r4, #16
 80014c8:	0c1f      	lsrs	r7, r3, #16
 80014ca:	0212      	lsls	r2, r2, #8
 80014cc:	4649      	mov	r1, r9
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	9701      	str	r7, [sp, #4]
 80014d2:	f7fe fe9f 	bl	8000214 <__aeabi_uidivmod>
 80014d6:	0002      	movs	r2, r0
 80014d8:	437a      	muls	r2, r7
 80014da:	040b      	lsls	r3, r1, #16
 80014dc:	0c31      	lsrs	r1, r6, #16
 80014de:	4680      	mov	r8, r0
 80014e0:	4319      	orrs	r1, r3
 80014e2:	428a      	cmp	r2, r1
 80014e4:	d90b      	bls.n	80014fe <__aeabi_ddiv+0x2c2>
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
 80014ea:	469c      	mov	ip, r3
 80014ec:	1909      	adds	r1, r1, r4
 80014ee:	44e0      	add	r8, ip
 80014f0:	428c      	cmp	r4, r1
 80014f2:	d804      	bhi.n	80014fe <__aeabi_ddiv+0x2c2>
 80014f4:	428a      	cmp	r2, r1
 80014f6:	d902      	bls.n	80014fe <__aeabi_ddiv+0x2c2>
 80014f8:	1e83      	subs	r3, r0, #2
 80014fa:	4698      	mov	r8, r3
 80014fc:	1909      	adds	r1, r1, r4
 80014fe:	1a88      	subs	r0, r1, r2
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fe87 	bl	8000214 <__aeabi_uidivmod>
 8001506:	0409      	lsls	r1, r1, #16
 8001508:	468c      	mov	ip, r1
 800150a:	0431      	lsls	r1, r6, #16
 800150c:	4666      	mov	r6, ip
 800150e:	9a01      	ldr	r2, [sp, #4]
 8001510:	0c09      	lsrs	r1, r1, #16
 8001512:	4342      	muls	r2, r0
 8001514:	0003      	movs	r3, r0
 8001516:	4331      	orrs	r1, r6
 8001518:	428a      	cmp	r2, r1
 800151a:	d904      	bls.n	8001526 <__aeabi_ddiv+0x2ea>
 800151c:	1909      	adds	r1, r1, r4
 800151e:	3b01      	subs	r3, #1
 8001520:	428c      	cmp	r4, r1
 8001522:	d800      	bhi.n	8001526 <__aeabi_ddiv+0x2ea>
 8001524:	e111      	b.n	800174a <__aeabi_ddiv+0x50e>
 8001526:	1a89      	subs	r1, r1, r2
 8001528:	4642      	mov	r2, r8
 800152a:	9e00      	ldr	r6, [sp, #0]
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	0c33      	lsrs	r3, r6, #16
 8001532:	001f      	movs	r7, r3
 8001534:	0c10      	lsrs	r0, r2, #16
 8001536:	4690      	mov	r8, r2
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	0413      	lsls	r3, r2, #16
 800153c:	0432      	lsls	r2, r6, #16
 800153e:	0c16      	lsrs	r6, r2, #16
 8001540:	0032      	movs	r2, r6
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	435a      	muls	r2, r3
 8001546:	9603      	str	r6, [sp, #12]
 8001548:	437b      	muls	r3, r7
 800154a:	4346      	muls	r6, r0
 800154c:	4378      	muls	r0, r7
 800154e:	0c17      	lsrs	r7, r2, #16
 8001550:	46bc      	mov	ip, r7
 8001552:	199b      	adds	r3, r3, r6
 8001554:	4463      	add	r3, ip
 8001556:	429e      	cmp	r6, r3
 8001558:	d903      	bls.n	8001562 <__aeabi_ddiv+0x326>
 800155a:	2680      	movs	r6, #128	; 0x80
 800155c:	0276      	lsls	r6, r6, #9
 800155e:	46b4      	mov	ip, r6
 8001560:	4460      	add	r0, ip
 8001562:	0c1e      	lsrs	r6, r3, #16
 8001564:	1830      	adds	r0, r6, r0
 8001566:	0416      	lsls	r6, r2, #16
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	0c36      	lsrs	r6, r6, #16
 800156c:	199e      	adds	r6, r3, r6
 800156e:	4281      	cmp	r1, r0
 8001570:	d200      	bcs.n	8001574 <__aeabi_ddiv+0x338>
 8001572:	e09c      	b.n	80016ae <__aeabi_ddiv+0x472>
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x33c>
 8001576:	e097      	b.n	80016a8 <__aeabi_ddiv+0x46c>
 8001578:	1bae      	subs	r6, r5, r6
 800157a:	1a09      	subs	r1, r1, r0
 800157c:	42b5      	cmp	r5, r6
 800157e:	4180      	sbcs	r0, r0
 8001580:	4240      	negs	r0, r0
 8001582:	1a08      	subs	r0, r1, r0
 8001584:	4284      	cmp	r4, r0
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x34e>
 8001588:	e111      	b.n	80017ae <__aeabi_ddiv+0x572>
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe fe42 	bl	8000214 <__aeabi_uidivmod>
 8001590:	9a01      	ldr	r2, [sp, #4]
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	4342      	muls	r2, r0
 8001596:	0c31      	lsrs	r1, r6, #16
 8001598:	0005      	movs	r5, r0
 800159a:	4319      	orrs	r1, r3
 800159c:	428a      	cmp	r2, r1
 800159e:	d907      	bls.n	80015b0 <__aeabi_ddiv+0x374>
 80015a0:	1909      	adds	r1, r1, r4
 80015a2:	3d01      	subs	r5, #1
 80015a4:	428c      	cmp	r4, r1
 80015a6:	d803      	bhi.n	80015b0 <__aeabi_ddiv+0x374>
 80015a8:	428a      	cmp	r2, r1
 80015aa:	d901      	bls.n	80015b0 <__aeabi_ddiv+0x374>
 80015ac:	1e85      	subs	r5, r0, #2
 80015ae:	1909      	adds	r1, r1, r4
 80015b0:	1a88      	subs	r0, r1, r2
 80015b2:	4649      	mov	r1, r9
 80015b4:	f7fe fe2e 	bl	8000214 <__aeabi_uidivmod>
 80015b8:	0409      	lsls	r1, r1, #16
 80015ba:	468c      	mov	ip, r1
 80015bc:	0431      	lsls	r1, r6, #16
 80015be:	4666      	mov	r6, ip
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	0c09      	lsrs	r1, r1, #16
 80015c4:	4342      	muls	r2, r0
 80015c6:	0003      	movs	r3, r0
 80015c8:	4331      	orrs	r1, r6
 80015ca:	428a      	cmp	r2, r1
 80015cc:	d907      	bls.n	80015de <__aeabi_ddiv+0x3a2>
 80015ce:	1909      	adds	r1, r1, r4
 80015d0:	3b01      	subs	r3, #1
 80015d2:	428c      	cmp	r4, r1
 80015d4:	d803      	bhi.n	80015de <__aeabi_ddiv+0x3a2>
 80015d6:	428a      	cmp	r2, r1
 80015d8:	d901      	bls.n	80015de <__aeabi_ddiv+0x3a2>
 80015da:	1e83      	subs	r3, r0, #2
 80015dc:	1909      	adds	r1, r1, r4
 80015de:	9e03      	ldr	r6, [sp, #12]
 80015e0:	1a89      	subs	r1, r1, r2
 80015e2:	0032      	movs	r2, r6
 80015e4:	042d      	lsls	r5, r5, #16
 80015e6:	431d      	orrs	r5, r3
 80015e8:	9f02      	ldr	r7, [sp, #8]
 80015ea:	042b      	lsls	r3, r5, #16
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	435a      	muls	r2, r3
 80015f0:	437b      	muls	r3, r7
 80015f2:	469c      	mov	ip, r3
 80015f4:	0c28      	lsrs	r0, r5, #16
 80015f6:	4346      	muls	r6, r0
 80015f8:	0c13      	lsrs	r3, r2, #16
 80015fa:	44b4      	add	ip, r6
 80015fc:	4463      	add	r3, ip
 80015fe:	4378      	muls	r0, r7
 8001600:	429e      	cmp	r6, r3
 8001602:	d903      	bls.n	800160c <__aeabi_ddiv+0x3d0>
 8001604:	2680      	movs	r6, #128	; 0x80
 8001606:	0276      	lsls	r6, r6, #9
 8001608:	46b4      	mov	ip, r6
 800160a:	4460      	add	r0, ip
 800160c:	0c1e      	lsrs	r6, r3, #16
 800160e:	0412      	lsls	r2, r2, #16
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c12      	lsrs	r2, r2, #16
 8001614:	1830      	adds	r0, r6, r0
 8001616:	189b      	adds	r3, r3, r2
 8001618:	4281      	cmp	r1, r0
 800161a:	d306      	bcc.n	800162a <__aeabi_ddiv+0x3ee>
 800161c:	d002      	beq.n	8001624 <__aeabi_ddiv+0x3e8>
 800161e:	2301      	movs	r3, #1
 8001620:	431d      	orrs	r5, r3
 8001622:	e6ce      	b.n	80013c2 <__aeabi_ddiv+0x186>
 8001624:	2b00      	cmp	r3, #0
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x3ee>
 8001628:	e6cb      	b.n	80013c2 <__aeabi_ddiv+0x186>
 800162a:	1861      	adds	r1, r4, r1
 800162c:	1e6e      	subs	r6, r5, #1
 800162e:	42a1      	cmp	r1, r4
 8001630:	d200      	bcs.n	8001634 <__aeabi_ddiv+0x3f8>
 8001632:	e0a4      	b.n	800177e <__aeabi_ddiv+0x542>
 8001634:	4281      	cmp	r1, r0
 8001636:	d200      	bcs.n	800163a <__aeabi_ddiv+0x3fe>
 8001638:	e0c9      	b.n	80017ce <__aeabi_ddiv+0x592>
 800163a:	d100      	bne.n	800163e <__aeabi_ddiv+0x402>
 800163c:	e0d9      	b.n	80017f2 <__aeabi_ddiv+0x5b6>
 800163e:	0035      	movs	r5, r6
 8001640:	e7ed      	b.n	800161e <__aeabi_ddiv+0x3e2>
 8001642:	2501      	movs	r5, #1
 8001644:	426d      	negs	r5, r5
 8001646:	2101      	movs	r1, #1
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	2938      	cmp	r1, #56	; 0x38
 800164c:	dd00      	ble.n	8001650 <__aeabi_ddiv+0x414>
 800164e:	e64c      	b.n	80012ea <__aeabi_ddiv+0xae>
 8001650:	291f      	cmp	r1, #31
 8001652:	dc00      	bgt.n	8001656 <__aeabi_ddiv+0x41a>
 8001654:	e07f      	b.n	8001756 <__aeabi_ddiv+0x51a>
 8001656:	231f      	movs	r3, #31
 8001658:	425b      	negs	r3, r3
 800165a:	1a9a      	subs	r2, r3, r2
 800165c:	4643      	mov	r3, r8
 800165e:	40d3      	lsrs	r3, r2
 8001660:	2920      	cmp	r1, #32
 8001662:	d004      	beq.n	800166e <__aeabi_ddiv+0x432>
 8001664:	4644      	mov	r4, r8
 8001666:	4a65      	ldr	r2, [pc, #404]	; (80017fc <__aeabi_ddiv+0x5c0>)
 8001668:	445a      	add	r2, fp
 800166a:	4094      	lsls	r4, r2
 800166c:	4325      	orrs	r5, r4
 800166e:	1e6a      	subs	r2, r5, #1
 8001670:	4195      	sbcs	r5, r2
 8001672:	2207      	movs	r2, #7
 8001674:	432b      	orrs	r3, r5
 8001676:	0015      	movs	r5, r2
 8001678:	2400      	movs	r4, #0
 800167a:	401d      	ands	r5, r3
 800167c:	421a      	tst	r2, r3
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x446>
 8001680:	e0a1      	b.n	80017c6 <__aeabi_ddiv+0x58a>
 8001682:	220f      	movs	r2, #15
 8001684:	2400      	movs	r4, #0
 8001686:	401a      	ands	r2, r3
 8001688:	2a04      	cmp	r2, #4
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x452>
 800168c:	e098      	b.n	80017c0 <__aeabi_ddiv+0x584>
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	429a      	cmp	r2, r3
 8001692:	419b      	sbcs	r3, r3
 8001694:	425b      	negs	r3, r3
 8001696:	18e4      	adds	r4, r4, r3
 8001698:	0013      	movs	r3, r2
 800169a:	0222      	lsls	r2, r4, #8
 800169c:	d400      	bmi.n	80016a0 <__aeabi_ddiv+0x464>
 800169e:	e08f      	b.n	80017c0 <__aeabi_ddiv+0x584>
 80016a0:	2301      	movs	r3, #1
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	e623      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80016a8:	42b5      	cmp	r5, r6
 80016aa:	d300      	bcc.n	80016ae <__aeabi_ddiv+0x472>
 80016ac:	e764      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80016ae:	4643      	mov	r3, r8
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	469c      	mov	ip, r3
 80016b6:	4465      	add	r5, ip
 80016b8:	001f      	movs	r7, r3
 80016ba:	429d      	cmp	r5, r3
 80016bc:	419b      	sbcs	r3, r3
 80016be:	425b      	negs	r3, r3
 80016c0:	191b      	adds	r3, r3, r4
 80016c2:	18c9      	adds	r1, r1, r3
 80016c4:	428c      	cmp	r4, r1
 80016c6:	d23a      	bcs.n	800173e <__aeabi_ddiv+0x502>
 80016c8:	4288      	cmp	r0, r1
 80016ca:	d863      	bhi.n	8001794 <__aeabi_ddiv+0x558>
 80016cc:	d060      	beq.n	8001790 <__aeabi_ddiv+0x554>
 80016ce:	4690      	mov	r8, r2
 80016d0:	e752      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80016d2:	42aa      	cmp	r2, r5
 80016d4:	d900      	bls.n	80016d8 <__aeabi_ddiv+0x49c>
 80016d6:	e6ea      	b.n	80014ae <__aeabi_ddiv+0x272>
 80016d8:	4643      	mov	r3, r8
 80016da:	07de      	lsls	r6, r3, #31
 80016dc:	0858      	lsrs	r0, r3, #1
 80016de:	086b      	lsrs	r3, r5, #1
 80016e0:	431e      	orrs	r6, r3
 80016e2:	07ed      	lsls	r5, r5, #31
 80016e4:	e6ea      	b.n	80014bc <__aeabi_ddiv+0x280>
 80016e6:	4648      	mov	r0, r9
 80016e8:	f000 fb62 	bl	8001db0 <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	0002      	movs	r2, r0
 80016f0:	3115      	adds	r1, #21
 80016f2:	3220      	adds	r2, #32
 80016f4:	291c      	cmp	r1, #28
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_ddiv+0x4be>
 80016f8:	e61a      	b.n	8001330 <__aeabi_ddiv+0xf4>
 80016fa:	464b      	mov	r3, r9
 80016fc:	3808      	subs	r0, #8
 80016fe:	4083      	lsls	r3, r0
 8001700:	2500      	movs	r5, #0
 8001702:	4698      	mov	r8, r3
 8001704:	e620      	b.n	8001348 <__aeabi_ddiv+0x10c>
 8001706:	f000 fb53 	bl	8001db0 <__clzsi2>
 800170a:	0003      	movs	r3, r0
 800170c:	001a      	movs	r2, r3
 800170e:	3215      	adds	r2, #21
 8001710:	3020      	adds	r0, #32
 8001712:	2a1c      	cmp	r2, #28
 8001714:	dc00      	bgt.n	8001718 <__aeabi_ddiv+0x4dc>
 8001716:	e630      	b.n	800137a <__aeabi_ddiv+0x13e>
 8001718:	4654      	mov	r4, sl
 800171a:	3b08      	subs	r3, #8
 800171c:	2200      	movs	r2, #0
 800171e:	409c      	lsls	r4, r3
 8001720:	e635      	b.n	800138e <__aeabi_ddiv+0x152>
 8001722:	230f      	movs	r3, #15
 8001724:	402b      	ands	r3, r5
 8001726:	2b04      	cmp	r3, #4
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x4f0>
 800172a:	e652      	b.n	80013d2 <__aeabi_ddiv+0x196>
 800172c:	2305      	movs	r3, #5
 800172e:	425b      	negs	r3, r3
 8001730:	42ab      	cmp	r3, r5
 8001732:	419b      	sbcs	r3, r3
 8001734:	3504      	adds	r5, #4
 8001736:	425b      	negs	r3, r3
 8001738:	08ed      	lsrs	r5, r5, #3
 800173a:	4498      	add	r8, r3
 800173c:	e64a      	b.n	80013d4 <__aeabi_ddiv+0x198>
 800173e:	428c      	cmp	r4, r1
 8001740:	d1c5      	bne.n	80016ce <__aeabi_ddiv+0x492>
 8001742:	42af      	cmp	r7, r5
 8001744:	d9c0      	bls.n	80016c8 <__aeabi_ddiv+0x48c>
 8001746:	4690      	mov	r8, r2
 8001748:	e716      	b.n	8001578 <__aeabi_ddiv+0x33c>
 800174a:	428a      	cmp	r2, r1
 800174c:	d800      	bhi.n	8001750 <__aeabi_ddiv+0x514>
 800174e:	e6ea      	b.n	8001526 <__aeabi_ddiv+0x2ea>
 8001750:	1e83      	subs	r3, r0, #2
 8001752:	1909      	adds	r1, r1, r4
 8001754:	e6e7      	b.n	8001526 <__aeabi_ddiv+0x2ea>
 8001756:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <__aeabi_ddiv+0x5c4>)
 8001758:	0028      	movs	r0, r5
 800175a:	445a      	add	r2, fp
 800175c:	4643      	mov	r3, r8
 800175e:	4095      	lsls	r5, r2
 8001760:	4093      	lsls	r3, r2
 8001762:	40c8      	lsrs	r0, r1
 8001764:	1e6a      	subs	r2, r5, #1
 8001766:	4195      	sbcs	r5, r2
 8001768:	4644      	mov	r4, r8
 800176a:	4303      	orrs	r3, r0
 800176c:	432b      	orrs	r3, r5
 800176e:	40cc      	lsrs	r4, r1
 8001770:	075a      	lsls	r2, r3, #29
 8001772:	d092      	beq.n	800169a <__aeabi_ddiv+0x45e>
 8001774:	220f      	movs	r2, #15
 8001776:	401a      	ands	r2, r3
 8001778:	2a04      	cmp	r2, #4
 800177a:	d188      	bne.n	800168e <__aeabi_ddiv+0x452>
 800177c:	e78d      	b.n	800169a <__aeabi_ddiv+0x45e>
 800177e:	0035      	movs	r5, r6
 8001780:	4281      	cmp	r1, r0
 8001782:	d000      	beq.n	8001786 <__aeabi_ddiv+0x54a>
 8001784:	e74b      	b.n	800161e <__aeabi_ddiv+0x3e2>
 8001786:	9a00      	ldr	r2, [sp, #0]
 8001788:	4293      	cmp	r3, r2
 800178a:	d000      	beq.n	800178e <__aeabi_ddiv+0x552>
 800178c:	e747      	b.n	800161e <__aeabi_ddiv+0x3e2>
 800178e:	e618      	b.n	80013c2 <__aeabi_ddiv+0x186>
 8001790:	42ae      	cmp	r6, r5
 8001792:	d99c      	bls.n	80016ce <__aeabi_ddiv+0x492>
 8001794:	2302      	movs	r3, #2
 8001796:	425b      	negs	r3, r3
 8001798:	469c      	mov	ip, r3
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	44e0      	add	r8, ip
 800179e:	469c      	mov	ip, r3
 80017a0:	4465      	add	r5, ip
 80017a2:	429d      	cmp	r5, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	425b      	negs	r3, r3
 80017a8:	191b      	adds	r3, r3, r4
 80017aa:	18c9      	adds	r1, r1, r3
 80017ac:	e6e4      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <__aeabi_ddiv+0x5c8>)
 80017b0:	445a      	add	r2, fp
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_ddiv+0x57c>
 80017b6:	e744      	b.n	8001642 <__aeabi_ddiv+0x406>
 80017b8:	2301      	movs	r3, #1
 80017ba:	2500      	movs	r5, #0
 80017bc:	4498      	add	r8, r3
 80017be:	e609      	b.n	80013d4 <__aeabi_ddiv+0x198>
 80017c0:	0765      	lsls	r5, r4, #29
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0b24      	lsrs	r4, r4, #12
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	431d      	orrs	r5, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	e590      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80017ce:	9e00      	ldr	r6, [sp, #0]
 80017d0:	3d02      	subs	r5, #2
 80017d2:	0072      	lsls	r2, r6, #1
 80017d4:	42b2      	cmp	r2, r6
 80017d6:	41bf      	sbcs	r7, r7
 80017d8:	427f      	negs	r7, r7
 80017da:	193c      	adds	r4, r7, r4
 80017dc:	1909      	adds	r1, r1, r4
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	e7ce      	b.n	8001780 <__aeabi_ddiv+0x544>
 80017e2:	2480      	movs	r4, #128	; 0x80
 80017e4:	4643      	mov	r3, r8
 80017e6:	0324      	lsls	r4, r4, #12
 80017e8:	431c      	orrs	r4, r3
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <__aeabi_ddiv+0x5cc>)
 80017ee:	0b24      	lsrs	r4, r4, #12
 80017f0:	e57e      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3ea      	bcc.n	80017ce <__aeabi_ddiv+0x592>
 80017f8:	0035      	movs	r5, r6
 80017fa:	e7c4      	b.n	8001786 <__aeabi_ddiv+0x54a>
 80017fc:	0000043e 	.word	0x0000043e
 8001800:	0000041e 	.word	0x0000041e
 8001804:	000003ff 	.word	0x000003ff
 8001808:	000007ff 	.word	0x000007ff

0800180c <__aeabi_dmul>:
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	4657      	mov	r7, sl
 8001810:	464e      	mov	r6, r9
 8001812:	4645      	mov	r5, r8
 8001814:	46de      	mov	lr, fp
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	4698      	mov	r8, r3
 800181a:	030c      	lsls	r4, r1, #12
 800181c:	004b      	lsls	r3, r1, #1
 800181e:	0006      	movs	r6, r0
 8001820:	4692      	mov	sl, r2
 8001822:	b087      	sub	sp, #28
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	0d5b      	lsrs	r3, r3, #21
 8001828:	0fcf      	lsrs	r7, r1, #31
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <__aeabi_dmul+0xfc>
 800182e:	4add      	ldr	r2, [pc, #884]	; (8001ba4 <__aeabi_dmul+0x398>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0x2a>
 8001834:	e086      	b.n	8001944 <__aeabi_dmul+0x138>
 8001836:	0f42      	lsrs	r2, r0, #29
 8001838:	00e4      	lsls	r4, r4, #3
 800183a:	4314      	orrs	r4, r2
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	4314      	orrs	r4, r2
 8001842:	4ad9      	ldr	r2, [pc, #868]	; (8001ba8 <__aeabi_dmul+0x39c>)
 8001844:	00c5      	lsls	r5, r0, #3
 8001846:	4694      	mov	ip, r2
 8001848:	4463      	add	r3, ip
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	4699      	mov	r9, r3
 8001850:	469b      	mov	fp, r3
 8001852:	4643      	mov	r3, r8
 8001854:	4642      	mov	r2, r8
 8001856:	031e      	lsls	r6, r3, #12
 8001858:	0fd2      	lsrs	r2, r2, #31
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4650      	mov	r0, sl
 800185e:	4690      	mov	r8, r2
 8001860:	0b36      	lsrs	r6, r6, #12
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x5c>
 8001866:	e078      	b.n	800195a <__aeabi_dmul+0x14e>
 8001868:	4ace      	ldr	r2, [pc, #824]	; (8001ba4 <__aeabi_dmul+0x398>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01d      	beq.n	80018aa <__aeabi_dmul+0x9e>
 800186e:	49ce      	ldr	r1, [pc, #824]	; (8001ba8 <__aeabi_dmul+0x39c>)
 8001870:	0f42      	lsrs	r2, r0, #29
 8001872:	468c      	mov	ip, r1
 8001874:	9900      	ldr	r1, [sp, #0]
 8001876:	4463      	add	r3, ip
 8001878:	00f6      	lsls	r6, r6, #3
 800187a:	468c      	mov	ip, r1
 800187c:	4316      	orrs	r6, r2
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	449c      	add	ip, r3
 8001882:	0412      	lsls	r2, r2, #16
 8001884:	4663      	mov	r3, ip
 8001886:	4316      	orrs	r6, r2
 8001888:	00c2      	lsls	r2, r0, #3
 800188a:	2000      	movs	r0, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	9900      	ldr	r1, [sp, #0]
 8001890:	4643      	mov	r3, r8
 8001892:	3101      	adds	r1, #1
 8001894:	468c      	mov	ip, r1
 8001896:	4649      	mov	r1, r9
 8001898:	407b      	eors	r3, r7
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	290f      	cmp	r1, #15
 800189e:	d900      	bls.n	80018a2 <__aeabi_dmul+0x96>
 80018a0:	e07e      	b.n	80019a0 <__aeabi_dmul+0x194>
 80018a2:	4bc2      	ldr	r3, [pc, #776]	; (8001bac <__aeabi_dmul+0x3a0>)
 80018a4:	0089      	lsls	r1, r1, #2
 80018a6:	5859      	ldr	r1, [r3, r1]
 80018a8:	468f      	mov	pc, r1
 80018aa:	4652      	mov	r2, sl
 80018ac:	9b00      	ldr	r3, [sp, #0]
 80018ae:	4332      	orrs	r2, r6
 80018b0:	d000      	beq.n	80018b4 <__aeabi_dmul+0xa8>
 80018b2:	e156      	b.n	8001b62 <__aeabi_dmul+0x356>
 80018b4:	49bb      	ldr	r1, [pc, #748]	; (8001ba4 <__aeabi_dmul+0x398>)
 80018b6:	2600      	movs	r6, #0
 80018b8:	468c      	mov	ip, r1
 80018ba:	4463      	add	r3, ip
 80018bc:	4649      	mov	r1, r9
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	4319      	orrs	r1, r3
 80018c4:	4689      	mov	r9, r1
 80018c6:	2002      	movs	r0, #2
 80018c8:	e7e1      	b.n	800188e <__aeabi_dmul+0x82>
 80018ca:	4643      	mov	r3, r8
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	0034      	movs	r4, r6
 80018d0:	0015      	movs	r5, r2
 80018d2:	4683      	mov	fp, r0
 80018d4:	465b      	mov	r3, fp
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d05e      	beq.n	8001998 <__aeabi_dmul+0x18c>
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dmul+0xd4>
 80018de:	e1f3      	b.n	8001cc8 <__aeabi_dmul+0x4bc>
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dmul+0xda>
 80018e4:	e118      	b.n	8001b18 <__aeabi_dmul+0x30c>
 80018e6:	2200      	movs	r2, #0
 80018e8:	2400      	movs	r4, #0
 80018ea:	2500      	movs	r5, #0
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	0512      	lsls	r2, r2, #20
 80018f0:	4322      	orrs	r2, r4
 80018f2:	07db      	lsls	r3, r3, #31
 80018f4:	431a      	orrs	r2, r3
 80018f6:	0028      	movs	r0, r5
 80018f8:	0011      	movs	r1, r2
 80018fa:	b007      	add	sp, #28
 80018fc:	bcf0      	pop	{r4, r5, r6, r7}
 80018fe:	46bb      	mov	fp, r7
 8001900:	46b2      	mov	sl, r6
 8001902:	46a9      	mov	r9, r5
 8001904:	46a0      	mov	r8, r4
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0025      	movs	r5, r4
 800190a:	4305      	orrs	r5, r0
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0x104>
 800190e:	e141      	b.n	8001b94 <__aeabi_dmul+0x388>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d100      	bne.n	8001916 <__aeabi_dmul+0x10a>
 8001914:	e1ad      	b.n	8001c72 <__aeabi_dmul+0x466>
 8001916:	0020      	movs	r0, r4
 8001918:	f000 fa4a 	bl	8001db0 <__clzsi2>
 800191c:	0001      	movs	r1, r0
 800191e:	0002      	movs	r2, r0
 8001920:	390b      	subs	r1, #11
 8001922:	231d      	movs	r3, #29
 8001924:	0010      	movs	r0, r2
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	0031      	movs	r1, r6
 800192a:	0035      	movs	r5, r6
 800192c:	3808      	subs	r0, #8
 800192e:	4084      	lsls	r4, r0
 8001930:	40d9      	lsrs	r1, r3
 8001932:	4085      	lsls	r5, r0
 8001934:	430c      	orrs	r4, r1
 8001936:	489e      	ldr	r0, [pc, #632]	; (8001bb0 <__aeabi_dmul+0x3a4>)
 8001938:	1a83      	subs	r3, r0, r2
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	4699      	mov	r9, r3
 8001940:	469b      	mov	fp, r3
 8001942:	e786      	b.n	8001852 <__aeabi_dmul+0x46>
 8001944:	0005      	movs	r5, r0
 8001946:	4325      	orrs	r5, r4
 8001948:	d000      	beq.n	800194c <__aeabi_dmul+0x140>
 800194a:	e11c      	b.n	8001b86 <__aeabi_dmul+0x37a>
 800194c:	2208      	movs	r2, #8
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2302      	movs	r3, #2
 8001952:	2400      	movs	r4, #0
 8001954:	4691      	mov	r9, r2
 8001956:	469b      	mov	fp, r3
 8001958:	e77b      	b.n	8001852 <__aeabi_dmul+0x46>
 800195a:	4652      	mov	r2, sl
 800195c:	4332      	orrs	r2, r6
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x156>
 8001960:	e10a      	b.n	8001b78 <__aeabi_dmul+0x36c>
 8001962:	2e00      	cmp	r6, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dmul+0x15c>
 8001966:	e176      	b.n	8001c56 <__aeabi_dmul+0x44a>
 8001968:	0030      	movs	r0, r6
 800196a:	f000 fa21 	bl	8001db0 <__clzsi2>
 800196e:	0002      	movs	r2, r0
 8001970:	3a0b      	subs	r2, #11
 8001972:	231d      	movs	r3, #29
 8001974:	0001      	movs	r1, r0
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	4652      	mov	r2, sl
 800197a:	3908      	subs	r1, #8
 800197c:	40da      	lsrs	r2, r3
 800197e:	408e      	lsls	r6, r1
 8001980:	4316      	orrs	r6, r2
 8001982:	4652      	mov	r2, sl
 8001984:	408a      	lsls	r2, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4989      	ldr	r1, [pc, #548]	; (8001bb0 <__aeabi_dmul+0x3a4>)
 800198a:	1a18      	subs	r0, r3, r0
 800198c:	0003      	movs	r3, r0
 800198e:	468c      	mov	ip, r1
 8001990:	4463      	add	r3, ip
 8001992:	2000      	movs	r0, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	e77a      	b.n	800188e <__aeabi_dmul+0x82>
 8001998:	2400      	movs	r4, #0
 800199a:	2500      	movs	r5, #0
 800199c:	4a81      	ldr	r2, [pc, #516]	; (8001ba4 <__aeabi_dmul+0x398>)
 800199e:	e7a5      	b.n	80018ec <__aeabi_dmul+0xe0>
 80019a0:	0c2f      	lsrs	r7, r5, #16
 80019a2:	042d      	lsls	r5, r5, #16
 80019a4:	0c2d      	lsrs	r5, r5, #16
 80019a6:	002b      	movs	r3, r5
 80019a8:	0c11      	lsrs	r1, r2, #16
 80019aa:	0412      	lsls	r2, r2, #16
 80019ac:	0c12      	lsrs	r2, r2, #16
 80019ae:	4353      	muls	r3, r2
 80019b0:	4698      	mov	r8, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	0028      	movs	r0, r5
 80019b6:	437b      	muls	r3, r7
 80019b8:	4699      	mov	r9, r3
 80019ba:	4348      	muls	r0, r1
 80019bc:	4448      	add	r0, r9
 80019be:	4683      	mov	fp, r0
 80019c0:	4640      	mov	r0, r8
 80019c2:	000b      	movs	r3, r1
 80019c4:	0c00      	lsrs	r0, r0, #16
 80019c6:	4682      	mov	sl, r0
 80019c8:	4658      	mov	r0, fp
 80019ca:	437b      	muls	r3, r7
 80019cc:	4450      	add	r0, sl
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	4581      	cmp	r9, r0
 80019d2:	d906      	bls.n	80019e2 <__aeabi_dmul+0x1d6>
 80019d4:	469a      	mov	sl, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4699      	mov	r9, r3
 80019dc:	44ca      	add	sl, r9
 80019de:	4653      	mov	r3, sl
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	0c03      	lsrs	r3, r0, #16
 80019e4:	469b      	mov	fp, r3
 80019e6:	4643      	mov	r3, r8
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	0400      	lsls	r0, r0, #16
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	4698      	mov	r8, r3
 80019f0:	0003      	movs	r3, r0
 80019f2:	4443      	add	r3, r8
 80019f4:	9304      	str	r3, [sp, #16]
 80019f6:	0c33      	lsrs	r3, r6, #16
 80019f8:	4699      	mov	r9, r3
 80019fa:	002b      	movs	r3, r5
 80019fc:	0436      	lsls	r6, r6, #16
 80019fe:	0c36      	lsrs	r6, r6, #16
 8001a00:	4373      	muls	r3, r6
 8001a02:	4698      	mov	r8, r3
 8001a04:	0033      	movs	r3, r6
 8001a06:	437b      	muls	r3, r7
 8001a08:	469a      	mov	sl, r3
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	435d      	muls	r5, r3
 8001a0e:	435f      	muls	r7, r3
 8001a10:	4643      	mov	r3, r8
 8001a12:	4455      	add	r5, sl
 8001a14:	0c18      	lsrs	r0, r3, #16
 8001a16:	1940      	adds	r0, r0, r5
 8001a18:	4582      	cmp	sl, r0
 8001a1a:	d903      	bls.n	8001a24 <__aeabi_dmul+0x218>
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	469a      	mov	sl, r3
 8001a22:	4457      	add	r7, sl
 8001a24:	0c05      	lsrs	r5, r0, #16
 8001a26:	19eb      	adds	r3, r5, r7
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	4643      	mov	r3, r8
 8001a2c:	041d      	lsls	r5, r3, #16
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	1940      	adds	r0, r0, r5
 8001a34:	0c25      	lsrs	r5, r4, #16
 8001a36:	0424      	lsls	r4, r4, #16
 8001a38:	0c24      	lsrs	r4, r4, #16
 8001a3a:	0027      	movs	r7, r4
 8001a3c:	4357      	muls	r7, r2
 8001a3e:	436a      	muls	r2, r5
 8001a40:	4690      	mov	r8, r2
 8001a42:	002a      	movs	r2, r5
 8001a44:	0c3b      	lsrs	r3, r7, #16
 8001a46:	469a      	mov	sl, r3
 8001a48:	434a      	muls	r2, r1
 8001a4a:	4361      	muls	r1, r4
 8001a4c:	4441      	add	r1, r8
 8001a4e:	4451      	add	r1, sl
 8001a50:	4483      	add	fp, r0
 8001a52:	4588      	cmp	r8, r1
 8001a54:	d903      	bls.n	8001a5e <__aeabi_dmul+0x252>
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	4442      	add	r2, r8
 8001a5e:	043f      	lsls	r7, r7, #16
 8001a60:	0c0b      	lsrs	r3, r1, #16
 8001a62:	0c3f      	lsrs	r7, r7, #16
 8001a64:	0409      	lsls	r1, r1, #16
 8001a66:	19c9      	adds	r1, r1, r7
 8001a68:	0027      	movs	r7, r4
 8001a6a:	4698      	mov	r8, r3
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4377      	muls	r7, r6
 8001a70:	435c      	muls	r4, r3
 8001a72:	436e      	muls	r6, r5
 8001a74:	435d      	muls	r5, r3
 8001a76:	0c3b      	lsrs	r3, r7, #16
 8001a78:	4699      	mov	r9, r3
 8001a7a:	19a4      	adds	r4, r4, r6
 8001a7c:	444c      	add	r4, r9
 8001a7e:	4442      	add	r2, r8
 8001a80:	9503      	str	r5, [sp, #12]
 8001a82:	42a6      	cmp	r6, r4
 8001a84:	d904      	bls.n	8001a90 <__aeabi_dmul+0x284>
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	4698      	mov	r8, r3
 8001a8c:	4445      	add	r5, r8
 8001a8e:	9503      	str	r5, [sp, #12]
 8001a90:	9b02      	ldr	r3, [sp, #8]
 8001a92:	043f      	lsls	r7, r7, #16
 8001a94:	445b      	add	r3, fp
 8001a96:	001e      	movs	r6, r3
 8001a98:	4283      	cmp	r3, r0
 8001a9a:	4180      	sbcs	r0, r0
 8001a9c:	0423      	lsls	r3, r4, #16
 8001a9e:	4698      	mov	r8, r3
 8001aa0:	9b05      	ldr	r3, [sp, #20]
 8001aa2:	0c3f      	lsrs	r7, r7, #16
 8001aa4:	4447      	add	r7, r8
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	1876      	adds	r6, r6, r1
 8001aaa:	428e      	cmp	r6, r1
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	4447      	add	r7, r8
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	183d      	adds	r5, r7, r0
 8001ab4:	46a8      	mov	r8, r5
 8001ab6:	4693      	mov	fp, r2
 8001ab8:	4249      	negs	r1, r1
 8001aba:	468a      	mov	sl, r1
 8001abc:	44c3      	add	fp, r8
 8001abe:	429f      	cmp	r7, r3
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	4580      	cmp	r8, r0
 8001ac4:	4180      	sbcs	r0, r0
 8001ac6:	9b03      	ldr	r3, [sp, #12]
 8001ac8:	44da      	add	sl, fp
 8001aca:	4698      	mov	r8, r3
 8001acc:	4653      	mov	r3, sl
 8001ace:	4240      	negs	r0, r0
 8001ad0:	427f      	negs	r7, r7
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	0c24      	lsrs	r4, r4, #16
 8001ad6:	4593      	cmp	fp, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	458a      	cmp	sl, r1
 8001adc:	4189      	sbcs	r1, r1
 8001ade:	193f      	adds	r7, r7, r4
 8001ae0:	0ddc      	lsrs	r4, r3, #23
 8001ae2:	9b04      	ldr	r3, [sp, #16]
 8001ae4:	0275      	lsls	r5, r6, #9
 8001ae6:	431d      	orrs	r5, r3
 8001ae8:	1e68      	subs	r0, r5, #1
 8001aea:	4185      	sbcs	r5, r0
 8001aec:	4653      	mov	r3, sl
 8001aee:	4252      	negs	r2, r2
 8001af0:	4249      	negs	r1, r1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	18bf      	adds	r7, r7, r2
 8001af6:	4447      	add	r7, r8
 8001af8:	0df6      	lsrs	r6, r6, #23
 8001afa:	027f      	lsls	r7, r7, #9
 8001afc:	4335      	orrs	r5, r6
 8001afe:	025a      	lsls	r2, r3, #9
 8001b00:	433c      	orrs	r4, r7
 8001b02:	4315      	orrs	r5, r2
 8001b04:	01fb      	lsls	r3, r7, #7
 8001b06:	d400      	bmi.n	8001b0a <__aeabi_dmul+0x2fe>
 8001b08:	e0c1      	b.n	8001c8e <__aeabi_dmul+0x482>
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	086a      	lsrs	r2, r5, #1
 8001b0e:	400d      	ands	r5, r1
 8001b10:	4315      	orrs	r5, r2
 8001b12:	07e2      	lsls	r2, r4, #31
 8001b14:	4315      	orrs	r5, r2
 8001b16:	0864      	lsrs	r4, r4, #1
 8001b18:	4926      	ldr	r1, [pc, #152]	; (8001bb4 <__aeabi_dmul+0x3a8>)
 8001b1a:	4461      	add	r1, ip
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	dd56      	ble.n	8001bce <__aeabi_dmul+0x3c2>
 8001b20:	076b      	lsls	r3, r5, #29
 8001b22:	d009      	beq.n	8001b38 <__aeabi_dmul+0x32c>
 8001b24:	220f      	movs	r2, #15
 8001b26:	402a      	ands	r2, r5
 8001b28:	2a04      	cmp	r2, #4
 8001b2a:	d005      	beq.n	8001b38 <__aeabi_dmul+0x32c>
 8001b2c:	1d2a      	adds	r2, r5, #4
 8001b2e:	42aa      	cmp	r2, r5
 8001b30:	41ad      	sbcs	r5, r5
 8001b32:	426d      	negs	r5, r5
 8001b34:	1964      	adds	r4, r4, r5
 8001b36:	0015      	movs	r5, r2
 8001b38:	01e3      	lsls	r3, r4, #7
 8001b3a:	d504      	bpl.n	8001b46 <__aeabi_dmul+0x33a>
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <__aeabi_dmul+0x3ac>)
 8001b40:	00c9      	lsls	r1, r1, #3
 8001b42:	4014      	ands	r4, r2
 8001b44:	4461      	add	r1, ip
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <__aeabi_dmul+0x3b0>)
 8001b48:	4291      	cmp	r1, r2
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dmul+0x342>
 8001b4c:	e724      	b.n	8001998 <__aeabi_dmul+0x18c>
 8001b4e:	0762      	lsls	r2, r4, #29
 8001b50:	08ed      	lsrs	r5, r5, #3
 8001b52:	0264      	lsls	r4, r4, #9
 8001b54:	0549      	lsls	r1, r1, #21
 8001b56:	4315      	orrs	r5, r2
 8001b58:	0b24      	lsrs	r4, r4, #12
 8001b5a:	0d4a      	lsrs	r2, r1, #21
 8001b5c:	e6c6      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001b5e:	9701      	str	r7, [sp, #4]
 8001b60:	e6b8      	b.n	80018d4 <__aeabi_dmul+0xc8>
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <__aeabi_dmul+0x398>)
 8001b64:	2003      	movs	r0, #3
 8001b66:	4694      	mov	ip, r2
 8001b68:	4463      	add	r3, ip
 8001b6a:	464a      	mov	r2, r9
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2303      	movs	r3, #3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	4691      	mov	r9, r2
 8001b74:	4652      	mov	r2, sl
 8001b76:	e68a      	b.n	800188e <__aeabi_dmul+0x82>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2600      	movs	r6, #0
 8001b82:	2001      	movs	r0, #1
 8001b84:	e683      	b.n	800188e <__aeabi_dmul+0x82>
 8001b86:	220c      	movs	r2, #12
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	0005      	movs	r5, r0
 8001b8e:	4691      	mov	r9, r2
 8001b90:	469b      	mov	fp, r3
 8001b92:	e65e      	b.n	8001852 <__aeabi_dmul+0x46>
 8001b94:	2304      	movs	r3, #4
 8001b96:	4699      	mov	r9, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	469b      	mov	fp, r3
 8001ba2:	e656      	b.n	8001852 <__aeabi_dmul+0x46>
 8001ba4:	000007ff 	.word	0x000007ff
 8001ba8:	fffffc01 	.word	0xfffffc01
 8001bac:	08007298 	.word	0x08007298
 8001bb0:	fffffc0d 	.word	0xfffffc0d
 8001bb4:	000003ff 	.word	0x000003ff
 8001bb8:	feffffff 	.word	0xfeffffff
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2480      	movs	r4, #128	; 0x80
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	0324      	lsls	r4, r4, #12
 8001bcc:	e68e      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	1a40      	subs	r0, r0, r1
 8001bd2:	2838      	cmp	r0, #56	; 0x38
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dmul+0x3cc>
 8001bd6:	e686      	b.n	80018e6 <__aeabi_dmul+0xda>
 8001bd8:	281f      	cmp	r0, #31
 8001bda:	dd5b      	ble.n	8001c94 <__aeabi_dmul+0x488>
 8001bdc:	221f      	movs	r2, #31
 8001bde:	0023      	movs	r3, r4
 8001be0:	4252      	negs	r2, r2
 8001be2:	1a51      	subs	r1, r2, r1
 8001be4:	40cb      	lsrs	r3, r1
 8001be6:	0019      	movs	r1, r3
 8001be8:	2820      	cmp	r0, #32
 8001bea:	d003      	beq.n	8001bf4 <__aeabi_dmul+0x3e8>
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <__aeabi_dmul+0x4d0>)
 8001bee:	4462      	add	r2, ip
 8001bf0:	4094      	lsls	r4, r2
 8001bf2:	4325      	orrs	r5, r4
 8001bf4:	1e6a      	subs	r2, r5, #1
 8001bf6:	4195      	sbcs	r5, r2
 8001bf8:	002a      	movs	r2, r5
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	000d      	movs	r5, r1
 8001c00:	2400      	movs	r4, #0
 8001c02:	4015      	ands	r5, r2
 8001c04:	4211      	tst	r1, r2
 8001c06:	d05b      	beq.n	8001cc0 <__aeabi_dmul+0x4b4>
 8001c08:	210f      	movs	r1, #15
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	4011      	ands	r1, r2
 8001c0e:	2904      	cmp	r1, #4
 8001c10:	d053      	beq.n	8001cba <__aeabi_dmul+0x4ae>
 8001c12:	1d11      	adds	r1, r2, #4
 8001c14:	4291      	cmp	r1, r2
 8001c16:	4192      	sbcs	r2, r2
 8001c18:	4252      	negs	r2, r2
 8001c1a:	18a4      	adds	r4, r4, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	0223      	lsls	r3, r4, #8
 8001c20:	d54b      	bpl.n	8001cba <__aeabi_dmul+0x4ae>
 8001c22:	2201      	movs	r2, #1
 8001c24:	2400      	movs	r4, #0
 8001c26:	2500      	movs	r5, #0
 8001c28:	e660      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	421c      	tst	r4, r3
 8001c30:	d009      	beq.n	8001c46 <__aeabi_dmul+0x43a>
 8001c32:	421e      	tst	r6, r3
 8001c34:	d107      	bne.n	8001c46 <__aeabi_dmul+0x43a>
 8001c36:	4333      	orrs	r3, r6
 8001c38:	031c      	lsls	r4, r3, #12
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	0015      	movs	r5, r2
 8001c3e:	0b24      	lsrs	r4, r4, #12
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	e652      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	0312      	lsls	r2, r2, #12
 8001c4a:	4314      	orrs	r4, r2
 8001c4c:	0324      	lsls	r4, r4, #12
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001c50:	0b24      	lsrs	r4, r4, #12
 8001c52:	9701      	str	r7, [sp, #4]
 8001c54:	e64a      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c56:	f000 f8ab 	bl	8001db0 <__clzsi2>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	3215      	adds	r2, #21
 8001c60:	3020      	adds	r0, #32
 8001c62:	2a1c      	cmp	r2, #28
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_dmul+0x45c>
 8001c66:	e684      	b.n	8001972 <__aeabi_dmul+0x166>
 8001c68:	4656      	mov	r6, sl
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	409e      	lsls	r6, r3
 8001c70:	e689      	b.n	8001986 <__aeabi_dmul+0x17a>
 8001c72:	f000 f89d 	bl	8001db0 <__clzsi2>
 8001c76:	0001      	movs	r1, r0
 8001c78:	0002      	movs	r2, r0
 8001c7a:	3115      	adds	r1, #21
 8001c7c:	3220      	adds	r2, #32
 8001c7e:	291c      	cmp	r1, #28
 8001c80:	dc00      	bgt.n	8001c84 <__aeabi_dmul+0x478>
 8001c82:	e64e      	b.n	8001922 <__aeabi_dmul+0x116>
 8001c84:	0034      	movs	r4, r6
 8001c86:	3808      	subs	r0, #8
 8001c88:	2500      	movs	r5, #0
 8001c8a:	4084      	lsls	r4, r0
 8001c8c:	e653      	b.n	8001936 <__aeabi_dmul+0x12a>
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	469c      	mov	ip, r3
 8001c92:	e741      	b.n	8001b18 <__aeabi_dmul+0x30c>
 8001c94:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <__aeabi_dmul+0x4d4>)
 8001c96:	0022      	movs	r2, r4
 8001c98:	4461      	add	r1, ip
 8001c9a:	002e      	movs	r6, r5
 8001c9c:	408d      	lsls	r5, r1
 8001c9e:	408a      	lsls	r2, r1
 8001ca0:	40c6      	lsrs	r6, r0
 8001ca2:	1e69      	subs	r1, r5, #1
 8001ca4:	418d      	sbcs	r5, r1
 8001ca6:	4332      	orrs	r2, r6
 8001ca8:	432a      	orrs	r2, r5
 8001caa:	40c4      	lsrs	r4, r0
 8001cac:	0753      	lsls	r3, r2, #29
 8001cae:	d0b6      	beq.n	8001c1e <__aeabi_dmul+0x412>
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	4011      	ands	r1, r2
 8001cb4:	2904      	cmp	r1, #4
 8001cb6:	d1ac      	bne.n	8001c12 <__aeabi_dmul+0x406>
 8001cb8:	e7b1      	b.n	8001c1e <__aeabi_dmul+0x412>
 8001cba:	0765      	lsls	r5, r4, #29
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0b24      	lsrs	r4, r4, #12
 8001cc0:	08d2      	lsrs	r2, r2, #3
 8001cc2:	4315      	orrs	r5, r2
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	e611      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	0312      	lsls	r2, r2, #12
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	0324      	lsls	r4, r4, #12
 8001cd0:	4a01      	ldr	r2, [pc, #4]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001cd2:	0b24      	lsrs	r4, r4, #12
 8001cd4:	e60a      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	0000043e 	.word	0x0000043e
 8001ce0:	0000041e 	.word	0x0000041e

08001ce4 <__aeabi_d2iz>:
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	b530      	push	{r4, r5, lr}
 8001ce8:	4c13      	ldr	r4, [pc, #76]	; (8001d38 <__aeabi_d2iz+0x54>)
 8001cea:	0053      	lsls	r3, r2, #1
 8001cec:	0309      	lsls	r1, r1, #12
 8001cee:	0005      	movs	r5, r0
 8001cf0:	0b09      	lsrs	r1, r1, #12
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	0d5b      	lsrs	r3, r3, #21
 8001cf6:	0fd2      	lsrs	r2, r2, #31
 8001cf8:	42a3      	cmp	r3, r4
 8001cfa:	dd04      	ble.n	8001d06 <__aeabi_d2iz+0x22>
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <__aeabi_d2iz+0x58>)
 8001cfe:	4283      	cmp	r3, r0
 8001d00:	dd02      	ble.n	8001d08 <__aeabi_d2iz+0x24>
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <__aeabi_d2iz+0x5c>)
 8001d04:	18d0      	adds	r0, r2, r3
 8001d06:	bd30      	pop	{r4, r5, pc}
 8001d08:	2080      	movs	r0, #128	; 0x80
 8001d0a:	0340      	lsls	r0, r0, #13
 8001d0c:	4301      	orrs	r1, r0
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <__aeabi_d2iz+0x60>)
 8001d10:	1ac0      	subs	r0, r0, r3
 8001d12:	281f      	cmp	r0, #31
 8001d14:	dd08      	ble.n	8001d28 <__aeabi_d2iz+0x44>
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <__aeabi_d2iz+0x64>)
 8001d18:	1ac3      	subs	r3, r0, r3
 8001d1a:	40d9      	lsrs	r1, r3
 8001d1c:	000b      	movs	r3, r1
 8001d1e:	4258      	negs	r0, r3
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	d1f0      	bne.n	8001d06 <__aeabi_d2iz+0x22>
 8001d24:	0018      	movs	r0, r3
 8001d26:	e7ee      	b.n	8001d06 <__aeabi_d2iz+0x22>
 8001d28:	4c08      	ldr	r4, [pc, #32]	; (8001d4c <__aeabi_d2iz+0x68>)
 8001d2a:	40c5      	lsrs	r5, r0
 8001d2c:	46a4      	mov	ip, r4
 8001d2e:	4463      	add	r3, ip
 8001d30:	4099      	lsls	r1, r3
 8001d32:	000b      	movs	r3, r1
 8001d34:	432b      	orrs	r3, r5
 8001d36:	e7f2      	b.n	8001d1e <__aeabi_d2iz+0x3a>
 8001d38:	000003fe 	.word	0x000003fe
 8001d3c:	0000041d 	.word	0x0000041d
 8001d40:	7fffffff 	.word	0x7fffffff
 8001d44:	00000433 	.word	0x00000433
 8001d48:	00000413 	.word	0x00000413
 8001d4c:	fffffbed 	.word	0xfffffbed

08001d50 <__aeabi_i2d>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d016      	beq.n	8001d84 <__aeabi_i2d+0x34>
 8001d56:	17c3      	asrs	r3, r0, #31
 8001d58:	18c5      	adds	r5, r0, r3
 8001d5a:	405d      	eors	r5, r3
 8001d5c:	0fc4      	lsrs	r4, r0, #31
 8001d5e:	0028      	movs	r0, r5
 8001d60:	f000 f826 	bl	8001db0 <__clzsi2>
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <__aeabi_i2d+0x5c>)
 8001d66:	1a12      	subs	r2, r2, r0
 8001d68:	280a      	cmp	r0, #10
 8001d6a:	dc16      	bgt.n	8001d9a <__aeabi_i2d+0x4a>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	002e      	movs	r6, r5
 8001d70:	3315      	adds	r3, #21
 8001d72:	409e      	lsls	r6, r3
 8001d74:	230b      	movs	r3, #11
 8001d76:	1a18      	subs	r0, r3, r0
 8001d78:	40c5      	lsrs	r5, r0
 8001d7a:	0553      	lsls	r3, r2, #21
 8001d7c:	032d      	lsls	r5, r5, #12
 8001d7e:	0b2d      	lsrs	r5, r5, #12
 8001d80:	0d5b      	lsrs	r3, r3, #21
 8001d82:	e003      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001d84:	2400      	movs	r4, #0
 8001d86:	2300      	movs	r3, #0
 8001d88:	2500      	movs	r5, #0
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	051b      	lsls	r3, r3, #20
 8001d8e:	432b      	orrs	r3, r5
 8001d90:	07e4      	lsls	r4, r4, #31
 8001d92:	4323      	orrs	r3, r4
 8001d94:	0030      	movs	r0, r6
 8001d96:	0019      	movs	r1, r3
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	380b      	subs	r0, #11
 8001d9c:	4085      	lsls	r5, r0
 8001d9e:	0553      	lsls	r3, r2, #21
 8001da0:	032d      	lsls	r5, r5, #12
 8001da2:	2600      	movs	r6, #0
 8001da4:	0b2d      	lsrs	r5, r5, #12
 8001da6:	0d5b      	lsrs	r3, r3, #21
 8001da8:	e7f0      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	0000041e 	.word	0x0000041e

08001db0 <__clzsi2>:
 8001db0:	211c      	movs	r1, #28
 8001db2:	2301      	movs	r3, #1
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	4298      	cmp	r0, r3
 8001db8:	d301      	bcc.n	8001dbe <__clzsi2+0xe>
 8001dba:	0c00      	lsrs	r0, r0, #16
 8001dbc:	3910      	subs	r1, #16
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d301      	bcc.n	8001dc8 <__clzsi2+0x18>
 8001dc4:	0a00      	lsrs	r0, r0, #8
 8001dc6:	3908      	subs	r1, #8
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d301      	bcc.n	8001dd2 <__clzsi2+0x22>
 8001dce:	0900      	lsrs	r0, r0, #4
 8001dd0:	3904      	subs	r1, #4
 8001dd2:	a202      	add	r2, pc, #8	; (adr r2, 8001ddc <__clzsi2+0x2c>)
 8001dd4:	5c10      	ldrb	r0, [r2, r0]
 8001dd6:	1840      	adds	r0, r0, r1
 8001dd8:	4770      	bx	lr
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	02020304 	.word	0x02020304
 8001de0:	01010101 	.word	0x01010101
	...

08001dec <_ZN6buttonC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "button.h"

button::button(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	1dbb      	adds	r3, r7, #6
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <_ZN6buttonC1EP12GPIO_TypeDeft+0x2c>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	609a      	str	r2, [r3, #8]
	pin = PIN;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1dba      	adds	r2, r7, #6
 8001e0a:	8812      	ldrh	r2, [r2, #0]
 8001e0c:	809a      	strh	r2, [r3, #4]
}
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	080072e0 	.word	0x080072e0

08001e1c <_ZN6buttonD1Ev>:

button::~button() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <_ZN6buttonD1Ev+0x18>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	080072e0 	.word	0x080072e0

08001e38 <_ZN6buttonD0Ev>:
button::~button() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ffea 	bl	8001e1c <_ZN6buttonD1Ev>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	210c      	movs	r1, #12
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f004 ffbd 	bl	8006dcc <_ZdlPvj>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_ZN6button6GetPinEv>:

uint16_t button::GetPin() {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	return pin;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	889b      	ldrh	r3, [r3, #4]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_ZN7controlC1EP8position>:
 *      Author: Lucas Martins
 */

#include "control.h"

control::control(position* P) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <_ZN7controlC1EP8position+0x34>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	p = P;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]
	kp = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
	kd = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
	der = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	080072f0 	.word	0x080072f0

08001ea8 <_ZN7controlD1Ev>:

control::~control() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <_ZN7controlD1Ev+0x18>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	080072f0 	.word	0x080072f0

08001ec4 <_ZN7controlD0Ev>:
control::~control() {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
}
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ffea 	bl	8001ea8 <_ZN7controlD1Ev>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2124      	movs	r1, #36	; 0x24
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f004 ff77 	bl	8006dcc <_ZdlPvj>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN7control9setConstsEhh>:

void control::setConsts(uint8_t KP, uint8_t KD) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	0008      	movs	r0, r1
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	1cfb      	adds	r3, r7, #3
 8001ef6:	1c02      	adds	r2, r0, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	1cbb      	adds	r3, r7, #2
 8001efc:	1c0a      	adds	r2, r1, #0
 8001efe:	701a      	strb	r2, [r3, #0]
	kp = float(KP) / 10;
 8001f00:	1cfb      	adds	r3, r7, #3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff f95d 	bl	80011c4 <__aeabi_ui2f>
 8001f0a:	1c03      	adds	r3, r0, #0
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <_ZN7control9setConstsEhh+0x58>)
 8001f0e:	1c18      	adds	r0, r3, #0
 8001f10:	f7fe fc46 	bl	80007a0 <__aeabi_fdiv>
 8001f14:	1c03      	adds	r3, r0, #0
 8001f16:	1c1a      	adds	r2, r3, #0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
	kd = float(KD) / 10;
 8001f1c:	1cbb      	adds	r3, r7, #2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f94f 	bl	80011c4 <__aeabi_ui2f>
 8001f26:	1c03      	adds	r3, r0, #0
 8001f28:	4905      	ldr	r1, [pc, #20]	; (8001f40 <_ZN7control9setConstsEhh+0x58>)
 8001f2a:	1c18      	adds	r0, r3, #0
 8001f2c:	f7fe fc38 	bl	80007a0 <__aeabi_fdiv>
 8001f30:	1c03      	adds	r3, r0, #0
 8001f32:	1c1a      	adds	r2, r3, #0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	41200000 	.word	0x41200000

08001f44 <_ZN7control8PIDValueEv>:


float control::PIDValue() {
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	oldPos = pos;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	621a      	str	r2, [r3, #32]
	pos = p->DefinePosition();
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f001 f85b 	bl	8003014 <_ZN8position14DefinePositionEv>
 8001f5e:	0002      	movs	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	61da      	str	r2, [r3, #28]
	der = pos - oldPos;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
	oldPID = PID;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
	PID = (kp*pos + kd*oldPos);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689c      	ldr	r4, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff f8d8 	bl	8001138 <__aeabi_i2f>
 8001f88:	1c03      	adds	r3, r0, #0
 8001f8a:	1c19      	adds	r1, r3, #0
 8001f8c:	1c20      	adds	r0, r4, #0
 8001f8e:	f7fe fdd1 	bl	8000b34 <__aeabi_fmul>
 8001f92:	1c03      	adds	r3, r0, #0
 8001f94:	1c1d      	adds	r5, r3, #0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68dc      	ldr	r4, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7ff f8ca 	bl	8001138 <__aeabi_i2f>
 8001fa4:	1c03      	adds	r3, r0, #0
 8001fa6:	1c19      	adds	r1, r3, #0
 8001fa8:	1c20      	adds	r0, r4, #0
 8001faa:	f7fe fdc3 	bl	8000b34 <__aeabi_fmul>
 8001fae:	1c03      	adds	r3, r0, #0
 8001fb0:	1c19      	adds	r1, r3, #0
 8001fb2:	1c28      	adds	r0, r5, #0
 8001fb4:	f7fe fa58 	bl	8000468 <__aeabi_fadd>
 8001fb8:	1c03      	adds	r3, r0, #0
 8001fba:	1c1a      	adds	r2, r3, #0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	615a      	str	r2, [r3, #20]
	return PID;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
}
 8001fc4:	1c18      	adds	r0, r3, #0
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}

08001fcc <_ZN7encoderC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "encoder.h"

encoder::encoder(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	1dbb      	adds	r3, r7, #6
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <_ZN7encoderC1EP12GPIO_TypeDeft+0x40>)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	619a      	str	r2, [r3, #24]
	pin = PIN;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1dba      	adds	r2, r7, #6
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	829a      	strh	r2, [r3, #20]
	rps = 0;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
	time = 0;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
	cont = 0;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
}
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	08007300 	.word	0x08007300

08002010 <_ZN7encoderD1Ev>:

encoder::~encoder() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <_ZN7encoderD1Ev+0x18>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b002      	add	sp, #8
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08007300 	.word	0x08007300

0800202c <_ZN7encoderD0Ev>:
encoder::~encoder() {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
}
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff ffea 	bl	8002010 <_ZN7encoderD1Ev>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	211c      	movs	r1, #28
 8002040:	0018      	movs	r0, r3
 8002042:	f004 fec3 	bl	8006dcc <_ZdlPvj>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <_ZN7encoder6GetPinEv>:

uint16_t encoder::GetPin() {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	return pin;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8a9b      	ldrh	r3, [r3, #20]
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN7encoder6SetRpsEv>:

int encoder::GetRps() {
	return rps;
}

void encoder::SetRps() {
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	time = cont;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
	if(time < 600) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	2396      	movs	r3, #150	; 0x96
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	da18      	bge.n	80020b2 <_ZN7encoder6SetRpsEv+0x4e>
		rps = 1 / (0.00015*time);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff fe63 	bl	8001d50 <__aeabi_i2d>
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <_ZN7encoder6SetRpsEv+0x64>)
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <_ZN7encoder6SetRpsEv+0x68>)
 800208e:	f7ff fbbd 	bl	800180c <__aeabi_dmul>
 8002092:	0002      	movs	r2, r0
 8002094:	000b      	movs	r3, r1
 8002096:	2000      	movs	r0, #0
 8002098:	490d      	ldr	r1, [pc, #52]	; (80020d0 <_ZN7encoder6SetRpsEv+0x6c>)
 800209a:	f7ff f8cf 	bl	800123c <__aeabi_ddiv>
 800209e:	0002      	movs	r2, r0
 80020a0:	000b      	movs	r3, r1
 80020a2:	0010      	movs	r0, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	f7ff fe1d 	bl	8001ce4 <__aeabi_d2iz>
 80020aa:	0002      	movs	r2, r0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	e002      	b.n	80020b8 <_ZN7encoder6SetRpsEv+0x54>
	} else {
		rps = 0;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
	}
	cont = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	30553261 	.word	0x30553261
 80020cc:	3f23a92a 	.word	0x3f23a92a
 80020d0:	3ff00000 	.word	0x3ff00000

080020d4 <_ZN7encoder4ContEv>:

void encoder::Cont() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	if(cont < 600) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	2396      	movs	r3, #150	; 0x96
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	da05      	bge.n	80020f4 <_ZN7encoder4ContEv+0x20>
		cont++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
	} else {
		SetRps();
	}
}
 80020f2:	e003      	b.n	80020fc <_ZN7encoder4ContEv+0x28>
		SetRps();
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7ff ffb4 	bl	8002064 <_ZN7encoder6SetRpsEv>
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN7encoder15RestartRotationEv>:

void encoder::RestartRotation() {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	rotation = 0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	82da      	strh	r2, [r3, #22]
}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZN7encoder12RotationContEi>:

void encoder::RotationCont(int speed) {
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	if (speed >= 0) {
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db06      	blt.n	8002138 <_ZN7encoder12RotationContEi+0x1e>
		rotation++;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	8adb      	ldrh	r3, [r3, #22]
 800212e:	3301      	adds	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	82da      	strh	r2, [r3, #22]
	} else {
		rotation--;
	}

}
 8002136:	e005      	b.n	8002144 <_ZN7encoder12RotationContEi+0x2a>
		rotation--;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8adb      	ldrh	r3, [r3, #22]
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	82da      	strh	r2, [r3, #22]
}
 8002144:	46c0      	nop			; (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN7encoder11GetRotationEv>:

uint16_t encoder::GetRotation() {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	return rotation;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8adb      	ldrh	r3, [r3, #22]
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN3ledC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "led.h"

led::led(GPIO_TypeDef* PORT, uint16_t PIN) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <_ZN3ledC1EP12GPIO_TypeDeft+0x2c>)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	605a      	str	r2, [r3, #4]
	pin = PIN;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	811a      	strh	r2, [r3, #8]
}
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08007310 	.word	0x08007310

08002190 <_ZN3ledD1Ev>:

led::~led() {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <_ZN3ledD1Ev+0x18>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	08007310 	.word	0x08007310

080021ac <_ZN3ledD0Ev>:
led::~led() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
}
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff ffea 	bl	8002190 <_ZN3ledD1Ev>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	210c      	movs	r1, #12
 80021c0:	0018      	movs	r0, r3
 80021c2:	f004 fe03 	bl	8006dcc <_ZdlPvj>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN3led2OnEv>:

void led::On() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6858      	ldr	r0, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	891b      	ldrh	r3, [r3, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	0019      	movs	r1, r3
 80021e4:	f003 f93f 	bl	8005466 <HAL_GPIO_WritePin>
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_ZN3led3OffEv>:

void led::Off() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6858      	ldr	r0, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	891b      	ldrh	r3, [r3, #8]
 8002200:	2201      	movs	r2, #1
 8002202:	0019      	movs	r1, r3
 8002204:	f003 f92f 	bl	8005466 <HAL_GPIO_WritePin>
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <CppMain>:
map circuit;

robot rufus(&ctr, &mdir, &mesq, &circuit);


void CppMain() {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	lfdir.Off();
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <CppMain+0xa0>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7ff ffea 	bl	80021f0 <_ZN3led3OffEv>
	lfesq.Off();
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <CppMain+0xa4>)
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ffe6 	bl	80021f0 <_ZN3led3OffEv>
	lfren.Off();
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <CppMain+0xa8>)
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ffe2 	bl	80021f0 <_ZN3led3OffEv>
	ldeb1.Off();
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <CppMain+0xac>)
 800222e:	0018      	movs	r0, r3
 8002230:	f7ff ffde 	bl	80021f0 <_ZN3led3OffEv>
	ldeb2.Off();
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <CppMain+0xb0>)
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff ffda 	bl	80021f0 <_ZN3led3OffEv>

	while(1) {
		//dirteste = HAL_GPIO_ReadPin(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
		switch(state) {
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <CppMain+0xb4>)
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d833      	bhi.n	80022ac <CppMain+0x9c>
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <CppMain+0xb8>)
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	469f      	mov	pc, r3
		case WAITING:
			mdir.Break();
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <CppMain+0xbc>)
 8002250:	0018      	movs	r0, r3
 8002252:	f000 fd9b 	bl	8002d8c <_ZN12motorControl5BreakEv>
			mesq.Break();
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <CppMain+0xc0>)
 8002258:	0018      	movs	r0, r3
 800225a:	f000 fd97 	bl	8002d8c <_ZN12motorControl5BreakEv>
			break;
 800225e:	e026      	b.n	80022ae <CppMain+0x9e>

		case CALIBRATION:
			rufus.Calibrate(&z);
 8002260:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <CppMain+0xc4>)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <CppMain+0xc8>)
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f001 f84e 	bl	8003308 <_ZN5robot9CalibrateEPm>
			circuit.InitTracks();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <CppMain+0xcc>)
 800226e:	0018      	movs	r0, r3
 8002270:	f000 fb70 	bl	8002954 <_ZN3map10InitTracksEv>
			state = PRE_RUN;
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <CppMain+0xb4>)
 8002276:	2202      	movs	r2, #2
 8002278:	801a      	strh	r2, [r3, #0]
			break;
 800227a:	e018      	b.n	80022ae <CppMain+0x9e>

		case PRE_RUN:
			mdir.Break();
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <CppMain+0xbc>)
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fd84 	bl	8002d8c <_ZN12motorControl5BreakEv>
			mesq.Break();
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <CppMain+0xc0>)
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fd80 	bl	8002d8c <_ZN12motorControl5BreakEv>
			break;
 800228c:	e00f      	b.n	80022ae <CppMain+0x9e>

		case RUNNING:
			rufus.Running();
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <CppMain+0xc8>)
 8002290:	0018      	movs	r0, r3
 8002292:	f000 ff97 	bl	80031c4 <_ZN5robot7RunningEv>
			break;
 8002296:	e00a      	b.n	80022ae <CppMain+0x9e>

		case FINISH:
			rufus.Finish(&z);
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <CppMain+0xc4>)
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <CppMain+0xc8>)
 800229c:	0011      	movs	r1, r2
 800229e:	0018      	movs	r0, r3
 80022a0:	f001 f804 	bl	80032ac <_ZN5robot6FinishEPm>
			state = WAITING;
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <CppMain+0xb4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]
			break;
 80022aa:	e000      	b.n	80022ae <CppMain+0x9e>

		default:
			break;
 80022ac:	46c0      	nop			; (mov r8, r8)
		switch(state) {
 80022ae:	e7c5      	b.n	800223c <CppMain+0x2c>
 80022b0:	200000cc 	.word	0x200000cc
 80022b4:	200000d8 	.word	0x200000d8
 80022b8:	200000e4 	.word	0x200000e4
 80022bc:	200000f0 	.word	0x200000f0
 80022c0:	200000fc 	.word	0x200000fc
 80022c4:	20000152 	.word	0x20000152
 80022c8:	08007318 	.word	0x08007318
 80022cc:	20000188 	.word	0x20000188
 80022d0:	2000019c 	.word	0x2000019c
 80022d4:	2000014c 	.word	0x2000014c
 80022d8:	20000578 	.word	0x20000578
 80022dc:	200001d4 	.word	0x200001d4

080022e0 <ADC_Interrupt>:
		}
	}
}


void ADC_Interrupt(uint8_t* Array, int size) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	p.SetAnalog(Array, size);
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <ADC_Interrupt+0x28>)
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 fd9f 	bl	8002e34 <_ZN8position9SetAnalogEPhi>
	ctr.PIDValue();
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <ADC_Interrupt+0x2c>)
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff fe23 	bl	8001f44 <_ZN7control8PIDValueEv>
}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	46bd      	mov	sp, r7
 8002302:	b002      	add	sp, #8
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	2000008c 	.word	0x2000008c
 800230c:	200001b0 	.word	0x200001b0

08002310 <TIM1_Interrupt>:


void TIM1_Interrupt() {
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	if(z != 60000) {
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <TIM1_Interrupt+0x168>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a58      	ldr	r2, [pc, #352]	; (800247c <TIM1_Interrupt+0x16c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00c      	beq.n	8002338 <TIM1_Interrupt+0x28>
		z++;
 800231e:	4b56      	ldr	r3, [pc, #344]	; (8002478 <TIM1_Interrupt+0x168>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4b54      	ldr	r3, [pc, #336]	; (8002478 <TIM1_Interrupt+0x168>)
 8002326:	601a      	str	r2, [r3, #0]
		if(z >= 50000) {
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <TIM1_Interrupt+0x168>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <TIM1_Interrupt+0x170>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d902      	bls.n	8002338 <TIM1_Interrupt+0x28>
			z = 0;
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <TIM1_Interrupt+0x168>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
		}
	}
	if(debounce > 0) {
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <TIM1_Interrupt+0x174>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <TIM1_Interrupt+0x3c>
		debounce--;
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <TIM1_Interrupt+0x174>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <TIM1_Interrupt+0x174>)
 800234a:	801a      	strh	r2, [r3, #0]
	}
	if(dbDir > 0) {
 800234c:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <TIM1_Interrupt+0x178>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <TIM1_Interrupt+0xc8>
		if(state == RUNNING && dbDir == 1) {
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <TIM1_Interrupt+0x17c>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d137      	bne.n	80023cc <TIM1_Interrupt+0xbc>
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <TIM1_Interrupt+0x178>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d133      	bne.n	80023cc <TIM1_Interrupt+0xbc>
			if(rufus.GetPosition() == 0) {
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <TIM1_Interrupt+0x180>)
 8002366:	0018      	movs	r0, r3
 8002368:	f001 f856 	bl	8003418 <_ZN5robot11GetPositionEv>
 800236c:	0003      	movs	r3, r0
 800236e:	425a      	negs	r2, r3
 8002370:	4153      	adcs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <TIM1_Interrupt+0x80>
				rufus.NextState();
 8002378:	4b45      	ldr	r3, [pc, #276]	; (8002490 <TIM1_Interrupt+0x180>)
 800237a:	0018      	movs	r0, r3
 800237c:	f001 f856 	bl	800342c <_ZN5robot9NextStateEv>
				enc1.RestartRotation();
 8002380:	4b44      	ldr	r3, [pc, #272]	; (8002494 <TIM1_Interrupt+0x184>)
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff febe 	bl	8002104 <_ZN7encoder15RestartRotationEv>
				enc2.RestartRotation();
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <TIM1_Interrupt+0x188>)
 800238a:	0018      	movs	r0, r3
 800238c:	f7ff feba 	bl	8002104 <_ZN7encoder15RestartRotationEv>
			}
			marcDir.NextTrack();
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <TIM1_Interrupt+0x18c>)
 8002392:	0018      	movs	r0, r3
 8002394:	f001 f8e6 	bl	8003564 <_ZN10sensorSide9NextTrackEv>

			if(marcDir.CurrentTrack() == 12) {
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <TIM1_Interrupt+0x18c>)
 800239a:	0018      	movs	r0, r3
 800239c:	f001 f8f0 	bl	8003580 <_ZN10sensorSide12CurrentTrackEv>
 80023a0:	0003      	movs	r3, r0
 80023a2:	3b0c      	subs	r3, #12
 80023a4:	425a      	negs	r2, r3
 80023a6:	4153      	adcs	r3, r2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00e      	beq.n	80023cc <TIM1_Interrupt+0xbc>
				rufus.NextState();
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <TIM1_Interrupt+0x180>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f001 f83b 	bl	800342c <_ZN5robot9NextStateEv>
				mdir.Break();
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <TIM1_Interrupt+0x190>)
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 fce7 	bl	8002d8c <_ZN12motorControl5BreakEv>
				mesq.Break();
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <TIM1_Interrupt+0x194>)
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 fce3 	bl	8002d8c <_ZN12motorControl5BreakEv>
				state = FINISH;
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <TIM1_Interrupt+0x17c>)
 80023c8:	2204      	movs	r2, #4
 80023ca:	801a      	strh	r2, [r3, #0]
			}
		}
		dbDir--;
 80023cc:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <TIM1_Interrupt+0x178>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <TIM1_Interrupt+0x178>)
 80023d6:	801a      	strh	r2, [r3, #0]
	}

	if(dbEsq > 0) {
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <TIM1_Interrupt+0x198>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d037      	beq.n	8002450 <TIM1_Interrupt+0x140>
		if(state == RUNNING && dbEsq == 1) {
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <TIM1_Interrupt+0x17c>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d12d      	bne.n	8002444 <TIM1_Interrupt+0x134>
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <TIM1_Interrupt+0x198>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d129      	bne.n	8002444 <TIM1_Interrupt+0x134>
			rufus.NextState();
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <TIM1_Interrupt+0x180>)
 80023f2:	0018      	movs	r0, r3
 80023f4:	f001 f81a 	bl	800342c <_ZN5robot9NextStateEv>
			marcEsq.NextTrack();
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <TIM1_Interrupt+0x19c>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f001 f8b2 	bl	8003564 <_ZN10sensorSide9NextTrackEv>
			enc1.RestartRotation();
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <TIM1_Interrupt+0x184>)
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fe7e 	bl	8002104 <_ZN7encoder15RestartRotationEv>
			enc2.RestartRotation();
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <TIM1_Interrupt+0x188>)
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff fe7a 	bl	8002104 <_ZN7encoder15RestartRotationEv>
			if(marcEsq.CurrentTrack() == 82) {
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <TIM1_Interrupt+0x19c>)
 8002412:	0018      	movs	r0, r3
 8002414:	f001 f8b4 	bl	8003580 <_ZN10sensorSide12CurrentTrackEv>
 8002418:	0003      	movs	r3, r0
 800241a:	3b52      	subs	r3, #82	; 0x52
 800241c:	425a      	negs	r2, r3
 800241e:	4153      	adcs	r3, r2
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00e      	beq.n	8002444 <TIM1_Interrupt+0x134>
				rufus.NextState();
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <TIM1_Interrupt+0x180>)
 8002428:	0018      	movs	r0, r3
 800242a:	f000 ffff 	bl	800342c <_ZN5robot9NextStateEv>
				mdir.Break();
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <TIM1_Interrupt+0x190>)
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fcab 	bl	8002d8c <_ZN12motorControl5BreakEv>
				mesq.Break();
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <TIM1_Interrupt+0x194>)
 8002438:	0018      	movs	r0, r3
 800243a:	f000 fca7 	bl	8002d8c <_ZN12motorControl5BreakEv>
				state = FINISH;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <TIM1_Interrupt+0x17c>)
 8002440:	2204      	movs	r2, #4
 8002442:	801a      	strh	r2, [r3, #0]
			}
		}
		dbEsq--;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <TIM1_Interrupt+0x198>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <TIM1_Interrupt+0x198>)
 800244e:	801a      	strh	r2, [r3, #0]
	}

	if((state == RUNNING) || (state == CALIBRATION)) {
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <TIM1_Interrupt+0x17c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <TIM1_Interrupt+0x150>
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <TIM1_Interrupt+0x17c>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <TIM1_Interrupt+0x160>
		enc1.Cont();
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <TIM1_Interrupt+0x184>)
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fe36 	bl	80020d4 <_ZN7encoder4ContEv>
		enc2.Cont();
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <TIM1_Interrupt+0x188>)
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fe32 	bl	80020d4 <_ZN7encoder4ContEv>
	}
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	2000014c 	.word	0x2000014c
 800247c:	0000ea60 	.word	0x0000ea60
 8002480:	0000c34f 	.word	0x0000c34f
 8002484:	20000150 	.word	0x20000150
 8002488:	20000156 	.word	0x20000156
 800248c:	20000152 	.word	0x20000152
 8002490:	20000578 	.word	0x20000578
 8002494:	20000114 	.word	0x20000114
 8002498:	20000130 	.word	0x20000130
 800249c:	200000c0 	.word	0x200000c0
 80024a0:	20000188 	.word	0x20000188
 80024a4:	2000019c 	.word	0x2000019c
 80024a8:	20000154 	.word	0x20000154
 80024ac:	200000b4 	.word	0x200000b4

080024b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	0002      	movs	r2, r0
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == enc1.GetPin()) {
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff fdc6 	bl	8002050 <_ZN7encoder6GetPinEv>
 80024c4:	0003      	movs	r3, r0
 80024c6:	001a      	movs	r2, r3
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	425a      	negs	r2, r3
 80024d0:	4153      	adcs	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d011      	beq.n	80024fc <HAL_GPIO_EXTI_Callback+0x4c>
		if((state == RUNNING) || (state == CALIBRATION)) {
 80024d8:	4b63      	ldr	r3, [pc, #396]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_EXTI_Callback+0x38>
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d109      	bne.n	80024fc <HAL_GPIO_EXTI_Callback+0x4c>
			//enc1.SetRps();
			enc1.RotationCont(mdir.GetSpeed());
 80024e8:	4b60      	ldr	r3, [pc, #384]	; (800266c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fc69 	bl	8002dc2 <_ZN12motorControl8GetSpeedEv>
 80024f0:	0002      	movs	r2, r0
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80024f4:	0011      	movs	r1, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff fe0f 	bl	800211a <_ZN7encoder12RotationContEi>
			//rufus.CompareRotations();
		}
	}

	if (GPIO_Pin == enc2.GetPin()) {
 80024fc:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff fda6 	bl	8002050 <_ZN7encoder6GetPinEv>
 8002504:	0003      	movs	r3, r0
 8002506:	001a      	movs	r2, r3
 8002508:	1dbb      	adds	r3, r7, #6
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	425a      	negs	r2, r3
 8002510:	4153      	adcs	r3, r2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d011      	beq.n	800253c <HAL_GPIO_EXTI_Callback+0x8c>
		if((state == RUNNING) || (state == CALIBRATION)) {
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_EXTI_Callback+0x78>
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d109      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x8c>
			//enc2.SetRps();
			enc2.RotationCont(mesq.GetSpeed());
 8002528:	4b52      	ldr	r3, [pc, #328]	; (8002674 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fc49 	bl	8002dc2 <_ZN12motorControl8GetSpeedEv>
 8002530:	0002      	movs	r2, r0
 8002532:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002534:	0011      	movs	r1, r2
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff fdef 	bl	800211a <_ZN7encoder12RotationContEi>
			//rufus.CompareRotations();
		}
	}

	if (GPIO_Pin == b.GetPin()) {
 800253c:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff fc8c 	bl	8001e5c <_ZN6button6GetPinEv>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	425a      	negs	r2, r3
 8002550:	4153      	adcs	r3, r2
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d029      	beq.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
		if(debounce == 0) {
 8002558:	4b48      	ldr	r3, [pc, #288]	; (800267c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d125      	bne.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
			debounce = 2000;
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8002562:	22fa      	movs	r2, #250	; 0xfa
 8002564:	00d2      	lsls	r2, r2, #3
 8002566:	801a      	strh	r2, [r3, #0]
			switch(state) {
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d018      	beq.n	80025a2 <HAL_GPIO_EXTI_Callback+0xf2>
 8002570:	dc1b      	bgt.n	80025aa <HAL_GPIO_EXTI_Callback+0xfa>
 8002572:	2b02      	cmp	r3, #2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_EXTI_Callback+0xe2>
 8002576:	dc18      	bgt.n	80025aa <HAL_GPIO_EXTI_Callback+0xfa>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d002      	beq.n	8002582 <HAL_GPIO_EXTI_Callback+0xd2>
 800257c:	2b01      	cmp	r3, #1
 800257e:	d004      	beq.n	800258a <HAL_GPIO_EXTI_Callback+0xda>
				break;
			case 3:
				state = 0;
				break;
			default:
				break;
 8002580:	e013      	b.n	80025aa <HAL_GPIO_EXTI_Callback+0xfa>
				state = 1;
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002584:	2201      	movs	r2, #1
 8002586:	801a      	strh	r2, [r3, #0]
				break;
 8002588:	e010      	b.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
				state = 2;
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800258c:	2202      	movs	r2, #2
 800258e:	801a      	strh	r2, [r3, #0]
				break;
 8002590:	e00c      	b.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
				rufus.ChangeTrack();
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002594:	0018      	movs	r0, r3
 8002596:	f000 ff5b 	bl	8003450 <_ZN5robot11ChangeTrackEv>
				state = 3;
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800259c:	2203      	movs	r2, #3
 800259e:	801a      	strh	r2, [r3, #0]
				break;
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
				state = 0;
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
				break;
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_EXTI_Callback+0xfc>
				break;
 80025aa:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (GPIO_Pin == marcEsq.GetPin()) {
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 fff0 	bl	8003594 <_ZN10sensorSide6GetPinEv>
 80025b4:	0003      	movs	r3, r0
 80025b6:	001a      	movs	r2, r3
 80025b8:	1dbb      	adds	r3, r7, #6
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	425a      	negs	r2, r3
 80025c0:	4153      	adcs	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01d      	beq.n	8002604 <HAL_GPIO_EXTI_Callback+0x154>
		if(marcEsq.State() == GPIO_PIN_RESET) {
 80025c8:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 ffec 	bl	80035a8 <_ZN10sensorSide5StateEv>
 80025d0:	0003      	movs	r3, r0
 80025d2:	425a      	negs	r2, r3
 80025d4:	4153      	adcs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00f      	beq.n	80025fc <HAL_GPIO_EXTI_Callback+0x14c>
			dbEsq = 30;
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80025de:	221e      	movs	r2, #30
 80025e0:	801a      	strh	r2, [r3, #0]

			if(state == PRE_RUN) {
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <HAL_GPIO_EXTI_Callback+0x142>
				rufus.sumLess();
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 ff70 	bl	80034d2 <_ZN5robot7sumLessEv>
			}

			lfesq.On();
 80025f2:	4b26      	ldr	r3, [pc, #152]	; (800268c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7ff fdeb 	bl	80021d0 <_ZN3led2OnEv>
 80025fa:	e003      	b.n	8002604 <HAL_GPIO_EXTI_Callback+0x154>
		} else {

			lfesq.Off();
 80025fc:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_GPIO_EXTI_Callback+0x1dc>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff fdf6 	bl	80021f0 <_ZN3led3OffEv>
		}

	}

	if (GPIO_Pin == marcDir.GetPin()) {
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8002606:	0018      	movs	r0, r3
 8002608:	f000 ffc4 	bl	8003594 <_ZN10sensorSide6GetPinEv>
 800260c:	0003      	movs	r3, r0
 800260e:	001a      	movs	r2, r3
 8002610:	1dbb      	adds	r3, r7, #6
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	425a      	negs	r2, r3
 8002618:	4153      	adcs	r3, r2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01d      	beq.n	800265c <HAL_GPIO_EXTI_Callback+0x1ac>
		if(marcDir.State() == GPIO_PIN_RESET){
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8002622:	0018      	movs	r0, r3
 8002624:	f000 ffc0 	bl	80035a8 <_ZN10sensorSide5StateEv>
 8002628:	0003      	movs	r3, r0
 800262a:	425a      	negs	r2, r3
 800262c:	4153      	adcs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00f      	beq.n	8002654 <HAL_GPIO_EXTI_Callback+0x1a4>
			dbDir = 30;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002636:	221e      	movs	r2, #30
 8002638:	801a      	strh	r2, [r3, #0]

			if(state == PRE_RUN) {
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <HAL_GPIO_EXTI_Callback+0x19a>
				rufus.sumPlus();
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8002644:	0018      	movs	r0, r3
 8002646:	f000 ff37 	bl	80034b8 <_ZN5robot7sumPlusEv>
			}
			lfdir.On();
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff fdbf 	bl	80021d0 <_ZN3led2OnEv>
		} else {
			lfdir.Off();
		}
	}
}
 8002652:	e003      	b.n	800265c <HAL_GPIO_EXTI_Callback+0x1ac>
			lfdir.Off();
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002656:	0018      	movs	r0, r3
 8002658:	f7ff fdca 	bl	80021f0 <_ZN3led3OffEv>
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000114 	.word	0x20000114
 8002668:	20000152 	.word	0x20000152
 800266c:	20000188 	.word	0x20000188
 8002670:	20000130 	.word	0x20000130
 8002674:	2000019c 	.word	0x2000019c
 8002678:	20000108 	.word	0x20000108
 800267c:	20000150 	.word	0x20000150
 8002680:	20000578 	.word	0x20000578
 8002684:	200000b4 	.word	0x200000b4
 8002688:	20000154 	.word	0x20000154
 800268c:	200000d8 	.word	0x200000d8
 8002690:	200000c0 	.word	0x200000c0
 8002694:	20000156 	.word	0x20000156
 8002698:	200000cc 	.word	0x200000cc

0800269c <_Z41__static_initialization_and_destruction_0ii>:
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b087      	sub	sp, #28
 80026a0:	af04      	add	r7, sp, #16
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d000      	beq.n	80026ae <_Z41__static_initialization_and_destruction_0ii+0x12>
 80026ac:	e086      	b.n	80027bc <_Z41__static_initialization_and_destruction_0ii+0x120>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4a6c      	ldr	r2, [pc, #432]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d000      	beq.n	80026b8 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 80026b6:	e081      	b.n	80027bc <_Z41__static_initialization_and_destruction_0ii+0x120>
position p;
 80026b8:	4b6b      	ldr	r3, [pc, #428]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 fb8c 	bl	8002dd8 <_ZN8positionC1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	005a      	lsls	r2, r3, #1
 80026c4:	2390      	movs	r3, #144	; 0x90
 80026c6:	05d9      	lsls	r1, r3, #23
 80026c8:	4b68      	ldr	r3, [pc, #416]	; (800286c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 ff0e 	bl	80034ec <_ZN10sensorSideC1EP12GPIO_TypeDeft>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 80026d0:	4967      	ldr	r1, [pc, #412]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80026d2:	4b68      	ldr	r3, [pc, #416]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 ff08 	bl	80034ec <_ZN10sensorSideC1EP12GPIO_TypeDeft>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 80026dc:	4966      	ldr	r1, [pc, #408]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80026e0:	2204      	movs	r2, #4
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff fd3c 	bl	8002160 <_ZN3ledC1EP12GPIO_TypeDeft>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 80026e8:	4963      	ldr	r1, [pc, #396]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80026ea:	4b65      	ldr	r3, [pc, #404]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff fd36 	bl	8002160 <_ZN3ledC1EP12GPIO_TypeDeft>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 80026f4:	4960      	ldr	r1, [pc, #384]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80026f8:	2202      	movs	r2, #2
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fd30 	bl	8002160 <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8002700:	495b      	ldr	r1, [pc, #364]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002702:	4b61      	ldr	r3, [pc, #388]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff fd2a 	bl	8002160 <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 800270c:	4958      	ldr	r1, [pc, #352]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fd24 	bl	8002160 <_ZN3ledC1EP12GPIO_TypeDeft>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	011a      	lsls	r2, r3, #4
 800271c:	2390      	movs	r3, #144	; 0x90
 800271e:	05d9      	lsls	r1, r3, #23
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fb62 	bl	8001dec <_ZN6buttonC1EP12GPIO_TypeDeft>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 8002728:	4953      	ldr	r1, [pc, #332]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800272a:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff fc4c 	bl	8001fcc <_ZN7encoderC1EP12GPIO_TypeDeft>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	2390      	movs	r3, #144	; 0x90
 800273a:	05d9      	lsls	r1, r3, #23
 800273c:	4b56      	ldr	r3, [pc, #344]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff fc44 	bl	8001fcc <_ZN7encoderC1EP12GPIO_TypeDeft>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 8002744:	4a55      	ldr	r2, [pc, #340]	; (800289c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002746:	4956      	ldr	r1, [pc, #344]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002748:	4856      	ldr	r0, [pc, #344]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	01db      	lsls	r3, r3, #7
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	0013      	movs	r3, r2
 800275c:	2201      	movs	r2, #1
 800275e:	f000 f9e5 	bl	8002b2c <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 8002762:	4a43      	ldr	r2, [pc, #268]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002764:	4950      	ldr	r1, [pc, #320]	; (80028a8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002766:	4851      	ldr	r0, [pc, #324]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	4b4b      	ldr	r3, [pc, #300]	; (800289c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2301      	movs	r3, #1
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	0013      	movs	r3, r2
 8002778:	2201      	movs	r2, #1
 800277a:	f000 f9d7 	bl	8002b2c <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motorControl mdir(&m1, &enc1);
 800277e:	4a45      	ldr	r2, [pc, #276]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002780:	4948      	ldr	r1, [pc, #288]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002782:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002784:	0018      	movs	r0, r3
 8002786:	f000 faa1 	bl	8002ccc <_ZN12motorControlC1EP5motorP7encoder>
motorControl mesq(&m2, &enc2);
 800278a:	4a43      	ldr	r2, [pc, #268]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800278c:	4947      	ldr	r1, [pc, #284]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002790:	0018      	movs	r0, r3
 8002792:	f000 fa9b 	bl	8002ccc <_ZN12motorControlC1EP5motorP7encoder>
control ctr(&p);
 8002796:	4a34      	ldr	r2, [pc, #208]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8002798:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fb67 	bl	8001e70 <_ZN7controlC1EP8position>
map circuit;
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 f8a5 	bl	80028f4 <_ZN3mapC1Ev>
robot rufus(&ctr, &mdir, &mesq, &circuit);
 80027aa:	4c42      	ldr	r4, [pc, #264]	; (80028b4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80027ac:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80027ae:	4942      	ldr	r1, [pc, #264]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80027b0:	4843      	ldr	r0, [pc, #268]	; (80028c0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80027b2:	4b42      	ldr	r3, [pc, #264]	; (80028bc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	0023      	movs	r3, r4
 80027b8:	f000 fcc4 	bl	8003144 <_ZN5robotC1EP7controlP12motorControlS3_P3map>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d14b      	bne.n	800285a <_Z41__static_initialization_and_destruction_0ii+0x1be>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	4a27      	ldr	r2, [pc, #156]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d147      	bne.n	800285a <_Z41__static_initialization_and_destruction_0ii+0x1be>
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fcd9 	bl	8003184 <_ZN5robotD1Ev>
map circuit;
 80027d2:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 f89b 	bl	8002910 <_ZN3mapD1Ev>
control ctr(&p);
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff fb63 	bl	8001ea8 <_ZN7controlD1Ev>
motorControl mesq(&m2, &enc2);
 80027e2:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 fa87 	bl	8002cf8 <_ZN12motorControlD1Ev>
motorControl mdir(&m1, &enc1);
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fa83 	bl	8002cf8 <_ZN12motorControlD1Ev>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f9c3 	bl	8002b80 <_ZN5motorD1Ev>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 80027fa:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f9bf 	bl	8002b80 <_ZN5motorD1Ev>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff fc03 	bl	8002010 <_ZN7encoderD1Ev>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800280c:	0018      	movs	r0, r3
 800280e:	f7ff fbff 	bl	8002010 <_ZN7encoderD1Ev>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff fb01 	bl	8001e1c <_ZN6buttonD1Ev>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800281c:	0018      	movs	r0, r3
 800281e:	f7ff fcb7 	bl	8002190 <_ZN3ledD1Ev>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff fcb3 	bl	8002190 <_ZN3ledD1Ev>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff fcaf 	bl	8002190 <_ZN3ledD1Ev>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002834:	0018      	movs	r0, r3
 8002836:	f7ff fcab 	bl	8002190 <_ZN3ledD1Ev>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fca7 	bl	8002190 <_ZN3ledD1Ev>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fe6d 	bl	8003524 <_ZN10sensorSideD1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800284c:	0018      	movs	r0, r3
 800284e:	f000 fe69 	bl	8003524 <_ZN10sensorSideD1Ev>
position p;
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8002854:	0018      	movs	r0, r3
 8002856:	f000 facd 	bl	8002df4 <_ZN8positionD1Ev>
}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b003      	add	sp, #12
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	0000ffff 	.word	0x0000ffff
 8002868:	2000008c 	.word	0x2000008c
 800286c:	200000b4 	.word	0x200000b4
 8002870:	48001400 	.word	0x48001400
 8002874:	200000c0 	.word	0x200000c0
 8002878:	48000400 	.word	0x48000400
 800287c:	200000cc 	.word	0x200000cc
 8002880:	200000d8 	.word	0x200000d8
 8002884:	200000e4 	.word	0x200000e4
 8002888:	200000f0 	.word	0x200000f0
 800288c:	200000fc 	.word	0x200000fc
 8002890:	20000108 	.word	0x20000108
 8002894:	20000114 	.word	0x20000114
 8002898:	20000130 	.word	0x20000130
 800289c:	48000800 	.word	0x48000800
 80028a0:	200005e4 	.word	0x200005e4
 80028a4:	20000158 	.word	0x20000158
 80028a8:	200006fc 	.word	0x200006fc
 80028ac:	20000170 	.word	0x20000170
 80028b0:	20000188 	.word	0x20000188
 80028b4:	2000019c 	.word	0x2000019c
 80028b8:	200001b0 	.word	0x200001b0
 80028bc:	200001d4 	.word	0x200001d4
 80028c0:	20000578 	.word	0x20000578

080028c4 <_GLOBAL__sub_I_p>:
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <_GLOBAL__sub_I_p+0x14>)
 80028ca:	0019      	movs	r1, r3
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff fee5 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	0000ffff 	.word	0x0000ffff

080028dc <_GLOBAL__sub_D_p>:
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <_GLOBAL__sub_D_p+0x14>)
 80028e2:	0019      	movs	r1, r3
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff fed9 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	0000ffff 	.word	0x0000ffff

080028f4 <_ZN3mapC1Ev>:

static constexpr uint16_t rotationsMedia[TRACKS] = {

};

map::map() {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	4a03      	ldr	r2, [pc, #12]	; (800290c <_ZN3mapC1Ev+0x18>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}
 800290c:	08007334 	.word	0x08007334

08002910 <_ZN3mapD1Ev>:

map::~map() {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	4a03      	ldr	r2, [pc, #12]	; (8002928 <_ZN3mapD1Ev+0x18>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}
 8002928:	08007334 	.word	0x08007334

0800292c <_ZN3mapD0Ev>:
map::~map() {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
}
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f7ff ffea 	bl	8002910 <_ZN3mapD1Ev>
 800293c:	23e9      	movs	r3, #233	; 0xe9
 800293e:	009a      	lsls	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0011      	movs	r1, r2
 8002944:	0018      	movs	r0, r3
 8002946:	f004 fa41 	bl	8006dcc <_ZdlPvj>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <_ZN3map10InitTracksEv>:

void map::InitTracks() {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	4c54      	ldr	r4, [pc, #336]	; (8002aa8 <_ZN3map10InitTracksEv+0x154>)
 8002958:	44a5      	add	sp, r4
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
		60, 100, 80, 60, 100, 80, 60, 80, 60, 100,
		60, 80, 60, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 100
	};*/

	uint8_t auxHighSpeed[TRACKS] = {
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	18fa      	adds	r2, r7, r3
 8002964:	4b51      	ldr	r3, [pc, #324]	; (8002aac <_ZN3map10InitTracksEv+0x158>)
 8002966:	0010      	movs	r0, r2
 8002968:	0019      	movs	r1, r3
 800296a:	2354      	movs	r3, #84	; 0x54
 800296c:	001a      	movs	r2, r3
 800296e:	f004 fa63 	bl	8006e38 <memcpy>
		60, 80, 80, 60, 80, 80, 60, 80, 60, 80,
		60, 80, 60, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 80
	};

	uint8_t auxKp[TRACKS] = {
 8002972:	23d6      	movs	r3, #214	; 0xd6
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	18fa      	adds	r2, r7, r3
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <_ZN3map10InitTracksEv+0x15c>)
 800297a:	0010      	movs	r0, r2
 800297c:	0019      	movs	r1, r3
 800297e:	2354      	movs	r3, #84	; 0x54
 8002980:	001a      	movs	r2, r3
 8002982:	f004 fa59 	bl	8006e38 <memcpy>
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
		13, 13, 13, 13
	};

	uint8_t auxKd[TRACKS] = {
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <_ZN3map10InitTracksEv+0x160>)
 8002988:	2496      	movs	r4, #150	; 0x96
 800298a:	00a4      	lsls	r4, r4, #2
 800298c:	193a      	adds	r2, r7, r4
 800298e:	18d2      	adds	r2, r2, r3
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <_ZN3map10InitTracksEv+0x164>)
 8002992:	0010      	movs	r0, r2
 8002994:	0019      	movs	r1, r3
 8002996:	2354      	movs	r3, #84	; 0x54
 8002998:	001a      	movs	r2, r3
 800299a:	f004 fa4d 	bl	8006e38 <memcpy>
		130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
		130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
		130, 130, 130, 130
	};

	int16_t auxWaitChangeInit[TRACKS] = {
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <_ZN3map10InitTracksEv+0x168>)
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	18d2      	adds	r2, r2, r3
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <_ZN3map10InitTracksEv+0x16c>)
 80029a6:	0010      	movs	r0, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	23a8      	movs	r3, #168	; 0xa8
 80029ac:	001a      	movs	r2, r3
 80029ae:	f004 fa43 	bl	8006e38 <memcpy>
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10
	};

	uint16_t auxWaitChangeFinish[TRACKS] = {
 80029b2:	4b44      	ldr	r3, [pc, #272]	; (8002ac4 <_ZN3map10InitTracksEv+0x170>)
 80029b4:	193a      	adds	r2, r7, r4
 80029b6:	18d2      	adds	r2, r2, r3
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <_ZN3map10InitTracksEv+0x174>)
 80029ba:	0010      	movs	r0, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	23a8      	movs	r3, #168	; 0xa8
 80029c0:	001a      	movs	r2, r3
 80029c2:	f004 fa39 	bl	8006e38 <memcpy>
		90, 90, 90, 200
	};*/



	baseSpeed = 55;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2237      	movs	r2, #55	; 0x37
 80029ca:	711a      	strb	r2, [r3, #4]
	for (char i=0; i<TRACKS; i++) {
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <_ZN3map10InitTracksEv+0x178>)
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	483d      	ldr	r0, [pc, #244]	; (8002acc <_ZN3map10InitTracksEv+0x178>)
 80029d6:	183b      	adds	r3, r7, r0
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b53      	cmp	r3, #83	; 0x53
 80029dc:	d85d      	bhi.n	8002a9a <_ZN3map10InitTracksEv+0x146>
		//baseSpeed[i] = auxBaseSpeed[i];
		kp[i] = auxKp[i];
 80029de:	183b      	adds	r3, r7, r0
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	22d6      	movs	r2, #214	; 0xd6
 80029e4:	0052      	lsls	r2, r2, #1
 80029e6:	18ba      	adds	r2, r7, r2
 80029e8:	5cd2      	ldrb	r2, [r2, r3]
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b291      	uxth	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	332c      	adds	r3, #44	; 0x2c
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	3302      	adds	r3, #2
 80029fa:	1c0a      	adds	r2, r1, #0
 80029fc:	801a      	strh	r2, [r3, #0]
		kd[i] = auxKd[i];
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <_ZN3map10InitTracksEv+0x160>)
 8002a04:	2196      	movs	r1, #150	; 0x96
 8002a06:	0089      	lsls	r1, r1, #2
 8002a08:	468c      	mov	ip, r1
 8002a0a:	44bc      	add	ip, r7
 8002a0c:	4462      	add	r2, ip
 8002a0e:	5cd2      	ldrb	r2, [r2, r3]
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b291      	uxth	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	3380      	adds	r3, #128	; 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	3302      	adds	r3, #2
 8002a20:	1c0a      	adds	r2, r1, #0
 8002a22:	801a      	strh	r2, [r3, #0]
		highSpeed[i] = auxHighSpeed[i];
 8002a24:	0004      	movs	r4, r0
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0089      	lsls	r1, r1, #2
 8002a32:	1879      	adds	r1, r7, r1
 8002a34:	5c89      	ldrb	r1, [r1, r2]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	1c0a      	adds	r2, r1, #0
 8002a3c:	715a      	strb	r2, [r3, #5]
		//rotationsDir[i] = auxRotationsDir[i];
		//rotationsEsq[i] = auxRotationsEsq[i];
		waitChangeInit[i] = auxWaitChangeInit[i];
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <_ZN3map10InitTracksEv+0x168>)
 8002a44:	2196      	movs	r1, #150	; 0x96
 8002a46:	0089      	lsls	r1, r1, #2
 8002a48:	468c      	mov	ip, r1
 8002a4a:	44bc      	add	ip, r7
 8002a4c:	4463      	add	r3, ip
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	5ed1      	ldrsh	r1, [r2, r3]
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	b2c8      	uxtb	r0, r1
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	23d5      	movs	r3, #213	; 0xd5
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	188a      	adds	r2, r1, r2
 8002a60:	18d3      	adds	r3, r2, r3
 8002a62:	1c02      	adds	r2, r0, #0
 8002a64:	701a      	strb	r2, [r3, #0]
		waitChangeFinish[i] = auxWaitChangeFinish[i];
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <_ZN3map10InitTracksEv+0x170>)
 8002a6c:	2196      	movs	r1, #150	; 0x96
 8002a6e:	0089      	lsls	r1, r1, #2
 8002a70:	468c      	mov	ip, r1
 8002a72:	44bc      	add	ip, r7
 8002a74:	4463      	add	r3, ip
 8002a76:	0052      	lsls	r2, r2, #1
 8002a78:	5ad1      	ldrh	r1, [r2, r3]
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	b2c8      	uxtb	r0, r1
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	23ff      	movs	r3, #255	; 0xff
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	188a      	adds	r2, r1, r2
 8002a88:	18d3      	adds	r3, r2, r3
 8002a8a:	1c02      	adds	r2, r0, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	for (char i=0; i<TRACKS; i++) {
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	3201      	adds	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e79c      	b.n	80029d4 <_ZN3map10InitTracksEv+0x80>
	}
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	2397      	movs	r3, #151	; 0x97
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	449d      	add	sp, r3
 8002aa4:	bd90      	pop	{r4, r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	fffffda4 	.word	0xfffffda4
 8002aac:	08006f2c 	.word	0x08006f2c
 8002ab0:	08006f80 	.word	0x08006f80
 8002ab4:	ffffff00 	.word	0xffffff00
 8002ab8:	08006fd4 	.word	0x08006fd4
 8002abc:	fffffe58 	.word	0xfffffe58
 8002ac0:	08007028 	.word	0x08007028
 8002ac4:	fffffdb0 	.word	0xfffffdb0
 8002ac8:	080070d0 	.word	0x080070d0
 8002acc:	00000257 	.word	0x00000257

08002ad0 <_ZN3map17SetTrackRotationsEhtt>:

uint8_t map::GetKd(uint8_t pos) {
	return kd[pos];
}

void map::SetTrackRotations(uint8_t pos, uint16_t rotDir, uint16_t rotEsq) {
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	000c      	movs	r4, r1
 8002ada:	0010      	movs	r0, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	250b      	movs	r5, #11
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	1c22      	adds	r2, r4, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	2408      	movs	r4, #8
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	1c02      	adds	r2, r0, #0
 8002aec:	801a      	strh	r2, [r3, #0]
 8002aee:	1dbb      	adds	r3, r7, #6
 8002af0:	1c0a      	adds	r2, r1, #0
 8002af2:	801a      	strh	r2, [r3, #0]
	rotationsDir[pos] = rotDir;
 8002af4:	0029      	movs	r1, r5
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	3329      	adds	r3, #41	; 0x29
 8002afe:	33ff      	adds	r3, #255	; 0xff
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	3302      	adds	r3, #2
 8002b06:	193a      	adds	r2, r7, r4
 8002b08:	8812      	ldrh	r2, [r2, #0]
 8002b0a:	801a      	strh	r2, [r3, #0]
	rotationsEsq[pos] = rotEsq;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	337d      	adds	r3, #125	; 0x7d
 8002b14:	33ff      	adds	r3, #255	; 0xff
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	18d3      	adds	r3, r2, r3
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	1dba      	adds	r2, r7, #6
 8002b1e:	8812      	ldrh	r2, [r2, #0]
 8002b20:	801a      	strh	r2, [r3, #0]
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b2c <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>:
 *      Author: Lucas Martins
 */

#include "motor.h"

motor::motor(TIM_HandleTypeDef*  TIMER, uint8_t CHANNEL,  GPIO_TypeDef* PORT1, uint16_t PIN1, GPIO_TypeDef* PORT2, uint16_t PIN2) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t+0x50>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	channel = CHANNEL;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1dfa      	adds	r2, r7, #7
 8002b46:	7812      	ldrb	r2, [r2, #0]
 8002b48:	721a      	strb	r2, [r3, #8]
	timer = TIMER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	605a      	str	r2, [r3, #4]
	in1Port = PORT1;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	60da      	str	r2, [r3, #12]
	in2Port = PORT2;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	611a      	str	r2, [r3, #16]
	in1Pin = PIN1;
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	2318      	movs	r3, #24
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	8293      	strh	r3, [r2, #20]
	in2Pin = PIN2;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	18ba      	adds	r2, r7, r2
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	82da      	strh	r2, [r3, #22]
}
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	08007344 	.word	0x08007344

08002b80 <_ZN5motorD1Ev>:

motor::~motor() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <_ZN5motorD1Ev+0x18>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b002      	add	sp, #8
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	08007344 	.word	0x08007344

08002b9c <_ZN5motorD0Ev>:
motor::~motor() {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
}
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff ffea 	bl	8002b80 <_ZN5motorD1Ev>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2118      	movs	r1, #24
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f004 f90b 	bl	8006dcc <_ZdlPvj>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZN5motor3PWMEh>:



void motor::PWM(uint8_t pwm) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	1cfb      	adds	r3, r7, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
	if(pwm > 255) {
		pwm = 255;
	}
	if( channel == 1) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7a1b      	ldrb	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <_ZN5motor3PWMEh+0x24>
		timer->Instance->CCR1 = pwm;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1cfa      	adds	r2, r7, #3
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR3 = pwm;
	} else {
		timer->Instance->CCR4 = pwm;
	}

}
 8002be2:	e026      	b.n	8002c32 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7a1b      	ldrb	r3, [r3, #8]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d106      	bne.n	8002bfa <_ZN5motor3PWMEh+0x3a>
		timer->Instance->CCR2 = pwm;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1cfa      	adds	r2, r7, #3
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bf8:	e01b      	b.n	8002c32 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7a1b      	ldrb	r3, [r3, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d106      	bne.n	8002c10 <_ZN5motor3PWMEh+0x50>
		timer->Instance->CCR1 = pwm;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1cfa      	adds	r2, r7, #3
 8002c0a:	7812      	ldrb	r2, [r2, #0]
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c0e:	e010      	b.n	8002c32 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7a1b      	ldrb	r3, [r3, #8]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d106      	bne.n	8002c26 <_ZN5motor3PWMEh+0x66>
		timer->Instance->CCR3 = pwm;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1cfa      	adds	r2, r7, #3
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c24:	e005      	b.n	8002c32 <_ZN5motor3PWMEh+0x72>
		timer->Instance->CCR4 = pwm;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1cfa      	adds	r2, r7, #3
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b002      	add	sp, #8
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_ZN5motor2CWEv>:

void motor::CW() {
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_SET);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68d8      	ldr	r0, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8a9b      	ldrh	r3, [r3, #20]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	f002 fc0a 	bl	8005466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_RESET);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6918      	ldr	r0, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	8adb      	ldrh	r3, [r3, #22]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	f002 fc02 	bl	8005466 <HAL_GPIO_WritePin>
}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZN5motor3CCWEv>:

void motor::CCW() {
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_RESET);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68d8      	ldr	r0, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8a9b      	ldrh	r3, [r3, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	f002 fbf2 	bl	8005466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_SET);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6918      	ldr	r0, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8adb      	ldrh	r3, [r3, #22]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	f002 fbea 	bl	8005466 <HAL_GPIO_WritePin>
}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZN5motor10MotorBreakEv>:

void motor::MotorBreak() {
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_SET);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68d8      	ldr	r0, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8a9b      	ldrh	r3, [r3, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	0019      	movs	r1, r3
 8002cae:	f002 fbda 	bl	8005466 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_SET);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6918      	ldr	r0, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8adb      	ldrh	r3, [r3, #22]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	f002 fbd2 	bl	8005466 <HAL_GPIO_WritePin>
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <_ZN12motorControlC1EP5motorP7encoder>:
 *      Author: Lucas Martins
 */

#include <motorControl.h>

motorControl::motorControl(motor* M, encoder* E) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	4a06      	ldr	r2, [pc, #24]	; (8002cf4 <_ZN12motorControlC1EP5motorP7encoder+0x28>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	m = M;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	605a      	str	r2, [r3, #4]
	e = E;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	08007354 	.word	0x08007354

08002cf8 <_ZN12motorControlD1Ev>:

motorControl::~motorControl() {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <_ZN12motorControlD1Ev+0x18>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	08007354 	.word	0x08007354

08002d14 <_ZN12motorControlD0Ev>:
motorControl::~motorControl() {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
}
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7ff ffea 	bl	8002cf8 <_ZN12motorControlD1Ev>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2114      	movs	r1, #20
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f004 f84f 	bl	8006dcc <_ZdlPvj>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN12motorControl5SpeedEi>:
/*void motorControl::InitConsts(float KP, float KD) {
	kp = KP;
	kd = KD;
}*/

void motorControl::Speed(int speed)  {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
	if(speed >= 0) {
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db08      	blt.n	8002d5a <_ZN12motorControl5SpeedEi+0x22>
		m->CW();
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff ff74 	bl	8002c3a <_ZN5motor2CWEv>
		sinal = speed;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	60da      	str	r2, [r3, #12]
 8002d58:	e008      	b.n	8002d6c <_ZN12motorControl5SpeedEi+0x34>
	} else {
		m->CCW();
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff ff83 	bl	8002c6a <_ZN5motor3CCWEv>
		sinal = -speed;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	425a      	negs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
	error = sinal - (e->GetRps() / 6.0262783);
	errorDer = error - olderror;

	pid = kp*error + kd*errorDer;
	sinal+=(pid);*/
	m->PWM(sinal);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	0019      	movs	r1, r3
 8002d78:	0010      	movs	r0, r2
 8002d7a:	f7ff ff21 	bl	8002bc0 <_ZN5motor3PWMEh>
	sinal = speed;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	60da      	str	r2, [r3, #12]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZN12motorControl5BreakEv>:

void motorControl::Break() {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	m->MotorBreak();
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7ff ff7e 	bl	8002c9a <_ZN5motor10MotorBreakEv>
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZN12motorControl12GetRotationsEv>:

uint16_t motorControl::GetRotations() {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
	return e->GetRotation();
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff f9ca 	bl	800214c <_ZN7encoder11GetRotationEv>
 8002db8:	0003      	movs	r3, r0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_ZN12motorControl8GetSpeedEv>:

int motorControl::GetSpeed() {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	return sinal;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <_ZN8positionC1Ev>:
 *      Author: Lucas Martins
 */

#include "position.h"

position::position() {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <_ZN8positionC1Ev+0x18>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	08007364 	.word	0x08007364

08002df4 <_ZN8positionD1Ev>:

position::~position() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <_ZN8positionD1Ev+0x18>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	08007364 	.word	0x08007364

08002e10 <_ZN8positionD0Ev>:
position::~position() {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
}
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff ffea 	bl	8002df4 <_ZN8positionD1Ev>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2128      	movs	r1, #40	; 0x28
 8002e24:	0018      	movs	r0, r3
 8002e26:	f003 ffd1 	bl	8006dcc <_ZdlPvj>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_ZN8position9SetAnalogEPhi>:

void position::SetAnalog(uint8_t* array, int size) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	uint32_t aux;
	for(int i=0; i<CHANNELS; i++) {
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	dc37      	bgt.n	8002eba <_ZN8position9SetAnalogEPhi+0x86>
		aux = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2106      	movs	r1, #6
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7fd f9e0 	bl	800021c <__divsi3>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	001a      	movs	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	4293      	cmp	r3, r2
 8002e64:	da13      	bge.n	8002e8e <_ZN8position9SetAnalogEPhi+0x5a>
			aux = aux + array[i+j*CHANNELS];
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	001a      	movs	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	001a      	movs	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	001a      	movs	r2, r3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e7e1      	b.n	8002e52 <_ZN8position9SetAnalogEPhi+0x1e>
		}
		sensors_analog[i] = aux / (size/CHANNELS);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2106      	movs	r1, #6
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7fd f9c2 	bl	800021c <__divsi3>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	69f8      	ldr	r0, [r7, #28]
 8002e9e:	f7fd f933 	bl	8000108 <__udivsi3>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	b2d9      	uxtb	r1, r3
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	331a      	adds	r3, #26
 8002eae:	1c0a      	adds	r2, r1, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e7c4      	b.n	8002e44 <_ZN8position9SetAnalogEPhi+0x10>
	}
	SetSensors();
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 f87d 	bl	8002fbc <_ZN8position10SetSensorsEv>
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b008      	add	sp, #32
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN8position15InitCalibrationEv>:

void position::InitCalibration() {
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	dc15      	bgt.n	8002f08 <_ZN8position15InitCalibrationEv+0x3e>
		max[i] = 0;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	18d3      	adds	r3, r2, r3
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
		min[i] = 255;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	18d3      	adds	r3, r2, r3
 8002eee:	330e      	adds	r3, #14
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	701a      	strb	r2, [r3, #0]
		med[i] = 0;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	3308      	adds	r3, #8
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e7e6      	b.n	8002ed6 <_ZN8position15InitCalibrationEv+0xc>
	}
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b004      	add	sp, #16
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN8position16CalibrateSensorsEv>:

void position::CalibrateSensors() {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	dc48      	bgt.n	8002fb4 <_ZN8position16CalibrateSensorsEv+0xa4>
		if(sensors_analog[i] > max[i]){
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	331a      	adds	r3, #26
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	18cb      	adds	r3, r1, r3
 8002f32:	3314      	adds	r3, #20
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90a      	bls.n	8002f50 <_ZN8position16CalibrateSensorsEv+0x40>
			max[i] = sensors_analog[i];
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	331a      	adds	r3, #26
 8002f42:	7819      	ldrb	r1, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	1c0a      	adds	r2, r1, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
		}
		if(sensors_analog[i] < min[i]) {
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	331a      	adds	r3, #26
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	18cb      	adds	r3, r1, r3
 8002f60:	330e      	adds	r3, #14
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d20a      	bcs.n	8002f7e <_ZN8position16CalibrateSensorsEv+0x6e>
			min[i] = sensors_analog[i];
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	331a      	adds	r3, #26
 8002f70:	7819      	ldrb	r1, [r3, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	330e      	adds	r3, #14
 8002f7a:	1c0a      	adds	r2, r1, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
		}
		med[i] = (max[i] + min[i]) / 2;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	18d3      	adds	r3, r2, r3
 8002f84:	3314      	adds	r3, #20
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	330e      	adds	r3, #14
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	18cb      	adds	r3, r1, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da00      	bge.n	8002f9c <_ZN8position16CalibrateSensorsEv+0x8c>
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	105b      	asrs	r3, r3, #1
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	1c0a      	adds	r2, r1, #0
 8002faa:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e7b3      	b.n	8002f1c <_ZN8position16CalibrateSensorsEv+0xc>
	}
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_ZN8position10SetSensorsEv>:

void position::SetSensors() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	dc1e      	bgt.n	800300c <_ZN8position10SetSensorsEv+0x50>
		if(sensors_analog[i] < med[i]){
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	331a      	adds	r3, #26
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	18cb      	adds	r3, r1, r3
 8002fde:	3308      	adds	r3, #8
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d207      	bcs.n	8002ff6 <_ZN8position10SetSensorsEv+0x3a>
			sensors[i] = 1;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	2120      	movs	r1, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	185b      	adds	r3, r3, r1
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e006      	b.n	8003004 <_ZN8position10SetSensorsEv+0x48>
		} else {
			sensors[i] = 0;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	18d3      	adds	r3, r2, r3
 8002ffe:	185b      	adds	r3, r3, r1
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e7dd      	b.n	8002fc8 <_ZN8position10SetSensorsEv+0xc>
		}
	}
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bd80      	pop	{r7, pc}

08003014 <_ZN8position14DefinePositionEv>:

int position::DefinePosition() {
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	if(sensors[2] && sensors[3]) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2222      	movs	r2, #34	; 0x22
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <_ZN8position14DefinePositionEv+0x26>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2223      	movs	r2, #35	; 0x23
 800302a:	5c9b      	ldrb	r3, [r3, r2]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <_ZN8position14DefinePositionEv+0x26>
		oldPos = 0;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	605a      	str	r2, [r3, #4]
		return 0;
 8003036:	2300      	movs	r3, #0
 8003038:	e080      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3] && sensors[4]) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2223      	movs	r2, #35	; 0x23
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <_ZN8position14DefinePositionEv+0x44>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	5c9b      	ldrb	r3, [r3, r2]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <_ZN8position14DefinePositionEv+0x44>
		oldPos = 2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	605a      	str	r2, [r3, #4]
		return 2;
 8003054:	2302      	movs	r3, #2
 8003056:	e071      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1] && sensors[2]) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2221      	movs	r2, #33	; 0x21
 800305c:	5c9b      	ldrb	r3, [r3, r2]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <_ZN8position14DefinePositionEv+0x66>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2222      	movs	r2, #34	; 0x22
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <_ZN8position14DefinePositionEv+0x66>
		oldPos = -2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	4252      	negs	r2, r2
 8003072:	605a      	str	r2, [r3, #4]
		return -2;
 8003074:	2302      	movs	r3, #2
 8003076:	425b      	negs	r3, r3
 8003078:	e060      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4] && sensors[5]) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2224      	movs	r2, #36	; 0x24
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <_ZN8position14DefinePositionEv+0x84>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2225      	movs	r2, #37	; 0x25
 8003088:	5c9b      	ldrb	r3, [r3, r2]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <_ZN8position14DefinePositionEv+0x84>
		oldPos = 4;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	605a      	str	r2, [r3, #4]
		return 4;
 8003094:	2304      	movs	r3, #4
 8003096:	e051      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0] && sensors[1]) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <_ZN8position14DefinePositionEv+0xa6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2221      	movs	r2, #33	; 0x21
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <_ZN8position14DefinePositionEv+0xa6>
		oldPos = -4;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	4252      	negs	r2, r2
 80030b2:	605a      	str	r2, [r3, #4]
		return -4;
 80030b4:	2304      	movs	r3, #4
 80030b6:	425b      	negs	r3, r3
 80030b8:	e040      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3]) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2223      	movs	r2, #35	; 0x23
 80030be:	5c9b      	ldrb	r3, [r3, r2]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <_ZN8position14DefinePositionEv+0xba>
		oldPos = 1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	605a      	str	r2, [r3, #4]
		return 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e036      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[2]) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2222      	movs	r2, #34	; 0x22
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <_ZN8position14DefinePositionEv+0xd2>
		oldPos = -1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	4252      	negs	r2, r2
 80030de:	605a      	str	r2, [r3, #4]
		return -1;
 80030e0:	2301      	movs	r3, #1
 80030e2:	425b      	negs	r3, r3
 80030e4:	e02a      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4]) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2224      	movs	r2, #36	; 0x24
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d004      	beq.n	80030fa <_ZN8position14DefinePositionEv+0xe6>
		oldPos = 3;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2203      	movs	r2, #3
 80030f4:	605a      	str	r2, [r3, #4]
		return 3;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e020      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1]) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2221      	movs	r2, #33	; 0x21
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <_ZN8position14DefinePositionEv+0xfe>
		oldPos = -3;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	4252      	negs	r2, r2
 800310a:	605a      	str	r2, [r3, #4]
		return -3;
 800310c:	2303      	movs	r3, #3
 800310e:	425b      	negs	r3, r3
 8003110:	e014      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[5]) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2225      	movs	r2, #37	; 0x25
 8003116:	5c9b      	ldrb	r3, [r3, r2]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <_ZN8position14DefinePositionEv+0x10c>
		return 5;
 800311c:	2305      	movs	r3, #5
 800311e:	e00d      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0]) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	5c9b      	ldrb	r3, [r3, r2]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <_ZN8position14DefinePositionEv+0x124>
		oldPos = -5;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2205      	movs	r2, #5
 800312e:	4252      	negs	r2, r2
 8003130:	605a      	str	r2, [r3, #4]
		return -5;
 8003132:	2305      	movs	r3, #5
 8003134:	425b      	negs	r3, r3
 8003136:	e001      	b.n	800313c <_ZN8position14DefinePositionEv+0x128>
	}
	return oldPos;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <_ZN5robotC1EP7controlP12motorControlS3_P3map>:
 *      Author: Lucas Martins
 */

#include "robot.h"

robot::robot(control* CTR, motorControl* MDIR, motorControl* MESQ, map* CIRCUIT) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <_ZN5robotC1EP7controlP12motorControlS3_P3map+0x3c>)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ctr = CTR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	605a      	str	r2, [r3, #4]
	mdir = MDIR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	609a      	str	r2, [r3, #8]
	mesq = MESQ;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	60da      	str	r2, [r3, #12]
	circuit = CIRCUIT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	611a      	str	r2, [r3, #16]
	sum = 0;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	08007374 	.word	0x08007374

08003184 <_ZN5robotD1Ev>:

robot::~robot() {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	4a03      	ldr	r2, [pc, #12]	; (800319c <_ZN5robotD1Ev+0x18>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}
 800319c:	08007374 	.word	0x08007374

080031a0 <_ZN5robotD0Ev>:
robot::~robot() {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
}
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff ffea 	bl	8003184 <_ZN5robotD1Ev>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	213c      	movs	r1, #60	; 0x3c
 80031b4:	0018      	movs	r0, r3
 80031b6:	f003 fe09 	bl	8006dcc <_ZdlPvj>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b002      	add	sp, #8
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_ZN5robot7RunningEv>:
	} else {
		return -val;
	}
}

void robot::Running() {
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	velDir = velBase + ctr->PIDValue();
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fd ffb1 	bl	8001138 <__aeabi_i2f>
 80031d6:	1c04      	adds	r4, r0, #0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7fe feb1 	bl	8001f44 <_ZN7control8PIDValueEv>
 80031e2:	1c03      	adds	r3, r0, #0
 80031e4:	1c19      	adds	r1, r3, #0
 80031e6:	1c20      	adds	r0, r4, #0
 80031e8:	f7fd f93e 	bl	8000468 <__aeabi_fadd>
 80031ec:	1c03      	adds	r3, r0, #0
 80031ee:	1c1a      	adds	r2, r3, #0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	61da      	str	r2, [r3, #28]
	velEsq = velBase - ctr->PIDValue();
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fd ff9d 	bl	8001138 <__aeabi_i2f>
 80031fe:	1c04      	adds	r4, r0, #0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f7fe fe9d 	bl	8001f44 <_ZN7control8PIDValueEv>
 800320a:	1c03      	adds	r3, r0, #0
 800320c:	1c19      	adds	r1, r3, #0
 800320e:	1c20      	adds	r0, r4, #0
 8003210:	f7fd fdaa 	bl	8000d68 <__aeabi_fsub>
 8003214:	1c03      	adds	r3, r0, #0
 8003216:	1c1a      	adds	r2, r3, #0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	621a      	str	r2, [r3, #32]
	if(velDir > velMax) {
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69dc      	ldr	r4, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	0018      	movs	r0, r3
 8003226:	f7fd ff87 	bl	8001138 <__aeabi_i2f>
 800322a:	1c03      	adds	r3, r0, #0
 800322c:	1c19      	adds	r1, r3, #0
 800322e:	1c20      	adds	r0, r4, #0
 8003230:	f7fd f906 	bl	8000440 <__aeabi_fcmpgt>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d007      	beq.n	8003248 <_ZN5robot7RunningEv+0x84>
		velDir = velMax;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff7b 	bl	8001138 <__aeabi_i2f>
 8003242:	1c02      	adds	r2, r0, #0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	61da      	str	r2, [r3, #28]
	}
	if(velEsq > velMax) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1c      	ldr	r4, [r3, #32]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	0018      	movs	r0, r3
 8003252:	f7fd ff71 	bl	8001138 <__aeabi_i2f>
 8003256:	1c03      	adds	r3, r0, #0
 8003258:	1c19      	adds	r1, r3, #0
 800325a:	1c20      	adds	r0, r4, #0
 800325c:	f7fd f8f0 	bl	8000440 <__aeabi_fcmpgt>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d007      	beq.n	8003274 <_ZN5robot7RunningEv+0xb0>
		velEsq = velMax;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	0018      	movs	r0, r3
 800326a:	f7fd ff65 	bl	8001138 <__aeabi_i2f>
 800326e:	1c02      	adds	r2, r0, #0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]
	}
	mdir->Speed(velDir);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689c      	ldr	r4, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	1c18      	adds	r0, r3, #0
 800327e:	f7fd ff3b 	bl	80010f8 <__aeabi_f2iz>
 8003282:	0003      	movs	r3, r0
 8003284:	0019      	movs	r1, r3
 8003286:	0020      	movs	r0, r4
 8003288:	f7ff fd56 	bl	8002d38 <_ZN12motorControl5SpeedEi>
	mesq->Speed(velEsq);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68dc      	ldr	r4, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	1c18      	adds	r0, r3, #0
 8003296:	f7fd ff2f 	bl	80010f8 <__aeabi_f2iz>
 800329a:	0003      	movs	r3, r0
 800329c:	0019      	movs	r1, r3
 800329e:	0020      	movs	r0, r4
 80032a0:	f7ff fd4a 	bl	8002d38 <_ZN12motorControl5SpeedEi>
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b003      	add	sp, #12
 80032aa:	bd90      	pop	{r4, r7, pc}

080032ac <_ZN5robot6FinishEPm>:

void robot::Finish(uint32_t* z) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	*z = 0;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
	while(*z < 1000) {
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	23fa      	movs	r3, #250	; 0xfa
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d20c      	bcs.n	80032e2 <_ZN5robot6FinishEPm+0x36>
		mdir->Speed(70);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2146      	movs	r1, #70	; 0x46
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff fd32 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		mesq->Speed(70);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2146      	movs	r1, #70	; 0x46
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff fd2c 	bl	8002d38 <_ZN12motorControl5SpeedEi>
	while(*z < 1000) {
 80032e0:	e7ec      	b.n	80032bc <_ZN5robot6FinishEPm+0x10>
	}
	*z = 60000;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4a07      	ldr	r2, [pc, #28]	; (8003304 <_ZN5robot6FinishEPm+0x58>)
 80032e6:	601a      	str	r2, [r3, #0]
	mdir->Break();
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff fd4d 	bl	8002d8c <_ZN12motorControl5BreakEv>
	mesq->Break();
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fd48 	bl	8002d8c <_ZN12motorControl5BreakEv>
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	0000ea60 	.word	0x0000ea60

08003308 <_ZN5robot9CalibrateEPm>:

void robot::Calibrate(uint32_t* z) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	ctr->p->InitCalibration();
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fdd6 	bl	8002eca <_ZN8position15InitCalibrationEv>
	*z = 0;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
	while(*z < 3000) {
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a38      	ldr	r2, [pc, #224]	; (800340c <_ZN5robot9CalibrateEPm+0x104>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d812      	bhi.n	8003354 <_ZN5robot9CalibrateEPm+0x4c>
		mdir->Speed(75);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	214b      	movs	r1, #75	; 0x4b
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fcff 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2100      	movs	r1, #0
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fcf9 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fddf 	bl	8002f10 <_ZN8position16CalibrateSensorsEv>
	while(*z < 3000) {
 8003352:	e7e7      	b.n	8003324 <_ZN5robot9CalibrateEPm+0x1c>
	}
	mdir->Break();
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff fd17 	bl	8002d8c <_ZN12motorControl5BreakEv>
	mesq->Break();
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	0018      	movs	r0, r3
 8003364:	f7ff fd12 	bl	8002d8c <_ZN12motorControl5BreakEv>
	while(*z < 8000) {
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	23fa      	movs	r3, #250	; 0xfa
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	429a      	cmp	r2, r3
 8003372:	d214      	bcs.n	800339e <_ZN5robot9CalibrateEPm+0x96>
		mdir->Speed(-75);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	224b      	movs	r2, #75	; 0x4b
 800337a:	4252      	negs	r2, r2
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff fcda 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2100      	movs	r1, #0
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff fcd4 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fdba 	bl	8002f10 <_ZN8position16CalibrateSensorsEv>
	while(*z < 8000) {
 800339c:	e7e4      	b.n	8003368 <_ZN5robot9CalibrateEPm+0x60>
	}
	mdir->Break();
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff fcf2 	bl	8002d8c <_ZN12motorControl5BreakEv>
	mesq->Break();
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff fced 	bl	8002d8c <_ZN12motorControl5BreakEv>
	while(*z < 12000) {
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <_ZN5robot9CalibrateEPm+0x108>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d812      	bhi.n	80033e2 <_ZN5robot9CalibrateEPm+0xda>
		mdir->Speed(75);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	214b      	movs	r1, #75	; 0x4b
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7ff fcb8 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2100      	movs	r1, #0
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7ff fcb2 	bl	8002d38 <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff fd98 	bl	8002f10 <_ZN8position16CalibrateSensorsEv>
	while(*z < 12000) {
 80033e0:	e7e7      	b.n	80033b2 <_ZN5robot9CalibrateEPm+0xaa>
	}

	*z = 60000;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <_ZN5robot9CalibrateEPm+0x10c>)
 80033e6:	601a      	str	r2, [r3, #0]
	mdir->Break();
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff fccd 	bl	8002d8c <_ZN12motorControl5BreakEv>
	mesq->Break();
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fcc8 	bl	8002d8c <_ZN12motorControl5BreakEv>
	pos = 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	751a      	strb	r2, [r3, #20]
}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	b002      	add	sp, #8
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	00000bb7 	.word	0x00000bb7
 8003410:	00002edf 	.word	0x00002edf
 8003414:	0000ea60 	.word	0x0000ea60

08003418 <_ZN5robot11GetPositionEv>:

int robot::GetPosition() {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	return pos;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7d1b      	ldrb	r3, [r3, #20]
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <_ZN5robot9NextStateEv>:

void robot::NextState() {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	pos++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7d1b      	ldrb	r3, [r3, #20]
 8003438:	3301      	adds	r3, #1
 800343a:	b2da      	uxtb	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	751a      	strb	r2, [r3, #20]
	ChangeTrack();
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f804 	bl	8003450 <_ZN5robot11ChangeTrackEv>
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZN5robot11ChangeTrackEv>:

void robot::ChangeTrack() {
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	if(pos != 0) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7d1b      	ldrb	r3, [r3, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <_ZN5robot11ChangeTrackEv+0x40>
		circuit->SetTrackRotations((pos-1), mdir->GetRotations(), mesq->GetRotations());
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691c      	ldr	r4, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7d1b      	ldrb	r3, [r3, #20]
 8003468:	3b01      	subs	r3, #1
 800346a:	b2dd      	uxtb	r5, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff fc98 	bl	8002da6 <_ZN12motorControl12GetRotationsEv>
 8003476:	0003      	movs	r3, r0
 8003478:	001e      	movs	r6, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	0018      	movs	r0, r3
 8003480:	f7ff fc91 	bl	8002da6 <_ZN12motorControl12GetRotationsEv>
 8003484:	0003      	movs	r3, r0
 8003486:	0032      	movs	r2, r6
 8003488:	0029      	movs	r1, r5
 800348a:	0020      	movs	r0, r4
 800348c:	f7ff fb20 	bl	8002ad0 <_ZN3map17SetTrackRotationsEhtt>
	}
	//velMax = 150;
	velBase = 55 + sum;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	3337      	adds	r3, #55	; 0x37
 8003496:	001a      	movs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
	velMax = 150;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2296      	movs	r2, #150	; 0x96
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
	//velBase = circuit->baseSpeed + sum;
	ctr->setConsts(13, 130);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2282      	movs	r2, #130	; 0x82
 80034a8:	210d      	movs	r1, #13
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fe fd1c 	bl	8001ee8 <_ZN7control9setConstsEhh>
	//velBase = circuit->GetBaseSpeed() + sum;
	//ctr->setConsts(circuit->GetKp(pos), circuit->GetKd(pos));
	//ctr->setKD(circuit->GetKd(pos));
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b003      	add	sp, #12
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034b8 <_ZN5robot7sumPlusEv>:
	if(((mdir->GetRotations() + mesq->GetRotations()) / 2) > (circuit->GetWaitChangeFinish(pos)*circuit->GetRotations(pos))) {
		velBase = circuit->GetBaseSpeed() + sum;
	}
}

void robot::sumPlus() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	sum++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZN5robot7sumLessEv>:

void robot::sumLess() {
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	sum--;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	619a      	str	r2, [r3, #24]
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZN10sensorSideC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "sensorSide.h"

sensorSide::sensorSide(GPIO_TypeDef* PORT, uint16_t PIN) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	1dbb      	adds	r3, r7, #6
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <_ZN10sensorSideC1EP12GPIO_TypeDeft+0x34>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	609a      	str	r2, [r3, #8]
	pin = PIN;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1dba      	adds	r2, r7, #6
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	80da      	strh	r2, [r3, #6]
	track = 0;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	711a      	strb	r2, [r3, #4]
}
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	08007384 	.word	0x08007384

08003524 <_ZN10sensorSideD1Ev>:

sensorSide::~sensorSide() {
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	4a03      	ldr	r2, [pc, #12]	; (800353c <_ZN10sensorSideD1Ev+0x18>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}
 800353c:	08007384 	.word	0x08007384

08003540 <_ZN10sensorSideD0Ev>:
sensorSide::~sensorSide() {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
}
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f7ff ffea 	bl	8003524 <_ZN10sensorSideD1Ev>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	210c      	movs	r1, #12
 8003554:	0018      	movs	r0, r3
 8003556:	f003 fc39 	bl	8006dcc <_ZdlPvj>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN10sensorSide9NextTrackEv>:

void sensorSide::InitTrack() {
	track = 0;
}

void sensorSide::NextTrack() {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	track++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	791b      	ldrb	r3, [r3, #4]
 8003570:	3301      	adds	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	711a      	strb	r2, [r3, #4]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}

08003580 <_ZN10sensorSide12CurrentTrackEv>:

uint8_t sensorSide::CurrentTrack() {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	return track;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	791b      	ldrb	r3, [r3, #4]
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN10sensorSide6GetPinEv>:

uint16_t sensorSide::GetPin() {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	return pin;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	88db      	ldrh	r3, [r3, #6]
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZN10sensorSide5StateEv>:

GPIO_PinState sensorSide::State() {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(port, pin);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	88db      	ldrh	r3, [r3, #6]
 80035b8:	0019      	movs	r1, r3
 80035ba:	0010      	movs	r0, r2
 80035bc:	f001 ff36 	bl	800542c <HAL_GPIO_ReadPin>
 80035c0:	0003      	movs	r3, r0
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t adcArray[BUFFER], check;
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	ADC_Interrupt(adcArray, BUFFER);
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80035d6:	212a      	movs	r1, #42	; 0x2a
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fe fe81 	bl	80022e0 <ADC_Interrupt>
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	200005b8 	.word	0x200005b8

080035ec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1) {
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d101      	bne.n	8003600 <HAL_TIM_PeriodElapsedCallback+0x14>
	  TIM1_Interrupt();
 80035fc:	f7fe fe88 	bl	8002310 <TIM1_Interrupt>
  }
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000630 	.word	0x20000630

0800360c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003610:	f000 fd8a 	bl	8004128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003614:	f000 f832 	bl	800367c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003618:	f000 fa94 	bl	8003b44 <MX_GPIO_Init>
  MX_DMA_Init();
 800361c:	f000 fa74 	bl	8003b08 <MX_DMA_Init>
  MX_ADC_Init();
 8003620:	f000 f876 	bl	8003710 <MX_ADC_Init>
  MX_TIM1_Init();
 8003624:	f000 f910 	bl	8003848 <MX_TIM1_Init>
  MX_TIM16_Init();
 8003628:	f000 f966 	bl	80038f8 <MX_TIM16_Init>
  MX_TIM17_Init();
 800362c:	f000 f9e8 	bl	8003a00 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <main+0x5c>)
 8003632:	0018      	movs	r0, r3
 8003634:	f001 fa6c 	bl	8004b10 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcArray, BUFFER);
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <main+0x60>)
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <main+0x5c>)
 800363c:	222a      	movs	r2, #42	; 0x2a
 800363e:	0018      	movs	r0, r3
 8003640:	f000 ff16 	bl	8004470 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <main+0x64>)
 8003646:	0018      	movs	r0, r3
 8003648:	f002 fbe2 	bl	8005e10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <main+0x68>)
 800364e:	2100      	movs	r1, #0
 8003650:	0018      	movs	r0, r3
 8003652:	f002 fc7b 	bl	8005f4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <main+0x6c>)
 8003658:	2100      	movs	r1, #0
 800365a:	0018      	movs	r0, r3
 800365c:	f002 fc76 	bl	8005f4c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CppMain();
 8003660:	f7fe fdd6 	bl	8002210 <CppMain>
 8003664:	e7fc      	b.n	8003660 <main+0x54>
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200006bc 	.word	0x200006bc
 800366c:	200005b8 	.word	0x200005b8
 8003670:	20000630 	.word	0x20000630
 8003674:	200006fc 	.word	0x200006fc
 8003678:	200005e4 	.word	0x200005e4

0800367c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b091      	sub	sp, #68	; 0x44
 8003680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003682:	2410      	movs	r4, #16
 8003684:	193b      	adds	r3, r7, r4
 8003686:	0018      	movs	r0, r3
 8003688:	2330      	movs	r3, #48	; 0x30
 800368a:	001a      	movs	r2, r3
 800368c:	2100      	movs	r1, #0
 800368e:	f003 fbdc 	bl	8006e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003692:	003b      	movs	r3, r7
 8003694:	0018      	movs	r0, r3
 8003696:	2310      	movs	r3, #16
 8003698:	001a      	movs	r2, r3
 800369a:	2100      	movs	r1, #0
 800369c:	f003 fbd5 	bl	8006e4a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036a0:	0021      	movs	r1, r4
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	2201      	movs	r2, #1
 80036ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2210      	movs	r2, #16
 80036b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2202      	movs	r2, #2
 80036b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	22a0      	movs	r2, #160	; 0xa0
 80036c4:	0392      	lsls	r2, r2, #14
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	2200      	movs	r2, #0
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	0018      	movs	r0, r3
 80036d2:	f001 ff01 	bl	80054d8 <HAL_RCC_OscConfig>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d001      	beq.n	80036de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80036da:	f000 fb23 	bl	8003d24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036de:	003b      	movs	r3, r7
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036e4:	003b      	movs	r3, r7
 80036e6:	2202      	movs	r2, #2
 80036e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036ea:	003b      	movs	r3, r7
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036f0:	003b      	movs	r3, r7
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036f6:	003b      	movs	r3, r7
 80036f8:	2101      	movs	r1, #1
 80036fa:	0018      	movs	r0, r3
 80036fc:	f002 fa06 	bl	8005b0c <HAL_RCC_ClockConfig>
 8003700:	1e03      	subs	r3, r0, #0
 8003702:	d001      	beq.n	8003708 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003704:	f000 fb0e 	bl	8003d24 <Error_Handler>
  }
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b011      	add	sp, #68	; 0x44
 800370e:	bd90      	pop	{r4, r7, pc}

08003710 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	0018      	movs	r0, r3
 800371a:	230c      	movs	r3, #12
 800371c:	001a      	movs	r2, r3
 800371e:	2100      	movs	r1, #0
 8003720:	f003 fb93 	bl	8006e4a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <MX_ADC_Init+0x130>)
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <MX_ADC_Init+0x134>)
 8003728:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800372a:	4b45      	ldr	r3, [pc, #276]	; (8003840 <MX_ADC_Init+0x130>)
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	0612      	lsls	r2, r2, #24
 8003730:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <MX_ADC_Init+0x130>)
 8003734:	2210      	movs	r2, #16
 8003736:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <MX_ADC_Init+0x130>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <MX_ADC_Init+0x130>)
 8003740:	2201      	movs	r2, #1
 8003742:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <MX_ADC_Init+0x130>)
 8003746:	2208      	movs	r2, #8
 8003748:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <MX_ADC_Init+0x130>)
 800374c:	2200      	movs	r2, #0
 800374e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003750:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <MX_ADC_Init+0x130>)
 8003752:	2200      	movs	r2, #0
 8003754:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <MX_ADC_Init+0x130>)
 8003758:	2201      	movs	r2, #1
 800375a:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <MX_ADC_Init+0x130>)
 800375e:	2200      	movs	r2, #0
 8003760:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <MX_ADC_Init+0x130>)
 8003764:	22c2      	movs	r2, #194	; 0xc2
 8003766:	32ff      	adds	r2, #255	; 0xff
 8003768:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800376a:	4b35      	ldr	r3, [pc, #212]	; (8003840 <MX_ADC_Init+0x130>)
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003770:	4b33      	ldr	r3, [pc, #204]	; (8003840 <MX_ADC_Init+0x130>)
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <MX_ADC_Init+0x130>)
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <MX_ADC_Init+0x130>)
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fd35 	bl	80041f0 <HAL_ADC_Init>
 8003786:	1e03      	subs	r3, r0, #0
 8003788:	d001      	beq.n	800378e <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 800378a:	f000 facb 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	0152      	lsls	r2, r2, #5
 800379a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	2204      	movs	r2, #4
 80037a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80037a2:	1d3a      	adds	r2, r7, #4
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <MX_ADC_Init+0x130>)
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 ffb3 	bl	8004714 <HAL_ADC_ConfigChannel>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d001      	beq.n	80037b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80037b2:	f000 fab7 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2202      	movs	r2, #2
 80037ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80037bc:	1d3a      	adds	r2, r7, #4
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <MX_ADC_Init+0x130>)
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 ffa6 	bl	8004714 <HAL_ADC_ConfigChannel>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d001      	beq.n	80037d0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80037cc:	f000 faaa 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2203      	movs	r2, #3
 80037d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80037d6:	1d3a      	adds	r2, r7, #4
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <MX_ADC_Init+0x130>)
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 ff99 	bl	8004714 <HAL_ADC_ConfigChannel>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d001      	beq.n	80037ea <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80037e6:	f000 fa9d 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	2204      	movs	r2, #4
 80037ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80037f0:	1d3a      	adds	r2, r7, #4
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <MX_ADC_Init+0x130>)
 80037f4:	0011      	movs	r1, r2
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 ff8c 	bl	8004714 <HAL_ADC_ConfigChannel>
 80037fc:	1e03      	subs	r3, r0, #0
 80037fe:	d001      	beq.n	8003804 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8003800:	f000 fa90 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	2205      	movs	r2, #5
 8003808:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800380a:	1d3a      	adds	r2, r7, #4
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <MX_ADC_Init+0x130>)
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f000 ff7f 	bl	8004714 <HAL_ADC_ConfigChannel>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800381a:	f000 fa83 	bl	8003d24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	2206      	movs	r2, #6
 8003822:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003824:	1d3a      	adds	r2, r7, #4
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <MX_ADC_Init+0x130>)
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 ff72 	bl	8004714 <HAL_ADC_ConfigChannel>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d001      	beq.n	8003838 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8003834:	f000 fa76 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003838:	46c0      	nop			; (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b004      	add	sp, #16
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200006bc 	.word	0x200006bc
 8003844:	40012400 	.word	0x40012400

08003848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384e:	2308      	movs	r3, #8
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	0018      	movs	r0, r3
 8003854:	2310      	movs	r3, #16
 8003856:	001a      	movs	r2, r3
 8003858:	2100      	movs	r1, #0
 800385a:	f003 faf6 	bl	8006e4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385e:	003b      	movs	r3, r7
 8003860:	0018      	movs	r0, r3
 8003862:	2308      	movs	r3, #8
 8003864:	001a      	movs	r2, r3
 8003866:	2100      	movs	r1, #0
 8003868:	f003 faef 	bl	8006e4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <MX_TIM1_Init+0xa8>)
 800386e:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <MX_TIM1_Init+0xac>)
 8003870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <MX_TIM1_Init+0xa8>)
 8003874:	22e0      	movs	r2, #224	; 0xe0
 8003876:	32ff      	adds	r2, #255	; 0xff
 8003878:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <MX_TIM1_Init+0xa8>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14;
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <MX_TIM1_Init+0xa8>)
 8003882:	220e      	movs	r2, #14
 8003884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003886:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <MX_TIM1_Init+0xa8>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800388c:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <MX_TIM1_Init+0xa8>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <MX_TIM1_Init+0xa8>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <MX_TIM1_Init+0xa8>)
 800389a:	0018      	movs	r0, r3
 800389c:	f002 fa68 	bl	8005d70 <HAL_TIM_Base_Init>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80038a4:	f000 fa3e 	bl	8003d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a8:	2108      	movs	r1, #8
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	0152      	lsls	r2, r2, #5
 80038b0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038b2:	187a      	adds	r2, r7, r1
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <MX_TIM1_Init+0xa8>)
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f002 fdc9 	bl	8006450 <HAL_TIM_ConfigClockSource>
 80038be:	1e03      	subs	r3, r0, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80038c2:	f000 fa2f 	bl	8003d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038c6:	003b      	movs	r3, r7
 80038c8:	2220      	movs	r2, #32
 80038ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038cc:	003b      	movs	r3, r7
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038d2:	003a      	movs	r2, r7
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <MX_TIM1_Init+0xa8>)
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f003 f9b7 	bl	8006c4c <HAL_TIMEx_MasterConfigSynchronization>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80038e2:	f000 fa1f 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b006      	add	sp, #24
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	20000630 	.word	0x20000630
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b090      	sub	sp, #64	; 0x40
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038fe:	2324      	movs	r3, #36	; 0x24
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	0018      	movs	r0, r3
 8003904:	231c      	movs	r3, #28
 8003906:	001a      	movs	r2, r3
 8003908:	2100      	movs	r1, #0
 800390a:	f003 fa9e 	bl	8006e4a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	0018      	movs	r0, r3
 8003912:	2320      	movs	r3, #32
 8003914:	001a      	movs	r2, r3
 8003916:	2100      	movs	r1, #0
 8003918:	f003 fa97 	bl	8006e4a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <MX_TIM16_Init+0x100>)
 800391e:	4a37      	ldr	r2, [pc, #220]	; (80039fc <MX_TIM16_Init+0x104>)
 8003920:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 18;
 8003922:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003924:	2212      	movs	r2, #18
 8003926:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <MX_TIM16_Init+0x100>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800392e:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800393a:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <MX_TIM16_Init+0x100>)
 800393c:	2200      	movs	r2, #0
 800393e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003942:	2200      	movs	r2, #0
 8003944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003948:	0018      	movs	r0, r3
 800394a:	f002 fa11 	bl	8005d70 <HAL_TIM_Base_Init>
 800394e:	1e03      	subs	r3, r0, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003952:	f000 f9e7 	bl	8003d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003956:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003958:	0018      	movs	r0, r3
 800395a:	f002 fa9f 	bl	8005e9c <HAL_TIM_PWM_Init>
 800395e:	1e03      	subs	r3, r0, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003962:	f000 f9df 	bl	8003d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003966:	2124      	movs	r1, #36	; 0x24
 8003968:	187b      	adds	r3, r7, r1
 800396a:	2260      	movs	r2, #96	; 0x60
 800396c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003974:	187b      	adds	r3, r7, r1
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800397a:	187b      	adds	r3, r7, r1
 800397c:	2200      	movs	r2, #0
 800397e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003980:	187b      	adds	r3, r7, r1
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2200      	movs	r2, #0
 800398a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800398c:	187b      	adds	r3, r7, r1
 800398e:	2200      	movs	r2, #0
 8003990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003992:	1879      	adds	r1, r7, r1
 8003994:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <MX_TIM16_Init+0x100>)
 8003996:	2200      	movs	r2, #0
 8003998:	0018      	movs	r0, r3
 800399a:	f002 fc93 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80039a2:	f000 f9bf 	bl	8003d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	2200      	movs	r2, #0
 80039b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	2200      	movs	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	0192      	lsls	r2, r2, #6
 80039ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80039d2:	1d3a      	adds	r2, r7, #4
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <MX_TIM16_Init+0x100>)
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f003 f989 	bl	8006cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80039e2:	f000 f99f 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <MX_TIM16_Init+0x100>)
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fa99 	bl	8003f20 <HAL_TIM_MspPostInit>

}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b010      	add	sp, #64	; 0x40
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	200006fc 	.word	0x200006fc
 80039fc:	40014400 	.word	0x40014400

08003a00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b090      	sub	sp, #64	; 0x40
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a06:	2324      	movs	r3, #36	; 0x24
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	231c      	movs	r3, #28
 8003a0e:	001a      	movs	r2, r3
 8003a10:	2100      	movs	r1, #0
 8003a12:	f003 fa1a 	bl	8006e4a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	0018      	movs	r0, r3
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	001a      	movs	r2, r3
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f003 fa13 	bl	8006e4a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a26:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <MX_TIM17_Init+0x104>)
 8003a28:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 18;
 8003a2a:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a2c:	2212      	movs	r2, #18
 8003a2e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3c:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a50:	0018      	movs	r0, r3
 8003a52:	f002 f98d 	bl	8005d70 <HAL_TIM_Base_Init>
 8003a56:	1e03      	subs	r3, r0, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003a5a:	f000 f963 	bl	8003d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f002 fa1b 	bl	8005e9c <HAL_TIM_PWM_Init>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003a6a:	f000 f95b 	bl	8003d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6e:	2124      	movs	r1, #36	; 0x24
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2260      	movs	r2, #96	; 0x60
 8003a74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	2200      	movs	r2, #0
 8003a92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9a:	1879      	adds	r1, r7, r1
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f002 fc0f 	bl	80062c4 <HAL_TIM_PWM_ConfigChannel>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003aaa:	f000 f93b 	bl	8003d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ac0:	1d3b      	adds	r3, r7, #4
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	0192      	lsls	r2, r2, #6
 8003ad2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003ada:	1d3a      	adds	r2, r7, #4
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f003 f905 	bl	8006cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8003aea:	f000 f91b 	bl	8003d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <MX_TIM17_Init+0x100>)
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fa15 	bl	8003f20 <HAL_TIM_MspPostInit>

}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b010      	add	sp, #64	; 0x40
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	200005e4 	.word	0x200005e4
 8003b04:	40014800 	.word	0x40014800

08003b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <MX_DMA_Init+0x38>)
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <MX_DMA_Init+0x38>)
 8003b14:	2101      	movs	r1, #1
 8003b16:	430a      	orrs	r2, r1
 8003b18:	615a      	str	r2, [r3, #20]
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <MX_DMA_Init+0x38>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2100      	movs	r1, #0
 8003b2a:	2009      	movs	r0, #9
 8003b2c:	f001 f944 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b30:	2009      	movs	r0, #9
 8003b32:	f001 f956 	bl	8004de2 <HAL_NVIC_EnableIRQ>

}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000

08003b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b08b      	sub	sp, #44	; 0x2c
 8003b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4a:	2414      	movs	r4, #20
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	0018      	movs	r0, r3
 8003b50:	2314      	movs	r3, #20
 8003b52:	001a      	movs	r2, r3
 8003b54:	2100      	movs	r1, #0
 8003b56:	f003 f978 	bl	8006e4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5a:	4b6e      	ldr	r3, [pc, #440]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0309      	lsls	r1, r1, #12
 8003b64:	430a      	orrs	r2, r1
 8003b66:	615a      	str	r2, [r3, #20]
 8003b68:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	031b      	lsls	r3, r3, #12
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	03c9      	lsls	r1, r1, #15
 8003b80:	430a      	orrs	r2, r1
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	03db      	lsls	r3, r3, #15
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0289      	lsls	r1, r1, #10
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	029b      	lsls	r3, r3, #10
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bae:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	02c9      	lsls	r1, r1, #11
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <MX_GPIO_Init+0x1d0>)
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	02db      	lsls	r3, r3, #11
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	607b      	str	r3, [r7, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN1_Pin|AIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8003bca:	23e0      	movs	r3, #224	; 0xe0
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	4852      	ldr	r0, [pc, #328]	; (8003d18 <MX_GPIO_Init+0x1d4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f001 fc47 	bl	8005466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin, GPIO_PIN_RESET);
 8003bd8:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <MX_GPIO_Init+0x1d8>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	21c1      	movs	r1, #193	; 0xc1
 8003bde:	0018      	movs	r0, r3
 8003be0:	f001 fc41 	bl	8005466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin, GPIO_PIN_RESET);
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <MX_GPIO_Init+0x1dc>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	2107      	movs	r1, #7
 8003bea:	0018      	movs	r0, r3
 8003bec:	f001 fc3b 	bl	8005466 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin;
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	22e0      	movs	r2, #224	; 0xe0
 8003bf4:	0212      	lsls	r2, r2, #8
 8003bf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	4a42      	ldr	r2, [pc, #264]	; (8003d18 <MX_GPIO_Init+0x1d4>)
 8003c0e:	0019      	movs	r1, r3
 8003c10:	0010      	movs	r0, r2
 8003c12:	f001 fa9b 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin L_DEBUG2_Pin L_DEBUG1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin;
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	22c1      	movs	r2, #193	; 0xc1
 8003c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1c:	193b      	adds	r3, r7, r4
 8003c1e:	2201      	movs	r2, #1
 8003c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	193b      	adds	r3, r7, r4
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c2e:	193b      	adds	r3, r7, r4
 8003c30:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <MX_GPIO_Init+0x1d8>)
 8003c32:	0019      	movs	r1, r3
 8003c34:	0010      	movs	r0, r2
 8003c36:	f001 fa89 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : MARC_DIR_Pin */
  GPIO_InitStruct.Pin = MARC_DIR_Pin;
 8003c3a:	0021      	movs	r1, r4
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	22c4      	movs	r2, #196	; 0xc4
 8003c46:	0392      	lsls	r2, r2, #14
 8003c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	000c      	movs	r4, r1
 8003c4c:	193b      	adds	r3, r7, r4
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MARC_DIR_GPIO_Port, &GPIO_InitStruct);
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <MX_GPIO_Init+0x1d8>)
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f001 fa77 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_FESQ_Pin L_FREN_Pin L_FDIR_Pin */
  GPIO_InitStruct.Pin = L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c64:	193b      	adds	r3, r7, r4
 8003c66:	2201      	movs	r2, #1
 8003c68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c70:	193b      	adds	r3, r7, r4
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c76:	193b      	adds	r3, r7, r4
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <MX_GPIO_Init+0x1dc>)
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	0010      	movs	r0, r2
 8003c7e:	f001 fa65 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : MARC_ESQ_Pin */
  GPIO_InitStruct.Pin = MARC_ESQ_Pin;
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c8a:	193b      	adds	r3, r7, r4
 8003c8c:	22c4      	movs	r2, #196	; 0xc4
 8003c8e:	0392      	lsls	r2, r2, #14
 8003c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MARC_ESQ_GPIO_Port, &GPIO_InitStruct);
 8003c98:	193a      	adds	r2, r7, r4
 8003c9a:	2390      	movs	r3, #144	; 0x90
 8003c9c:	05db      	lsls	r3, r3, #23
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f001 fa53 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ENC2_Pin;
 8003ca6:	193b      	adds	r3, r7, r4
 8003ca8:	22c0      	movs	r2, #192	; 0xc0
 8003caa:	0152      	lsls	r2, r2, #5
 8003cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2288      	movs	r2, #136	; 0x88
 8003cb2:	0352      	lsls	r2, r2, #13
 8003cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	193b      	adds	r3, r7, r4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cbc:	193a      	adds	r2, r7, r4
 8003cbe:	2390      	movs	r3, #144	; 0x90
 8003cc0:	05db      	lsls	r3, r3, #23
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f001 fa41 	bl	800514c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin;
 8003cca:	0021      	movs	r1, r4
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2288      	movs	r2, #136	; 0x88
 8003cd6:	0352      	lsls	r2, r2, #13
 8003cd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC1_GPIO_Port, &GPIO_InitStruct);
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <MX_GPIO_Init+0x1dc>)
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	0010      	movs	r0, r2
 8003ce8:	f001 fa30 	bl	800514c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2005      	movs	r0, #5
 8003cf2:	f001 f861 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003cf6:	2005      	movs	r0, #5
 8003cf8:	f001 f873 	bl	8004de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2007      	movs	r0, #7
 8003d02:	f001 f859 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003d06:	2007      	movs	r0, #7
 8003d08:	f001 f86b 	bl	8004de2 <HAL_NVIC_EnableIRQ>

}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b00b      	add	sp, #44	; 0x2c
 8003d12:	bd90      	pop	{r4, r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	48000800 	.word	0x48000800
 8003d1c:	48001400 	.word	0x48001400
 8003d20:	48000400 	.word	0x48000400

08003d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d28:	b672      	cpsid	i
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <Error_Handler+0x8>
	...

08003d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	4b0f      	ldr	r3, [pc, #60]	; (8003d74 <HAL_MspInit+0x44>)
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_MspInit+0x44>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	619a      	str	r2, [r3, #24]
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <HAL_MspInit+0x44>)
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_MspInit+0x44>)
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_MspInit+0x44>)
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	0549      	lsls	r1, r1, #21
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	61da      	str	r2, [r3, #28]
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_MspInit+0x44>)
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	055b      	lsls	r3, r3, #21
 8003d64:	4013      	ands	r3, r2
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	2414      	movs	r4, #20
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	0018      	movs	r0, r3
 8003d86:	2314      	movs	r3, #20
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f003 f85d 	bl	8006e4a <memset>
  if(hadc->Instance==ADC1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <HAL_ADC_MspInit+0xe0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d15a      	bne.n	8003e50 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d9a:	4b30      	ldr	r3, [pc, #192]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	0089      	lsls	r1, r1, #2
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
 8003da8:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0289      	lsls	r1, r1, #10
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	615a      	str	r2, [r3, #20]
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_ADC_MspInit+0xe4>)
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	227e      	movs	r2, #126	; 0x7e
 8003dd6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd8:	193b      	adds	r3, r7, r4
 8003dda:	2203      	movs	r2, #3
 8003ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de4:	193a      	adds	r2, r7, r4
 8003de6:	2390      	movs	r3, #144	; 0x90
 8003de8:	05db      	lsls	r3, r3, #23
 8003dea:	0011      	movs	r1, r2
 8003dec:	0018      	movs	r0, r3
 8003dee:	f001 f9ad 	bl	800514c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_ADC_MspInit+0xec>)
 8003df6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfe:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e18:	2220      	movs	r2, #32
 8003e1a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	0152      	lsls	r2, r2, #5
 8003e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fff8 	bl	8004e1c <HAL_DMA_Init>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8003e30:	f7ff ff78 	bl	8003d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_ADC_MspInit+0xe8>)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	200c      	movs	r0, #12
 8003e46:	f000 ffb7 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003e4a:	200c      	movs	r0, #12
 8003e4c:	f000 ffc9 	bl	8004de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b00b      	add	sp, #44	; 0x2c
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	40012400 	.word	0x40012400
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	20000678 	.word	0x20000678
 8003e64:	40020008 	.word	0x40020008

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <HAL_TIM_Base_MspInit+0xa8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d11e      	bne.n	8003eb8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e7a:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	0109      	lsls	r1, r1, #4
 8003e84:	430a      	orrs	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
 8003e88:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	4013      	ands	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	200d      	movs	r0, #13
 8003e9c:	f000 ff8c 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003ea0:	200d      	movs	r0, #13
 8003ea2:	f000 ff9e 	bl	8004de2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	200e      	movs	r0, #14
 8003eac:	f000 ff84 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003eb0:	200e      	movs	r0, #14
 8003eb2:	f000 ff96 	bl	8004de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003eb6:	e026      	b.n	8003f06 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <HAL_TIM_Base_MspInit+0xb0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	0289      	lsls	r1, r1, #10
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
}
 8003ede:	e012      	b.n	8003f06 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_TIM_Base_MspInit+0xb4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10d      	bne.n	8003f06 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	02c9      	lsls	r1, r1, #11
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_TIM_Base_MspInit+0xac>)
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	02db      	lsls	r3, r3, #11
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b006      	add	sp, #24
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	40012c00 	.word	0x40012c00
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40014400 	.word	0x40014400
 8003f1c:	40014800 	.word	0x40014800

08003f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b08b      	sub	sp, #44	; 0x2c
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	2414      	movs	r4, #20
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	2314      	movs	r3, #20
 8003f30:	001a      	movs	r2, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	f002 ff89 	bl	8006e4a <memset>
  if(htim->Instance==TIM16)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <HAL_TIM_MspPostInit+0xcc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d125      	bne.n	8003f8e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	02c9      	lsls	r1, r1, #11
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	615a      	str	r2, [r3, #20]
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	02db      	lsls	r3, r3, #11
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0052      	lsls	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	0021      	movs	r1, r4
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_TIM_MspPostInit+0xd4>)
 8003f84:	0019      	movs	r1, r3
 8003f86:	0010      	movs	r0, r2
 8003f88:	f001 f8e0 	bl	800514c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003f8c:	e029      	b.n	8003fe2 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM17)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_TIM_MspPostInit+0xd8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d124      	bne.n	8003fe2 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	02c9      	lsls	r1, r1, #11
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	615a      	str	r2, [r3, #20]
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_TIM_MspPostInit+0xd0>)
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	02db      	lsls	r3, r3, #11
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003fb4:	2114      	movs	r1, #20
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	0092      	lsls	r2, r2, #2
 8003fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	187b      	adds	r3, r7, r1
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	2200      	movs	r2, #0
 8003fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	4a06      	ldr	r2, [pc, #24]	; (8003ff4 <HAL_TIM_MspPostInit+0xd4>)
 8003fda:	0019      	movs	r1, r3
 8003fdc:	0010      	movs	r0, r2
 8003fde:	f001 f8b5 	bl	800514c <HAL_GPIO_Init>
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b00b      	add	sp, #44	; 0x2c
 8003fe8:	bd90      	pop	{r4, r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	48000400 	.word	0x48000400
 8003ff8:	40014800 	.word	0x40014800

08003ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004000:	e7fe      	b.n	8004000 <NMI_Handler+0x4>

08004002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004006:	e7fe      	b.n	8004006 <HardFault_Handler+0x4>

08004008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004020:	f000 f8ca 	bl	80041b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800402e:	2002      	movs	r0, #2
 8004030:	f001 fa36 	bl	80054a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800403e:	2080      	movs	r0, #128	; 0x80
 8004040:	f001 fa2e 	bl	80054a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	0018      	movs	r0, r3
 800404a:	f001 fa29 	bl	80054a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	0018      	movs	r0, r3
 8004054:	f001 fa24 	bl	80054a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	015b      	lsls	r3, r3, #5
 800405c:	0018      	movs	r0, r3
 800405e:	f001 fa1f 	bl	80054a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <DMA1_Channel1_IRQHandler+0x14>)
 800406e:	0018      	movs	r0, r3
 8004070:	f000 ff82 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	20000678 	.word	0x20000678

08004080 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <ADC1_IRQHandler+0x14>)
 8004086:	0018      	movs	r0, r3
 8004088:	f000 fa74 	bl	8004574 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	200006bc 	.word	0x200006bc

08004098 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800409e:	0018      	movs	r0, r3
 80040a0:	f001 fffa 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000630 	.word	0x20000630

080040b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <TIM1_CC_IRQHandler+0x14>)
 80040b6:	0018      	movs	r0, r3
 80040b8:	f001 ffee 	bl	8006098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	20000630 	.word	0x20000630

080040c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040d8:	480d      	ldr	r0, [pc, #52]	; (8004110 <LoopForever+0x6>)
  ldr r1, =_edata
 80040da:	490e      	ldr	r1, [pc, #56]	; (8004114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040dc:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <LoopForever+0xe>)
  movs r3, #0
 80040de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040e0:	e002      	b.n	80040e8 <LoopCopyDataInit>

080040e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040e6:	3304      	adds	r3, #4

080040e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040ec:	d3f9      	bcc.n	80040e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ee:	4a0b      	ldr	r2, [pc, #44]	; (800411c <LoopForever+0x12>)
  ldr r4, =_ebss
 80040f0:	4c0b      	ldr	r4, [pc, #44]	; (8004120 <LoopForever+0x16>)
  movs r3, #0
 80040f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f4:	e001      	b.n	80040fa <LoopFillZerobss>

080040f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040f8:	3204      	adds	r2, #4

080040fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040fc:	d3fb      	bcc.n	80040f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040fe:	f7ff ffe3 	bl	80040c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004102:	f002 fe6b 	bl	8006ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004106:	f7ff fa81 	bl	800360c <main>

0800410a <LoopForever>:

LoopForever:
    b LoopForever
 800410a:	e7fe      	b.n	800410a <LoopForever>
  ldr   r0, =_estack
 800410c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8004110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004114:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004118:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 800411c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004120:	20000754 	.word	0x20000754

08004124 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004124:	e7fe      	b.n	8004124 <DMA1_Channel2_3_IRQHandler>
	...

08004128 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_Init+0x24>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_Init+0x24>)
 8004132:	2110      	movs	r1, #16
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004138:	2003      	movs	r0, #3
 800413a:	f000 f809 	bl	8004150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800413e:	f7ff fdf7 	bl	8003d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	40022000 	.word	0x40022000

08004150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <HAL_InitTick+0x5c>)
 800415a:	681c      	ldr	r4, [r3, #0]
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_InitTick+0x60>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	0019      	movs	r1, r3
 8004162:	23fa      	movs	r3, #250	; 0xfa
 8004164:	0098      	lsls	r0, r3, #2
 8004166:	f7fb ffcf 	bl	8000108 <__udivsi3>
 800416a:	0003      	movs	r3, r0
 800416c:	0019      	movs	r1, r3
 800416e:	0020      	movs	r0, r4
 8004170:	f7fb ffca 	bl	8000108 <__udivsi3>
 8004174:	0003      	movs	r3, r0
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fe43 	bl	8004e02 <HAL_SYSTICK_Config>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e00f      	b.n	80041a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d80b      	bhi.n	80041a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	2301      	movs	r3, #1
 800418e:	425b      	negs	r3, r3
 8004190:	2200      	movs	r2, #0
 8004192:	0018      	movs	r0, r3
 8004194:	f000 fe10 	bl	8004db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_InitTick+0x64>)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b003      	add	sp, #12
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	20000000 	.word	0x20000000
 80041b0:	20000008 	.word	0x20000008
 80041b4:	20000004 	.word	0x20000004

080041b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_IncTick+0x1c>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	001a      	movs	r2, r3
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_IncTick+0x20>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	18d2      	adds	r2, r2, r3
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_IncTick+0x20>)
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	20000008 	.word	0x20000008
 80041d8:	20000744 	.word	0x20000744

080041dc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  return uwTick;
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <HAL_GetTick+0x10>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000744 	.word	0x20000744

080041f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f8:	230f      	movs	r3, #15
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e125      	b.n	800445a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2234      	movs	r2, #52	; 0x34
 8004220:	2100      	movs	r1, #0
 8004222:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff fda6 	bl	8003d78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	2210      	movs	r2, #16
 8004232:	4013      	ands	r3, r2
 8004234:	d000      	beq.n	8004238 <HAL_ADC_Init+0x48>
 8004236:	e103      	b.n	8004440 <HAL_ADC_Init+0x250>
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d000      	beq.n	8004244 <HAL_ADC_Init+0x54>
 8004242:	e0fd      	b.n	8004440 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800424e:	d000      	beq.n	8004252 <HAL_ADC_Init+0x62>
 8004250:	e0f6      	b.n	8004440 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	4a83      	ldr	r2, [pc, #524]	; (8004464 <HAL_ADC_Init+0x274>)
 8004258:	4013      	ands	r3, r2
 800425a:	2202      	movs	r2, #2
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2203      	movs	r2, #3
 800426a:	4013      	ands	r3, r2
 800426c:	2b01      	cmp	r3, #1
 800426e:	d112      	bne.n	8004296 <HAL_ADC_Init+0xa6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	4013      	ands	r3, r2
 800427a:	2b01      	cmp	r3, #1
 800427c:	d009      	beq.n	8004292 <HAL_ADC_Init+0xa2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	401a      	ands	r2, r3
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	429a      	cmp	r2, r3
 8004290:	d101      	bne.n	8004296 <HAL_ADC_Init+0xa6>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_ADC_Init+0xa8>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2218      	movs	r2, #24
 80042a4:	4393      	bics	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	0899      	lsrs	r1, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4964      	ldr	r1, [pc, #400]	; (8004468 <HAL_ADC_Init+0x278>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	7e1b      	ldrb	r3, [r3, #24]
 80042de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7e5b      	ldrb	r3, [r3, #25]
 80042e4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7e9b      	ldrb	r3, [r3, #26]
 80042ec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80042ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <HAL_ADC_Init+0x10e>
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	e000      	b.n	8004300 <HAL_ADC_Init+0x110>
 80042fe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004300:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004306:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d101      	bne.n	8004314 <HAL_ADC_Init+0x124>
 8004310:	2304      	movs	r3, #4
 8004312:	e000      	b.n	8004316 <HAL_ADC_Init+0x126>
 8004314:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004316:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2124      	movs	r1, #36	; 0x24
 800431c:	5c5b      	ldrb	r3, [r3, r1]
 800431e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004320:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7edb      	ldrb	r3, [r3, #27]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d115      	bne.n	800435c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7e9b      	ldrb	r3, [r3, #26]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	0252      	lsls	r2, r2, #9
 800433e:	4313      	orrs	r3, r2
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	e00b      	b.n	800435c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	2220      	movs	r2, #32
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	2201      	movs	r2, #1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	23c2      	movs	r3, #194	; 0xc2
 8004362:	33ff      	adds	r3, #255	; 0xff
 8004364:	429a      	cmp	r2, r3
 8004366:	d007      	beq.n	8004378 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004370:	4313      	orrs	r3, r2
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	4313      	orrs	r3, r2
 8004376:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68d9      	ldr	r1, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	430a      	orrs	r2, r1
 8004386:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	2380      	movs	r3, #128	; 0x80
 800438e:	055b      	lsls	r3, r3, #21
 8004390:	429a      	cmp	r2, r3
 8004392:	d01b      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d017      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d013      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d00f      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d00b      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d007      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d003      	beq.n	80043cc <HAL_ADC_Init+0x1dc>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d112      	bne.n	80043f2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2107      	movs	r1, #7
 80043d8:	438a      	bics	r2, r1
 80043da:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6959      	ldr	r1, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	2207      	movs	r2, #7
 80043e8:	401a      	ands	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_ADC_Init+0x27c>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d10b      	bne.n	800441a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	2203      	movs	r2, #3
 800440e:	4393      	bics	r3, r2
 8004410:	2201      	movs	r2, #1
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004418:	e01c      	b.n	8004454 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	2212      	movs	r2, #18
 8004420:	4393      	bics	r3, r2
 8004422:	2210      	movs	r2, #16
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	2201      	movs	r2, #1
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004436:	230f      	movs	r3, #15
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2201      	movs	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800443e:	e009      	b.n	8004454 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	2210      	movs	r2, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004454:	230f      	movs	r3, #15
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	fffffefd 	.word	0xfffffefd
 8004468:	fffe0219 	.word	0xfffe0219
 800446c:	833fffe7 	.word	0x833fffe7

08004470 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800447c:	2317      	movs	r3, #23
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2204      	movs	r2, #4
 800448c:	4013      	ands	r3, r2
 800448e:	d15e      	bne.n	800454e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2234      	movs	r2, #52	; 0x34
 8004494:	5c9b      	ldrb	r3, [r3, r2]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_ADC_Start_DMA+0x2e>
 800449a:	2302      	movs	r3, #2
 800449c:	e05e      	b.n	800455c <HAL_ADC_Start_DMA+0xec>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2234      	movs	r2, #52	; 0x34
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	7e5b      	ldrb	r3, [r3, #25]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d007      	beq.n	80044be <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80044ae:	2317      	movs	r3, #23
 80044b0:	18fc      	adds	r4, r7, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 fa23 	bl	8004900 <ADC_Enable>
 80044ba:	0003      	movs	r3, r0
 80044bc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044be:	2317      	movs	r3, #23
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d146      	bne.n	8004556 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	4a25      	ldr	r2, [pc, #148]	; (8004564 <HAL_ADC_Start_DMA+0xf4>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	2280      	movs	r2, #128	; 0x80
 80044d2:	0052      	lsls	r2, r2, #1
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2234      	movs	r2, #52	; 0x34
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_ADC_Start_DMA+0xf8>)
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_ADC_Start_DMA+0xfc>)
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_ADC_Start_DMA+0x100>)
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	221c      	movs	r2, #28
 8004506:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2110      	movs	r1, #16
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3340      	adds	r3, #64	; 0x40
 8004532:	0019      	movs	r1, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f000 fcb8 	bl	8004eac <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2104      	movs	r1, #4
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e003      	b.n	8004556 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800454e:	2317      	movs	r3, #23
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2202      	movs	r2, #2
 8004554:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004556:	2317      	movs	r3, #23
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b007      	add	sp, #28
 8004562:	bd90      	pop	{r4, r7, pc}
 8004564:	fffff0fe 	.word	0xfffff0fe
 8004568:	08004a09 	.word	0x08004a09
 800456c:	08004abd 	.word	0x08004abd
 8004570:	08004adb 	.word	0x08004adb

08004574 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2204      	movs	r2, #4
 8004584:	4013      	ands	r3, r2
 8004586:	2b04      	cmp	r3, #4
 8004588:	d106      	bne.n	8004598 <HAL_ADC_IRQHandler+0x24>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	4013      	ands	r3, r2
 8004594:	2b04      	cmp	r3, #4
 8004596:	d00d      	beq.n	80045b4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2208      	movs	r2, #8
 80045a0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d14f      	bne.n	8004646 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2208      	movs	r2, #8
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d148      	bne.n	8004646 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2210      	movs	r2, #16
 80045ba:	4013      	ands	r3, r2
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	0092      	lsls	r2, r2, #2
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	23c0      	movs	r3, #192	; 0xc0
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	d12d      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d129      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2208      	movs	r2, #8
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d122      	bne.n	8004636 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2204      	movs	r2, #4
 80045f8:	4013      	ands	r3, r2
 80045fa:	d110      	bne.n	800461e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	210c      	movs	r1, #12
 8004608:	438a      	bics	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <HAL_ADC_IRQHandler+0x16c>)
 8004612:	4013      	ands	r3, r2
 8004614:	2201      	movs	r2, #1
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
 800461c:	e00b      	b.n	8004636 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	2220      	movs	r2, #32
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	2201      	movs	r2, #1
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7fe ffc7 	bl	80035cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	220c      	movs	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	4013      	ands	r3, r2
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d115      	bne.n	8004680 <HAL_ADC_IRQHandler+0x10c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	4013      	ands	r3, r2
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d10e      	bne.n	8004680 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	0252      	lsls	r2, r2, #9
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f000 f83e 	bl	80046f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2280      	movs	r2, #128	; 0x80
 800467e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2210      	movs	r2, #16
 8004688:	4013      	ands	r3, r2
 800468a:	2b10      	cmp	r3, #16
 800468c:	d123      	bne.n	80046d6 <HAL_ADC_IRQHandler+0x162>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2210      	movs	r2, #16
 8004696:	4013      	ands	r3, r2
 8004698:	2b10      	cmp	r3, #16
 800469a:	d11c      	bne.n	80046d6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d006      	beq.n	80046b2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10d      	bne.n	80046ce <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	2202      	movs	r2, #2
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f81b 	bl	8004704 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	601a      	str	r2, [r3, #0]
  }

}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	fffffefe 	.word	0xfffffefe

080046e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b002      	add	sp, #8
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b002      	add	sp, #8
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471e:	230f      	movs	r3, #15
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	055b      	lsls	r3, r3, #21
 8004732:	429a      	cmp	r2, r3
 8004734:	d011      	beq.n	800475a <HAL_ADC_ConfigChannel+0x46>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d00d      	beq.n	800475a <HAL_ADC_ConfigChannel+0x46>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2b02      	cmp	r3, #2
 8004744:	d009      	beq.n	800475a <HAL_ADC_ConfigChannel+0x46>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	2b03      	cmp	r3, #3
 800474c:	d005      	beq.n	800475a <HAL_ADC_ConfigChannel+0x46>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	2b04      	cmp	r3, #4
 8004754:	d001      	beq.n	800475a <HAL_ADC_ConfigChannel+0x46>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2234      	movs	r2, #52	; 0x34
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x54>
 8004764:	2302      	movs	r3, #2
 8004766:	e0bb      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x1cc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2234      	movs	r2, #52	; 0x34
 800476c:	2101      	movs	r1, #1
 800476e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2204      	movs	r2, #4
 8004778:	4013      	ands	r3, r2
 800477a:	d000      	beq.n	800477e <HAL_ADC_ConfigChannel+0x6a>
 800477c:	e09f      	b.n	80048be <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4a59      	ldr	r2, [pc, #356]	; (80048e8 <HAL_ADC_ConfigChannel+0x1d4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <HAL_ADC_ConfigChannel+0x76>
 8004788:	e077      	b.n	800487a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	055b      	lsls	r3, r3, #21
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d037      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d033      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d02f      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d02b      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d027      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d023      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	2b06      	cmp	r3, #6
 80047da:	d01f      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2b07      	cmp	r3, #7
 80047e2:	d01b      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2107      	movs	r1, #7
 80047f0:	400b      	ands	r3, r1
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d012      	beq.n	800481c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2107      	movs	r1, #7
 8004802:	438a      	bics	r2, r1
 8004804:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6959      	ldr	r1, [r3, #20]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2207      	movs	r2, #7
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d003      	beq.n	800482c <HAL_ADC_ConfigChannel+0x118>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b11      	cmp	r3, #17
 800482a:	d152      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <HAL_ADC_ConfigChannel+0x1d8>)
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d102      	bne.n	800483e <HAL_ADC_ConfigChannel+0x12a>
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	e001      	b.n	8004842 <HAL_ADC_ConfigChannel+0x12e>
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	03db      	lsls	r3, r3, #15
 8004842:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <HAL_ADC_ConfigChannel+0x1d8>)
 8004844:	430b      	orrs	r3, r1
 8004846:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b10      	cmp	r3, #16
 800484e:	d140      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_ADC_ConfigChannel+0x1dc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4927      	ldr	r1, [pc, #156]	; (80048f4 <HAL_ADC_ConfigChannel+0x1e0>)
 8004856:	0018      	movs	r0, r3
 8004858:	f7fb fc56 	bl	8000108 <__udivsi3>
 800485c:	0003      	movs	r3, r0
 800485e:	001a      	movs	r2, r3
 8004860:	0013      	movs	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	189b      	adds	r3, r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800486a:	e002      	b.n	8004872 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3b01      	subs	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f9      	bne.n	800486c <HAL_ADC_ConfigChannel+0x158>
 8004878:	e02b      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2101      	movs	r1, #1
 8004886:	4099      	lsls	r1, r3
 8004888:	000b      	movs	r3, r1
 800488a:	43d9      	mvns	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	400a      	ands	r2, r1
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b10      	cmp	r3, #16
 800489a:	d003      	beq.n	80048a4 <HAL_ADC_ConfigChannel+0x190>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b11      	cmp	r3, #17
 80048a2:	d116      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <HAL_ADC_ConfigChannel+0x1d8>)
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x1a0>
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <HAL_ADC_ConfigChannel+0x1e4>)
 80048b2:	e000      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x1a2>
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_ADC_ConfigChannel+0x1e8>)
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <HAL_ADC_ConfigChannel+0x1d8>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e009      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	2220      	movs	r2, #32
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80048ca:	230f      	movs	r3, #15
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2234      	movs	r2, #52	; 0x34
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80048da:	230f      	movs	r3, #15
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b004      	add	sp, #16
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	00001001 	.word	0x00001001
 80048ec:	40012708 	.word	0x40012708
 80048f0:	20000000 	.word	0x20000000
 80048f4:	000f4240 	.word	0x000f4240
 80048f8:	ff7fffff 	.word	0xff7fffff
 80048fc:	ffbfffff 	.word	0xffbfffff

08004900 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2203      	movs	r2, #3
 8004918:	4013      	ands	r3, r2
 800491a:	2b01      	cmp	r3, #1
 800491c:	d112      	bne.n	8004944 <ADC_Enable+0x44>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	4013      	ands	r3, r2
 8004928:	2b01      	cmp	r3, #1
 800492a:	d009      	beq.n	8004940 <ADC_Enable+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	401a      	ands	r2, r3
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	429a      	cmp	r2, r3
 800493e:	d101      	bne.n	8004944 <ADC_Enable+0x44>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <ADC_Enable+0x46>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d152      	bne.n	80049f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <ADC_Enable+0xfc>)
 8004952:	4013      	ands	r3, r2
 8004954:	d00d      	beq.n	8004972 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	2210      	movs	r2, #16
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	2201      	movs	r2, #1
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e03f      	b.n	80049f2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004982:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <ADC_Enable+0x100>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	491f      	ldr	r1, [pc, #124]	; (8004a04 <ADC_Enable+0x104>)
 8004988:	0018      	movs	r0, r3
 800498a:	f7fb fbbd 	bl	8000108 <__udivsi3>
 800498e:	0003      	movs	r3, r0
 8004990:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004992:	e002      	b.n	800499a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f9      	bne.n	8004994 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80049a0:	f7ff fc1c 	bl	80041dc <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049a8:	e01b      	b.n	80049e2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049aa:	f7ff fc17 	bl	80041dc <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d914      	bls.n	80049e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00d      	beq.n	80049e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	2210      	movs	r2, #16
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2201      	movs	r2, #1
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2201      	movs	r2, #1
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d1dc      	bne.n	80049aa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b004      	add	sp, #16
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	80000017 	.word	0x80000017
 8004a00:	20000000 	.word	0x20000000
 8004a04:	000f4240 	.word	0x000f4240

08004a08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	2250      	movs	r2, #80	; 0x50
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d140      	bne.n	8004aa2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2280      	movs	r2, #128	; 0x80
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	23c0      	movs	r3, #192	; 0xc0
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d12d      	bne.n	8004a98 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d129      	bne.n	8004a98 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d122      	bne.n	8004a98 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d110      	bne.n	8004a80 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	210c      	movs	r1, #12
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <ADC_DMAConvCplt+0xb0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	2201      	movs	r2, #1
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7e:	e00b      	b.n	8004a98 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2220      	movs	r2, #32
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	2201      	movs	r2, #1
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fe fd96 	bl	80035cc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004aa0:	e005      	b.n	8004aae <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	0010      	movs	r0, r2
 8004aac:	4798      	blx	r3
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b004      	add	sp, #16
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	fffffefe 	.word	0xfffffefe

08004abc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7ff fe09 	bl	80046e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b004      	add	sp, #16
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	2204      	movs	r2, #4
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f7ff fdfe 	bl	8004704 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b08:	46c0      	nop			; (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b004      	add	sp, #16
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b18:	2317      	movs	r3, #23
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2234      	movs	r2, #52	; 0x34
 8004b2c:	5c9b      	ldrb	r3, [r3, r2]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_ADCEx_Calibration_Start+0x26>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e08d      	b.n	8004c52 <HAL_ADCEx_Calibration_Start+0x142>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2234      	movs	r2, #52	; 0x34
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2203      	movs	r2, #3
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d112      	bne.n	8004b72 <HAL_ADCEx_Calibration_Start+0x62>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d009      	beq.n	8004b6e <HAL_ADCEx_Calibration_Start+0x5e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	401a      	ands	r2, r3
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d101      	bne.n	8004b72 <HAL_ADCEx_Calibration_Start+0x62>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_ADCEx_Calibration_Start+0x64>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d15b      	bne.n	8004c30 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <HAL_ADCEx_Calibration_Start+0x14c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2202      	movs	r2, #2
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2203      	movs	r2, #3
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2103      	movs	r1, #3
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	0609      	lsls	r1, r1, #24
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004bb6:	f7ff fb11 	bl	80041dc <HAL_GetTick>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bbe:	e01d      	b.n	8004bfc <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004bc0:	f7ff fb0c 	bl	80041dc <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d916      	bls.n	8004bfc <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	0fdb      	lsrs	r3, r3, #31
 8004bd6:	07da      	lsls	r2, r3, #31
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d10d      	bne.n	8004bfc <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	2212      	movs	r2, #18
 8004be6:	4393      	bics	r3, r2
 8004be8:	2210      	movs	r2, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2234      	movs	r2, #52	; 0x34
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e02a      	b.n	8004c52 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0fdb      	lsrs	r3, r3, #31
 8004c04:	07da      	lsls	r2, r3, #31
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d0d8      	beq.n	8004bc0 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	2203      	movs	r2, #3
 8004c24:	4393      	bics	r3, r2
 8004c26:	2201      	movs	r2, #1
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c2e:	e009      	b.n	8004c44 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	2220      	movs	r2, #32
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004c3c:	2317      	movs	r3, #23
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2234      	movs	r2, #52	; 0x34
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c4c:	2317      	movs	r3, #23
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b006      	add	sp, #24
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	fffffefd 	.word	0xfffffefd

08004c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	0002      	movs	r2, r0
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c6c:	1dfb      	adds	r3, r7, #7
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b7f      	cmp	r3, #127	; 0x7f
 8004c72:	d809      	bhi.n	8004c88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	001a      	movs	r2, r3
 8004c7a:	231f      	movs	r3, #31
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <__NVIC_EnableIRQ+0x30>)
 8004c80:	2101      	movs	r1, #1
 8004c82:	4091      	lsls	r1, r2
 8004c84:	000a      	movs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
  }
}
 8004c88:	46c0      	nop			; (mov r8, r8)
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b002      	add	sp, #8
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca8:	d828      	bhi.n	8004cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004caa:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <__NVIC_SetPriority+0xd4>)
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b25b      	sxtb	r3, r3
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	33c0      	adds	r3, #192	; 0xc0
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	589b      	ldr	r3, [r3, r2]
 8004cba:	1dfa      	adds	r2, r7, #7
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0011      	movs	r1, r2
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	400a      	ands	r2, r1
 8004cc4:	00d2      	lsls	r2, r2, #3
 8004cc6:	21ff      	movs	r1, #255	; 0xff
 8004cc8:	4091      	lsls	r1, r2
 8004cca:	000a      	movs	r2, r1
 8004ccc:	43d2      	mvns	r2, r2
 8004cce:	401a      	ands	r2, r3
 8004cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	019b      	lsls	r3, r3, #6
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	401a      	ands	r2, r3
 8004cda:	1dfb      	adds	r3, r7, #7
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	0018      	movs	r0, r3
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	4003      	ands	r3, r0
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce8:	481f      	ldr	r0, [pc, #124]	; (8004d68 <__NVIC_SetPriority+0xd4>)
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	33c0      	adds	r3, #192	; 0xc0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004cfa:	e031      	b.n	8004d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <__NVIC_SetPriority+0xd8>)
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	0019      	movs	r1, r3
 8004d04:	230f      	movs	r3, #15
 8004d06:	400b      	ands	r3, r1
 8004d08:	3b08      	subs	r3, #8
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3306      	adds	r3, #6
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	3304      	adds	r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1dfa      	adds	r2, r7, #7
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	400a      	ands	r2, r1
 8004d20:	00d2      	lsls	r2, r2, #3
 8004d22:	21ff      	movs	r1, #255	; 0xff
 8004d24:	4091      	lsls	r1, r2
 8004d26:	000a      	movs	r2, r1
 8004d28:	43d2      	mvns	r2, r2
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	22ff      	movs	r2, #255	; 0xff
 8004d34:	401a      	ands	r2, r3
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	4003      	ands	r3, r0
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d44:	4809      	ldr	r0, [pc, #36]	; (8004d6c <__NVIC_SetPriority+0xd8>)
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	001c      	movs	r4, r3
 8004d4c:	230f      	movs	r3, #15
 8004d4e:	4023      	ands	r3, r4
 8004d50:	3b08      	subs	r3, #8
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	430a      	orrs	r2, r1
 8004d56:	3306      	adds	r3, #6
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	18c3      	adds	r3, r0, r3
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	601a      	str	r2, [r3, #0]
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b003      	add	sp, #12
 8004d66:	bd90      	pop	{r4, r7, pc}
 8004d68:	e000e100 	.word	0xe000e100
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	045b      	lsls	r3, r3, #17
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d301      	bcc.n	8004d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d84:	2301      	movs	r3, #1
 8004d86:	e010      	b.n	8004daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <SysTick_Config+0x44>)
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d90:	2301      	movs	r3, #1
 8004d92:	425b      	negs	r3, r3
 8004d94:	2103      	movs	r1, #3
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff ff7c 	bl	8004c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <SysTick_Config+0x44>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <SysTick_Config+0x44>)
 8004da4:	2207      	movs	r2, #7
 8004da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	e000e010 	.word	0xe000e010

08004db8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	210f      	movs	r1, #15
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	1c02      	adds	r2, r0, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	0011      	movs	r1, r2
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7ff ff5d 	bl	8004c94 <__NVIC_SetPriority>
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	0002      	movs	r2, r0
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dee:	1dfb      	adds	r3, r7, #7
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff33 	bl	8004c60 <__NVIC_EnableIRQ>
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ffaf 	bl	8004d70 <SysTick_Config>
 8004e12:	0003      	movs	r3, r0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e036      	b.n	8004ea0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2221      	movs	r2, #33	; 0x21
 8004e36:	2102      	movs	r1, #2
 8004e38:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_DMA_Init+0x8c>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 f946 	bl	8005114 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2221      	movs	r2, #33	; 0x21
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}  
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	ffffc00f 	.word	0xffffc00f

08004eac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2317      	movs	r3, #23
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_DMA_Start_IT+0x24>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e04f      	b.n	8004f70 <HAL_DMA_Start_IT+0xc4>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2221      	movs	r2, #33	; 0x21
 8004edc:	5c9b      	ldrb	r3, [r3, r2]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d13a      	bne.n	8004f5a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2221      	movs	r2, #33	; 0x21
 8004ee8:	2102      	movs	r1, #2
 8004eea:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f8d7 	bl	80050bc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	210e      	movs	r1, #14
 8004f22:	430a      	orrs	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	e00f      	b.n	8004f48 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	210a      	movs	r1, #10
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2104      	movs	r1, #4
 8004f44:	438a      	bics	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e007      	b.n	8004f6a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004f62:	2317      	movs	r3, #23
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2202      	movs	r2, #2
 8004f68:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8004f6a:	2317      	movs	r3, #23
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	781b      	ldrb	r3, [r3, #0]
} 
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b006      	add	sp, #24
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2204      	movs	r2, #4
 8004f96:	409a      	lsls	r2, r3
 8004f98:	0013      	movs	r3, r2
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d024      	beq.n	8004fea <HAL_DMA_IRQHandler+0x72>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d020      	beq.n	8004fea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d107      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	2104      	movs	r1, #4
 8004fce:	4091      	lsls	r1, r2
 8004fd0:	000a      	movs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d100      	bne.n	8004fde <HAL_DMA_IRQHandler+0x66>
 8004fdc:	e06a      	b.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	0010      	movs	r0, r2
 8004fe6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004fe8:	e064      	b.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2202      	movs	r2, #2
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	0013      	movs	r3, r2
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d02b      	beq.n	8005052 <HAL_DMA_IRQHandler+0xda>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	4013      	ands	r3, r2
 8005000:	d027      	beq.n	8005052 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2220      	movs	r2, #32
 800500a:	4013      	ands	r3, r2
 800500c:	d10b      	bne.n	8005026 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	210a      	movs	r1, #10
 800501a:	438a      	bics	r2, r1
 800501c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2221      	movs	r2, #33	; 0x21
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2102      	movs	r1, #2
 8005030:	4091      	lsls	r1, r2
 8005032:	000a      	movs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	2100      	movs	r1, #0
 800503c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d036      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	0010      	movs	r0, r2
 800504e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005050:	e030      	b.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2208      	movs	r2, #8
 8005058:	409a      	lsls	r2, r3
 800505a:	0013      	movs	r3, r2
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4013      	ands	r3, r2
 8005060:	d028      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2208      	movs	r2, #8
 8005066:	4013      	ands	r3, r2
 8005068:	d024      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	210e      	movs	r1, #14
 8005076:	438a      	bics	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	2101      	movs	r1, #1
 8005084:	4091      	lsls	r1, r2
 8005086:	000a      	movs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2221      	movs	r2, #33	; 0x21
 8005094:	2101      	movs	r1, #1
 8005096:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	0010      	movs	r0, r2
 80050b0:	4798      	blx	r3
    }
   }
}  
 80050b2:	e7ff      	b.n	80050b4 <HAL_DMA_IRQHandler+0x13c>
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}

080050bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2101      	movs	r1, #1
 80050d4:	4091      	lsls	r1, r2
 80050d6:	000a      	movs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d108      	bne.n	80050fc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050fa:	e007      	b.n	800510c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
}
 800510c:	46c0      	nop			; (mov r8, r8)
 800510e:	46bd      	mov	sp, r7
 8005110:	b004      	add	sp, #16
 8005112:	bd80      	pop	{r7, pc}

08005114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a08      	ldr	r2, [pc, #32]	; (8005144 <DMA_CalcBaseAndBitshift+0x30>)
 8005122:	4694      	mov	ip, r2
 8005124:	4463      	add	r3, ip
 8005126:	2114      	movs	r1, #20
 8005128:	0018      	movs	r0, r3
 800512a:	f7fa ffed 	bl	8000108 <__udivsi3>
 800512e:	0003      	movs	r3, r0
 8005130:	009a      	lsls	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a03      	ldr	r2, [pc, #12]	; (8005148 <DMA_CalcBaseAndBitshift+0x34>)
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800513c:	46c0      	nop			; (mov r8, r8)
 800513e:	46bd      	mov	sp, r7
 8005140:	b002      	add	sp, #8
 8005142:	bd80      	pop	{r7, pc}
 8005144:	bffdfff8 	.word	0xbffdfff8
 8005148:	40020000 	.word	0x40020000

0800514c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800515a:	e14f      	b.n	80053fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2101      	movs	r1, #1
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4091      	lsls	r1, r2
 8005166:	000a      	movs	r2, r1
 8005168:	4013      	ands	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d100      	bne.n	8005174 <HAL_GPIO_Init+0x28>
 8005172:	e140      	b.n	80053f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2203      	movs	r2, #3
 800517a:	4013      	ands	r3, r2
 800517c:	2b01      	cmp	r3, #1
 800517e:	d005      	beq.n	800518c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2203      	movs	r2, #3
 8005186:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005188:	2b02      	cmp	r3, #2
 800518a:	d130      	bne.n	80051ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	2203      	movs	r2, #3
 8005198:	409a      	lsls	r2, r3
 800519a:	0013      	movs	r3, r2
 800519c:	43da      	mvns	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	0013      	movs	r3, r2
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c2:	2201      	movs	r2, #1
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	409a      	lsls	r2, r3
 80051c8:	0013      	movs	r3, r2
 80051ca:	43da      	mvns	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	2201      	movs	r2, #1
 80051da:	401a      	ands	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	409a      	lsls	r2, r3
 80051e0:	0013      	movs	r3, r2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2203      	movs	r2, #3
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d017      	beq.n	800522a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2203      	movs	r2, #3
 8005206:	409a      	lsls	r2, r3
 8005208:	0013      	movs	r3, r2
 800520a:	43da      	mvns	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4013      	ands	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	409a      	lsls	r2, r3
 800521c:	0013      	movs	r3, r2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2203      	movs	r2, #3
 8005230:	4013      	ands	r3, r2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d123      	bne.n	800527e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	08da      	lsrs	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	58d3      	ldr	r3, [r2, r3]
 8005242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2207      	movs	r2, #7
 8005248:	4013      	ands	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	220f      	movs	r2, #15
 800524e:	409a      	lsls	r2, r3
 8005250:	0013      	movs	r3, r2
 8005252:	43da      	mvns	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4013      	ands	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2107      	movs	r1, #7
 8005262:	400b      	ands	r3, r1
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	409a      	lsls	r2, r3
 8005268:	0013      	movs	r3, r2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	08da      	lsrs	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3208      	adds	r2, #8
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	6939      	ldr	r1, [r7, #16]
 800527c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	409a      	lsls	r2, r3
 800528c:	0013      	movs	r3, r2
 800528e:	43da      	mvns	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2203      	movs	r2, #3
 800529c:	401a      	ands	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	0013      	movs	r3, r2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	23c0      	movs	r3, #192	; 0xc0
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	4013      	ands	r3, r2
 80052bc:	d100      	bne.n	80052c0 <HAL_GPIO_Init+0x174>
 80052be:	e09a      	b.n	80053f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c0:	4b54      	ldr	r3, [pc, #336]	; (8005414 <HAL_GPIO_Init+0x2c8>)
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	4b53      	ldr	r3, [pc, #332]	; (8005414 <HAL_GPIO_Init+0x2c8>)
 80052c6:	2101      	movs	r1, #1
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
 80052cc:	4b51      	ldr	r3, [pc, #324]	; (8005414 <HAL_GPIO_Init+0x2c8>)
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2201      	movs	r2, #1
 80052d2:	4013      	ands	r3, r2
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80052d8:	4a4f      	ldr	r2, [pc, #316]	; (8005418 <HAL_GPIO_Init+0x2cc>)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	089b      	lsrs	r3, r3, #2
 80052de:	3302      	adds	r3, #2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	589b      	ldr	r3, [r3, r2]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2203      	movs	r2, #3
 80052ea:	4013      	ands	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	220f      	movs	r2, #15
 80052f0:	409a      	lsls	r2, r3
 80052f2:	0013      	movs	r3, r2
 80052f4:	43da      	mvns	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	2390      	movs	r3, #144	; 0x90
 8005300:	05db      	lsls	r3, r3, #23
 8005302:	429a      	cmp	r2, r3
 8005304:	d013      	beq.n	800532e <HAL_GPIO_Init+0x1e2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a44      	ldr	r2, [pc, #272]	; (800541c <HAL_GPIO_Init+0x2d0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00d      	beq.n	800532a <HAL_GPIO_Init+0x1de>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a43      	ldr	r2, [pc, #268]	; (8005420 <HAL_GPIO_Init+0x2d4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <HAL_GPIO_Init+0x1da>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a42      	ldr	r2, [pc, #264]	; (8005424 <HAL_GPIO_Init+0x2d8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <HAL_GPIO_Init+0x1d6>
 800531e:	2303      	movs	r3, #3
 8005320:	e006      	b.n	8005330 <HAL_GPIO_Init+0x1e4>
 8005322:	2305      	movs	r3, #5
 8005324:	e004      	b.n	8005330 <HAL_GPIO_Init+0x1e4>
 8005326:	2302      	movs	r3, #2
 8005328:	e002      	b.n	8005330 <HAL_GPIO_Init+0x1e4>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_GPIO_Init+0x1e4>
 800532e:	2300      	movs	r3, #0
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	2103      	movs	r1, #3
 8005334:	400a      	ands	r2, r1
 8005336:	0092      	lsls	r2, r2, #2
 8005338:	4093      	lsls	r3, r2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005340:	4935      	ldr	r1, [pc, #212]	; (8005418 <HAL_GPIO_Init+0x2cc>)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	3302      	adds	r3, #2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	43da      	mvns	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4013      	ands	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	025b      	lsls	r3, r3, #9
 8005366:	4013      	ands	r3, r2
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005372:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43da      	mvns	r2, r3
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	029b      	lsls	r3, r3, #10
 8005390:	4013      	ands	r3, r2
 8005392:	d003      	beq.n	800539c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800539c:	4b22      	ldr	r3, [pc, #136]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	43da      	mvns	r2, r3
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	035b      	lsls	r3, r3, #13
 80053ba:	4013      	ands	r3, r2
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053cc:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	43da      	mvns	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	039b      	lsls	r3, r3, #14
 80053e4:	4013      	ands	r3, r2
 80053e6:	d003      	beq.n	80053f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_GPIO_Init+0x2dc>)
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	40da      	lsrs	r2, r3
 8005404:	1e13      	subs	r3, r2, #0
 8005406:	d000      	beq.n	800540a <HAL_GPIO_Init+0x2be>
 8005408:	e6a8      	b.n	800515c <HAL_GPIO_Init+0x10>
  } 
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b006      	add	sp, #24
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021000 	.word	0x40021000
 8005418:	40010000 	.word	0x40010000
 800541c:	48000400 	.word	0x48000400
 8005420:	48000800 	.word	0x48000800
 8005424:	48000c00 	.word	0x48000c00
 8005428:	40010400 	.word	0x40010400

0800542c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	000a      	movs	r2, r1
 8005436:	1cbb      	adds	r3, r7, #2
 8005438:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	1cba      	adds	r2, r7, #2
 8005440:	8812      	ldrh	r2, [r2, #0]
 8005442:	4013      	ands	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005446:	230f      	movs	r3, #15
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	e003      	b.n	8005458 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	2200      	movs	r2, #0
 8005456:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005458:	230f      	movs	r3, #15
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	781b      	ldrb	r3, [r3, #0]
  }
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	0008      	movs	r0, r1
 8005470:	0011      	movs	r1, r2
 8005472:	1cbb      	adds	r3, r7, #2
 8005474:	1c02      	adds	r2, r0, #0
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	1c7b      	adds	r3, r7, #1
 800547a:	1c0a      	adds	r2, r1, #0
 800547c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800547e:	1c7b      	adds	r3, r7, #1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005486:	1cbb      	adds	r3, r7, #2
 8005488:	881a      	ldrh	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800548e:	e003      	b.n	8005498 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005490:	1cbb      	adds	r3, r7, #2
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	0002      	movs	r2, r0
 80054a8:	1dbb      	adds	r3, r7, #6
 80054aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	1dba      	adds	r2, r7, #6
 80054b2:	8812      	ldrh	r2, [r2, #0]
 80054b4:	4013      	ands	r3, r2
 80054b6:	d008      	beq.n	80054ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80054ba:	1dba      	adds	r2, r7, #6
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7fc fff3 	bl	80024b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b002      	add	sp, #8
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	40010400 	.word	0x40010400

080054d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e301      	b.n	8005aee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	d100      	bne.n	80054f6 <HAL_RCC_OscConfig+0x1e>
 80054f4:	e08d      	b.n	8005612 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80054f6:	4bc3      	ldr	r3, [pc, #780]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	220c      	movs	r2, #12
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d00e      	beq.n	8005520 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005502:	4bc0      	ldr	r3, [pc, #768]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	220c      	movs	r2, #12
 8005508:	4013      	ands	r3, r2
 800550a:	2b08      	cmp	r3, #8
 800550c:	d116      	bne.n	800553c <HAL_RCC_OscConfig+0x64>
 800550e:	4bbd      	ldr	r3, [pc, #756]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	025b      	lsls	r3, r3, #9
 8005516:	401a      	ands	r2, r3
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	025b      	lsls	r3, r3, #9
 800551c:	429a      	cmp	r2, r3
 800551e:	d10d      	bne.n	800553c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	4bb8      	ldr	r3, [pc, #736]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	4013      	ands	r3, r2
 800552a:	d100      	bne.n	800552e <HAL_RCC_OscConfig+0x56>
 800552c:	e070      	b.n	8005610 <HAL_RCC_OscConfig+0x138>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d000      	beq.n	8005538 <HAL_RCC_OscConfig+0x60>
 8005536:	e06b      	b.n	8005610 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e2d8      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x7c>
 8005544:	4baf      	ldr	r3, [pc, #700]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4bae      	ldr	r3, [pc, #696]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	0249      	lsls	r1, r1, #9
 800554e:	430a      	orrs	r2, r1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e02f      	b.n	80055b4 <HAL_RCC_OscConfig+0xdc>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <HAL_RCC_OscConfig+0x9e>
 800555c:	4ba9      	ldr	r3, [pc, #676]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4ba8      	ldr	r3, [pc, #672]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005562:	49a9      	ldr	r1, [pc, #676]	; (8005808 <HAL_RCC_OscConfig+0x330>)
 8005564:	400a      	ands	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	4ba6      	ldr	r3, [pc, #664]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4ba5      	ldr	r3, [pc, #660]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800556e:	49a7      	ldr	r1, [pc, #668]	; (800580c <HAL_RCC_OscConfig+0x334>)
 8005570:	400a      	ands	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e01e      	b.n	80055b4 <HAL_RCC_OscConfig+0xdc>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d10e      	bne.n	800559c <HAL_RCC_OscConfig+0xc4>
 800557e:	4ba1      	ldr	r3, [pc, #644]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	02c9      	lsls	r1, r1, #11
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	4b9d      	ldr	r3, [pc, #628]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b9c      	ldr	r3, [pc, #624]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0249      	lsls	r1, r1, #9
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0xdc>
 800559c:	4b99      	ldr	r3, [pc, #612]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b98      	ldr	r3, [pc, #608]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80055a2:	4999      	ldr	r1, [pc, #612]	; (8005808 <HAL_RCC_OscConfig+0x330>)
 80055a4:	400a      	ands	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	4b96      	ldr	r3, [pc, #600]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b95      	ldr	r3, [pc, #596]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80055ae:	4997      	ldr	r1, [pc, #604]	; (800580c <HAL_RCC_OscConfig+0x334>)
 80055b0:	400a      	ands	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d014      	beq.n	80055e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fe fe0e 	bl	80041dc <HAL_GetTick>
 80055c0:	0003      	movs	r3, r0
 80055c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c6:	f7fe fe09 	bl	80041dc <HAL_GetTick>
 80055ca:	0002      	movs	r2, r0
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b64      	cmp	r3, #100	; 0x64
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e28a      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d8:	4b8a      	ldr	r3, [pc, #552]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	4013      	ands	r3, r2
 80055e2:	d0f0      	beq.n	80055c6 <HAL_RCC_OscConfig+0xee>
 80055e4:	e015      	b.n	8005612 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fdf9 	bl	80041dc <HAL_GetTick>
 80055ea:	0003      	movs	r3, r0
 80055ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fe fdf4 	bl	80041dc <HAL_GetTick>
 80055f4:	0002      	movs	r2, r0
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e275      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005602:	4b80      	ldr	r3, [pc, #512]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	4013      	ands	r3, r2
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x118>
 800560e:	e000      	b.n	8005612 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2202      	movs	r2, #2
 8005618:	4013      	ands	r3, r2
 800561a:	d100      	bne.n	800561e <HAL_RCC_OscConfig+0x146>
 800561c:	e069      	b.n	80056f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800561e:	4b79      	ldr	r3, [pc, #484]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	220c      	movs	r2, #12
 8005624:	4013      	ands	r3, r2
 8005626:	d00b      	beq.n	8005640 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005628:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	220c      	movs	r2, #12
 800562e:	4013      	ands	r3, r2
 8005630:	2b08      	cmp	r3, #8
 8005632:	d11c      	bne.n	800566e <HAL_RCC_OscConfig+0x196>
 8005634:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	025b      	lsls	r3, r3, #9
 800563c:	4013      	ands	r3, r2
 800563e:	d116      	bne.n	800566e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005640:	4b70      	ldr	r3, [pc, #448]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	d005      	beq.n	8005656 <HAL_RCC_OscConfig+0x17e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e24b      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4b6b      	ldr	r3, [pc, #428]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	22f8      	movs	r2, #248	; 0xf8
 800565c:	4393      	bics	r3, r2
 800565e:	0019      	movs	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	00da      	lsls	r2, r3, #3
 8005666:	4b67      	ldr	r3, [pc, #412]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566c:	e041      	b.n	80056f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d024      	beq.n	80056c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005676:	4b63      	ldr	r3, [pc, #396]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b62      	ldr	r3, [pc, #392]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800567c:	2101      	movs	r1, #1
 800567e:	430a      	orrs	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005682:	f7fe fdab 	bl	80041dc <HAL_GetTick>
 8005686:	0003      	movs	r3, r0
 8005688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568c:	f7fe fda6 	bl	80041dc <HAL_GetTick>
 8005690:	0002      	movs	r2, r0
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e227      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2202      	movs	r2, #2
 80056a4:	4013      	ands	r3, r2
 80056a6:	d0f1      	beq.n	800568c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a8:	4b56      	ldr	r3, [pc, #344]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	22f8      	movs	r2, #248	; 0xf8
 80056ae:	4393      	bics	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00da      	lsls	r2, r3, #3
 80056b8:	4b52      	ldr	r3, [pc, #328]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056ba:	430a      	orrs	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e018      	b.n	80056f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c0:	4b50      	ldr	r3, [pc, #320]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b4f      	ldr	r3, [pc, #316]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056c6:	2101      	movs	r1, #1
 80056c8:	438a      	bics	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fe fd86 	bl	80041dc <HAL_GetTick>
 80056d0:	0003      	movs	r3, r0
 80056d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d6:	f7fe fd81 	bl	80041dc <HAL_GetTick>
 80056da:	0002      	movs	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e202      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e8:	4b46      	ldr	r3, [pc, #280]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2202      	movs	r2, #2
 80056ee:	4013      	ands	r3, r2
 80056f0:	d1f1      	bne.n	80056d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2208      	movs	r2, #8
 80056f8:	4013      	ands	r3, r2
 80056fa:	d036      	beq.n	800576a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d019      	beq.n	8005738 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005704:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005708:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800570a:	2101      	movs	r1, #1
 800570c:	430a      	orrs	r2, r1
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005710:	f7fe fd64 	bl	80041dc <HAL_GetTick>
 8005714:	0003      	movs	r3, r0
 8005716:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571a:	f7fe fd5f 	bl	80041dc <HAL_GetTick>
 800571e:	0002      	movs	r2, r0
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e1e0      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572c:	4b35      	ldr	r3, [pc, #212]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	2202      	movs	r2, #2
 8005732:	4013      	ands	r3, r2
 8005734:	d0f1      	beq.n	800571a <HAL_RCC_OscConfig+0x242>
 8005736:	e018      	b.n	800576a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005738:	4b32      	ldr	r3, [pc, #200]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800573a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573c:	4b31      	ldr	r3, [pc, #196]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800573e:	2101      	movs	r1, #1
 8005740:	438a      	bics	r2, r1
 8005742:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005744:	f7fe fd4a 	bl	80041dc <HAL_GetTick>
 8005748:	0003      	movs	r3, r0
 800574a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800574e:	f7fe fd45 	bl	80041dc <HAL_GetTick>
 8005752:	0002      	movs	r2, r0
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e1c6      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2202      	movs	r2, #2
 8005766:	4013      	ands	r3, r2
 8005768:	d1f1      	bne.n	800574e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2204      	movs	r2, #4
 8005770:	4013      	ands	r3, r2
 8005772:	d100      	bne.n	8005776 <HAL_RCC_OscConfig+0x29e>
 8005774:	e0b4      	b.n	80058e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005776:	201f      	movs	r0, #31
 8005778:	183b      	adds	r3, r7, r0
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577e:	4b21      	ldr	r3, [pc, #132]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	2380      	movs	r3, #128	; 0x80
 8005784:	055b      	lsls	r3, r3, #21
 8005786:	4013      	ands	r3, r2
 8005788:	d110      	bne.n	80057ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800578c:	69da      	ldr	r2, [r3, #28]
 800578e:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 8005790:	2180      	movs	r1, #128	; 0x80
 8005792:	0549      	lsls	r1, r1, #21
 8005794:	430a      	orrs	r2, r1
 8005796:	61da      	str	r2, [r3, #28]
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	055b      	lsls	r3, r3, #21
 80057a0:	4013      	ands	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057a6:	183b      	adds	r3, r7, r0
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <HAL_RCC_OscConfig+0x338>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4013      	ands	r3, r2
 80057b6:	d11a      	bne.n	80057ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057b8:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_RCC_OscConfig+0x338>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_RCC_OscConfig+0x338>)
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	0049      	lsls	r1, r1, #1
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fe fd09 	bl	80041dc <HAL_GetTick>
 80057ca:	0003      	movs	r3, r0
 80057cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d0:	f7fe fd04 	bl	80041dc <HAL_GetTick>
 80057d4:	0002      	movs	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e185      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_OscConfig+0x338>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d10e      	bne.n	8005814 <HAL_RCC_OscConfig+0x33c>
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	4b02      	ldr	r3, [pc, #8]	; (8005804 <HAL_RCC_OscConfig+0x32c>)
 80057fc:	2101      	movs	r1, #1
 80057fe:	430a      	orrs	r2, r1
 8005800:	621a      	str	r2, [r3, #32]
 8005802:	e035      	b.n	8005870 <HAL_RCC_OscConfig+0x398>
 8005804:	40021000 	.word	0x40021000
 8005808:	fffeffff 	.word	0xfffeffff
 800580c:	fffbffff 	.word	0xfffbffff
 8005810:	40007000 	.word	0x40007000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <HAL_RCC_OscConfig+0x35e>
 800581c:	4bb6      	ldr	r3, [pc, #728]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	4bb5      	ldr	r3, [pc, #724]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005822:	2101      	movs	r1, #1
 8005824:	438a      	bics	r2, r1
 8005826:	621a      	str	r2, [r3, #32]
 8005828:	4bb3      	ldr	r3, [pc, #716]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	4bb2      	ldr	r3, [pc, #712]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800582e:	2104      	movs	r1, #4
 8005830:	438a      	bics	r2, r1
 8005832:	621a      	str	r2, [r3, #32]
 8005834:	e01c      	b.n	8005870 <HAL_RCC_OscConfig+0x398>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b05      	cmp	r3, #5
 800583c:	d10c      	bne.n	8005858 <HAL_RCC_OscConfig+0x380>
 800583e:	4bae      	ldr	r3, [pc, #696]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	4bad      	ldr	r3, [pc, #692]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005844:	2104      	movs	r1, #4
 8005846:	430a      	orrs	r2, r1
 8005848:	621a      	str	r2, [r3, #32]
 800584a:	4bab      	ldr	r3, [pc, #684]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	4baa      	ldr	r3, [pc, #680]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005850:	2101      	movs	r1, #1
 8005852:	430a      	orrs	r2, r1
 8005854:	621a      	str	r2, [r3, #32]
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0x398>
 8005858:	4ba7      	ldr	r3, [pc, #668]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	4ba6      	ldr	r3, [pc, #664]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800585e:	2101      	movs	r1, #1
 8005860:	438a      	bics	r2, r1
 8005862:	621a      	str	r2, [r3, #32]
 8005864:	4ba4      	ldr	r3, [pc, #656]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	4ba3      	ldr	r3, [pc, #652]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800586a:	2104      	movs	r1, #4
 800586c:	438a      	bics	r2, r1
 800586e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d014      	beq.n	80058a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7fe fcb0 	bl	80041dc <HAL_GetTick>
 800587c:	0003      	movs	r3, r0
 800587e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	e009      	b.n	8005896 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fe fcab 	bl	80041dc <HAL_GetTick>
 8005886:	0002      	movs	r2, r0
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	4a9b      	ldr	r2, [pc, #620]	; (8005afc <HAL_RCC_OscConfig+0x624>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e12b      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005896:	4b98      	ldr	r3, [pc, #608]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	2202      	movs	r2, #2
 800589c:	4013      	ands	r3, r2
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x3aa>
 80058a0:	e013      	b.n	80058ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a2:	f7fe fc9b 	bl	80041dc <HAL_GetTick>
 80058a6:	0003      	movs	r3, r0
 80058a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058aa:	e009      	b.n	80058c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fe fc96 	bl	80041dc <HAL_GetTick>
 80058b0:	0002      	movs	r2, r0
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	4a91      	ldr	r2, [pc, #580]	; (8005afc <HAL_RCC_OscConfig+0x624>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e116      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c0:	4b8d      	ldr	r3, [pc, #564]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	2202      	movs	r2, #2
 80058c6:	4013      	ands	r3, r2
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058ca:	231f      	movs	r3, #31
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d105      	bne.n	80058e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d4:	4b88      	ldr	r3, [pc, #544]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	4b87      	ldr	r3, [pc, #540]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80058da:	4989      	ldr	r1, [pc, #548]	; (8005b00 <HAL_RCC_OscConfig+0x628>)
 80058dc:	400a      	ands	r2, r1
 80058de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2210      	movs	r2, #16
 80058e6:	4013      	ands	r3, r2
 80058e8:	d063      	beq.n	80059b2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d12a      	bne.n	8005948 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80058f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f6:	4b80      	ldr	r3, [pc, #512]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80058f8:	2104      	movs	r1, #4
 80058fa:	430a      	orrs	r2, r1
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80058fe:	4b7e      	ldr	r3, [pc, #504]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005902:	4b7d      	ldr	r3, [pc, #500]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005904:	2101      	movs	r1, #1
 8005906:	430a      	orrs	r2, r1
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590a:	f7fe fc67 	bl	80041dc <HAL_GetTick>
 800590e:	0003      	movs	r3, r0
 8005910:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005914:	f7fe fc62 	bl	80041dc <HAL_GetTick>
 8005918:	0002      	movs	r2, r0
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e0e3      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005926:	4b74      	ldr	r3, [pc, #464]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	2202      	movs	r2, #2
 800592c:	4013      	ands	r3, r2
 800592e:	d0f1      	beq.n	8005914 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005930:	4b71      	ldr	r3, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	22f8      	movs	r2, #248	; 0xf8
 8005936:	4393      	bics	r3, r2
 8005938:	0019      	movs	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	00da      	lsls	r2, r3, #3
 8005940:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005942:	430a      	orrs	r2, r1
 8005944:	635a      	str	r2, [r3, #52]	; 0x34
 8005946:	e034      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	3305      	adds	r3, #5
 800594e:	d111      	bne.n	8005974 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005950:	4b69      	ldr	r3, [pc, #420]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005954:	4b68      	ldr	r3, [pc, #416]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005956:	2104      	movs	r1, #4
 8005958:	438a      	bics	r2, r1
 800595a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800595c:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	22f8      	movs	r2, #248	; 0xf8
 8005962:	4393      	bics	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	00da      	lsls	r2, r3, #3
 800596c:	4b62      	ldr	r3, [pc, #392]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800596e:	430a      	orrs	r2, r1
 8005970:	635a      	str	r2, [r3, #52]	; 0x34
 8005972:	e01e      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005974:	4b60      	ldr	r3, [pc, #384]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005978:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 800597a:	2104      	movs	r1, #4
 800597c:	430a      	orrs	r2, r1
 800597e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005980:	4b5d      	ldr	r3, [pc, #372]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005984:	4b5c      	ldr	r3, [pc, #368]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005986:	2101      	movs	r1, #1
 8005988:	438a      	bics	r2, r1
 800598a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598c:	f7fe fc26 	bl	80041dc <HAL_GetTick>
 8005990:	0003      	movs	r3, r0
 8005992:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005996:	f7fe fc21 	bl	80041dc <HAL_GetTick>
 800599a:	0002      	movs	r2, r0
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0a2      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80059a8:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	2202      	movs	r2, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	d1f1      	bne.n	8005996 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d100      	bne.n	80059bc <HAL_RCC_OscConfig+0x4e4>
 80059ba:	e097      	b.n	8005aec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059bc:	4b4e      	ldr	r3, [pc, #312]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	220c      	movs	r2, #12
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d100      	bne.n	80059ca <HAL_RCC_OscConfig+0x4f2>
 80059c8:	e06b      	b.n	8005aa2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d14c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80059d8:	494a      	ldr	r1, [pc, #296]	; (8005b04 <HAL_RCC_OscConfig+0x62c>)
 80059da:	400a      	ands	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059de:	f7fe fbfd 	bl	80041dc <HAL_GetTick>
 80059e2:	0003      	movs	r3, r0
 80059e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fe fbf8 	bl	80041dc <HAL_GetTick>
 80059ec:	0002      	movs	r2, r0
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e079      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059fa:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	049b      	lsls	r3, r3, #18
 8005a02:	4013      	ands	r3, r2
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a06:	4b3c      	ldr	r3, [pc, #240]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4b38      	ldr	r3, [pc, #224]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a16:	430a      	orrs	r2, r1
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a1a:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <HAL_RCC_OscConfig+0x630>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	0019      	movs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	4b32      	ldr	r3, [pc, #200]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	0449      	lsls	r1, r1, #17
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a42:	f7fe fbcb 	bl	80041dc <HAL_GetTick>
 8005a46:	0003      	movs	r3, r0
 8005a48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fe fbc6 	bl	80041dc <HAL_GetTick>
 8005a50:	0002      	movs	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e047      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a5e:	4b26      	ldr	r3, [pc, #152]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	049b      	lsls	r3, r3, #18
 8005a66:	4013      	ands	r3, r2
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x574>
 8005a6a:	e03f      	b.n	8005aec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6c:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x62c>)
 8005a74:	400a      	ands	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fe fbb0 	bl	80041dc <HAL_GetTick>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a82:	f7fe fbab 	bl	80041dc <HAL_GetTick>
 8005a86:	0002      	movs	r2, r0
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e02c      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a94:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	049b      	lsls	r3, r3, #18
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCC_OscConfig+0x5aa>
 8005aa0:	e024      	b.n	8005aec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e01f      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCC_OscConfig+0x620>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	025b      	lsls	r3, r3, #9
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	220f      	movs	r2, #15
 8005ace:	401a      	ands	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	23f0      	movs	r3, #240	; 0xf0
 8005adc:	039b      	lsls	r3, r3, #14
 8005ade:	401a      	ands	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d001      	beq.n	8005aec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b008      	add	sp, #32
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	40021000 	.word	0x40021000
 8005afc:	00001388 	.word	0x00001388
 8005b00:	efffffff 	.word	0xefffffff
 8005b04:	feffffff 	.word	0xfeffffff
 8005b08:	ffc2ffff 	.word	0xffc2ffff

08005b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0b3      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b20:	4b5b      	ldr	r3, [pc, #364]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4013      	ands	r3, r2
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d911      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2e:	4b58      	ldr	r3, [pc, #352]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	4393      	bics	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	4b55      	ldr	r3, [pc, #340]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b40:	4b53      	ldr	r3, [pc, #332]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e09a      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2202      	movs	r2, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2204      	movs	r2, #4
 8005b62:	4013      	ands	r3, r2
 8005b64:	d006      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b66:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005b6c:	21e0      	movs	r1, #224	; 0xe0
 8005b6e:	00c9      	lsls	r1, r1, #3
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b74:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	22f0      	movs	r2, #240	; 0xf0
 8005b7a:	4393      	bics	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	4b44      	ldr	r3, [pc, #272]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d040      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d107      	bne.n	8005baa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9a:	4b3e      	ldr	r3, [pc, #248]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d114      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e06e      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	4b38      	ldr	r3, [pc, #224]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	049b      	lsls	r3, r3, #18
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e062      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc2:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e05b      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd0:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	4393      	bics	r3, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	4b2d      	ldr	r3, [pc, #180]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be4:	f7fe fafa 	bl	80041dc <HAL_GetTick>
 8005be8:	0003      	movs	r3, r0
 8005bea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bec:	e009      	b.n	8005c02 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bee:	f7fe faf5 	bl	80041dc <HAL_GetTick>
 8005bf2:	0002      	movs	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <HAL_RCC_ClockConfig+0x18c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e042      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c02:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	220c      	movs	r2, #12
 8005c08:	401a      	ands	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d1ec      	bne.n	8005bee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d211      	bcs.n	8005c46 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c22:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2201      	movs	r2, #1
 8005c28:	4393      	bics	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	4b18      	ldr	r3, [pc, #96]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c34:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <HAL_RCC_ClockConfig+0x184>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e020      	b.n	8005c88 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c50:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <HAL_RCC_ClockConfig+0x190>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c64:	f000 f820 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c68:	0001      	movs	r1, r0
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <HAL_RCC_ClockConfig+0x188>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	091b      	lsrs	r3, r3, #4
 8005c70:	220f      	movs	r2, #15
 8005c72:	4013      	ands	r3, r2
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_RCC_ClockConfig+0x194>)
 8005c76:	5cd3      	ldrb	r3, [r2, r3]
 8005c78:	000a      	movs	r2, r1
 8005c7a:	40da      	lsrs	r2, r3
 8005c7c:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x198>)
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c80:	2003      	movs	r0, #3
 8005c82:	f7fe fa65 	bl	8004150 <HAL_InitTick>
  
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	0018      	movs	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b004      	add	sp, #16
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40022000 	.word	0x40022000
 8005c94:	40021000 	.word	0x40021000
 8005c98:	00001388 	.word	0x00001388
 8005c9c:	fffff8ff 	.word	0xfffff8ff
 8005ca0:	0800738c 	.word	0x0800738c
 8005ca4:	20000000 	.word	0x20000000

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b08f      	sub	sp, #60	; 0x3c
 8005cac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005cae:	2314      	movs	r3, #20
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	4a2b      	ldr	r2, [pc, #172]	; (8005d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cb6:	c313      	stmia	r3!, {r0, r1, r4}
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cc2:	c313      	stmia	r3!, {r0, r1, r4}
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005cdc:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	220c      	movs	r2, #12
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d002      	beq.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x4a>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d003      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x50>
 8005cf0:	e02d      	b.n	8005d4e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cf6:	e02d      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	0c9b      	lsrs	r3, r3, #18
 8005cfc:	220f      	movs	r2, #15
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2214      	movs	r2, #20
 8005d02:	18ba      	adds	r2, r7, r2
 8005d04:	5cd3      	ldrb	r3, [r2, r3]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005d08:	4b17      	ldr	r3, [pc, #92]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	4013      	ands	r3, r2
 8005d10:	1d3a      	adds	r2, r7, #4
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	2380      	movs	r3, #128	; 0x80
 8005d1a:	025b      	lsls	r3, r3, #9
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d22:	4812      	ldr	r0, [pc, #72]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d24:	f7fa f9f0 	bl	8000108 <__udivsi3>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	4353      	muls	r3, r2
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
 8005d32:	e009      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d36:	000a      	movs	r2, r1
 8005d38:	0152      	lsls	r2, r2, #5
 8005d3a:	1a52      	subs	r2, r2, r1
 8005d3c:	0193      	lsls	r3, r2, #6
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	185b      	adds	r3, r3, r1
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d4c:	e002      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d56:	0018      	movs	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	b00f      	add	sp, #60	; 0x3c
 8005d5c:	bd90      	pop	{r4, r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	08007178 	.word	0x08007178
 8005d64:	08007188 	.word	0x08007188
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	007a1200 	.word	0x007a1200

08005d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e042      	b.n	8005e08 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	223d      	movs	r2, #61	; 0x3d
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d107      	bne.n	8005d9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223c      	movs	r2, #60	; 0x3c
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe f865 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223d      	movs	r2, #61	; 0x3d
 8005da2:	2102      	movs	r1, #2
 8005da4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	0019      	movs	r1, r3
 8005db0:	0010      	movs	r0, r2
 8005db2:	f000 fc41 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2246      	movs	r2, #70	; 0x46
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	223e      	movs	r2, #62	; 0x3e
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	223f      	movs	r2, #63	; 0x3f
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2240      	movs	r2, #64	; 0x40
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	5499      	strb	r1, [r3, r2]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2241      	movs	r2, #65	; 0x41
 8005dda:	2101      	movs	r1, #1
 8005ddc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2242      	movs	r2, #66	; 0x42
 8005de2:	2101      	movs	r1, #1
 8005de4:	5499      	strb	r1, [r3, r2]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2243      	movs	r2, #67	; 0x43
 8005dea:	2101      	movs	r1, #1
 8005dec:	5499      	strb	r1, [r3, r2]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2244      	movs	r2, #68	; 0x44
 8005df2:	2101      	movs	r1, #1
 8005df4:	5499      	strb	r1, [r3, r2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2245      	movs	r2, #69	; 0x45
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	223d      	movs	r2, #61	; 0x3d
 8005e02:	2101      	movs	r1, #1
 8005e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	0018      	movs	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	223d      	movs	r2, #61	; 0x3d
 8005e1c:	5c9b      	ldrb	r3, [r3, r2]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d001      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e030      	b.n	8005e8a <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	223d      	movs	r2, #61	; 0x3d
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_TIM_Base_Start_IT+0x84>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x44>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <HAL_TIM_Base_Start_IT+0x88>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d111      	bne.n	8005e78 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2207      	movs	r2, #7
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d010      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2101      	movs	r1, #1
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	e007      	b.n	8005e88 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2101      	movs	r1, #1
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b004      	add	sp, #16
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400

08005e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	223d      	movs	r2, #61	; 0x3d
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	223c      	movs	r2, #60	; 0x3c
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f839 	bl	8005f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	223d      	movs	r2, #61	; 0x3d
 8005ece:	2102      	movs	r1, #2
 8005ed0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	0019      	movs	r1, r3
 8005edc:	0010      	movs	r0, r2
 8005ede:	f000 fbab 	bl	8006638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2246      	movs	r2, #70	; 0x46
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223e      	movs	r2, #62	; 0x3e
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	223f      	movs	r2, #63	; 0x3f
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2240      	movs	r2, #64	; 0x40
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2241      	movs	r2, #65	; 0x41
 8005f06:	2101      	movs	r1, #1
 8005f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2242      	movs	r2, #66	; 0x42
 8005f0e:	2101      	movs	r1, #1
 8005f10:	5499      	strb	r1, [r3, r2]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2243      	movs	r2, #67	; 0x43
 8005f16:	2101      	movs	r1, #1
 8005f18:	5499      	strb	r1, [r3, r2]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2244      	movs	r2, #68	; 0x44
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2245      	movs	r2, #69	; 0x45
 8005f26:	2101      	movs	r1, #1
 8005f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	223d      	movs	r2, #61	; 0x3d
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b002      	add	sp, #8
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f44:	46c0      	nop			; (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d108      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x22>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	223e      	movs	r2, #62	; 0x3e
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	4193      	sbcs	r3, r2
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e01f      	b.n	8005fae <HAL_TIM_PWM_Start+0x62>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d108      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x3a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	223f      	movs	r2, #63	; 0x3f
 8005f78:	5c9b      	ldrb	r3, [r3, r2]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	1e5a      	subs	r2, r3, #1
 8005f80:	4193      	sbcs	r3, r2
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e013      	b.n	8005fae <HAL_TIM_PWM_Start+0x62>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d108      	bne.n	8005f9e <HAL_TIM_PWM_Start+0x52>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2240      	movs	r2, #64	; 0x40
 8005f90:	5c9b      	ldrb	r3, [r3, r2]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	4193      	sbcs	r3, r2
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e007      	b.n	8005fae <HAL_TIM_PWM_Start+0x62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2241      	movs	r2, #65	; 0x41
 8005fa2:	5c9b      	ldrb	r3, [r3, r2]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	4193      	sbcs	r3, r2
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e064      	b.n	8006080 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0x7a>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	223e      	movs	r2, #62	; 0x3e
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	5499      	strb	r1, [r3, r2]
 8005fc4:	e013      	b.n	8005fee <HAL_TIM_PWM_Start+0xa2>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d104      	bne.n	8005fd6 <HAL_TIM_PWM_Start+0x8a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	223f      	movs	r2, #63	; 0x3f
 8005fd0:	2102      	movs	r1, #2
 8005fd2:	5499      	strb	r1, [r3, r2]
 8005fd4:	e00b      	b.n	8005fee <HAL_TIM_PWM_Start+0xa2>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d104      	bne.n	8005fe6 <HAL_TIM_PWM_Start+0x9a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	5499      	strb	r1, [r3, r2]
 8005fe4:	e003      	b.n	8005fee <HAL_TIM_PWM_Start+0xa2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2241      	movs	r2, #65	; 0x41
 8005fea:	2102      	movs	r1, #2
 8005fec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f000 fe04 	bl	8006c04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_TIM_PWM_Start+0x13c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_TIM_PWM_Start+0xce>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <HAL_TIM_PWM_Start+0x140>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_TIM_PWM_Start+0xce>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <HAL_TIM_PWM_Start+0x144>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <HAL_TIM_PWM_Start+0xd2>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <HAL_TIM_PWM_Start+0xd4>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	0209      	lsls	r1, r1, #8
 8006032:	430a      	orrs	r2, r1
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	; (8006088 <HAL_TIM_PWM_Start+0x13c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIM_PWM_Start+0xfe>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a13      	ldr	r2, [pc, #76]	; (8006094 <HAL_TIM_PWM_Start+0x148>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d111      	bne.n	800606e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2207      	movs	r2, #7
 8006052:	4013      	ands	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d010      	beq.n	800607e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2101      	movs	r1, #1
 8006068:	430a      	orrs	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	e007      	b.n	800607e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2101      	movs	r1, #1
 800607a:	430a      	orrs	r2, r1
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b004      	add	sp, #16
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40014400 	.word	0x40014400
 8006090:	40014800 	.word	0x40014800
 8006094:	40000400 	.word	0x40000400

08006098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2202      	movs	r2, #2
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d124      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d11d      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2203      	movs	r2, #3
 80060c2:	4252      	negs	r2, r2
 80060c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2203      	movs	r2, #3
 80060d4:	4013      	ands	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 fa94 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80060e0:	e007      	b.n	80060f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f000 fa87 	bl	80065f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f000 fa93 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2204      	movs	r2, #4
 8006100:	4013      	ands	r3, r2
 8006102:	2b04      	cmp	r3, #4
 8006104:	d125      	bne.n	8006152 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2204      	movs	r2, #4
 800610e:	4013      	ands	r3, r2
 8006110:	2b04      	cmp	r3, #4
 8006112:	d11e      	bne.n	8006152 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2205      	movs	r2, #5
 800611a:	4252      	negs	r2, r2
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	23c0      	movs	r3, #192	; 0xc0
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4013      	ands	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0018      	movs	r0, r3
 8006136:	f000 fa67 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 800613a:	e007      	b.n	800614c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	0018      	movs	r0, r3
 8006140:	f000 fa5a 	bl	80065f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0018      	movs	r0, r3
 8006148:	f000 fa66 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2208      	movs	r2, #8
 800615a:	4013      	ands	r3, r2
 800615c:	2b08      	cmp	r3, #8
 800615e:	d124      	bne.n	80061aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2208      	movs	r2, #8
 8006168:	4013      	ands	r3, r2
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11d      	bne.n	80061aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2209      	movs	r2, #9
 8006174:	4252      	negs	r2, r2
 8006176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2204      	movs	r2, #4
 800617c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	2203      	movs	r2, #3
 8006186:	4013      	ands	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	f000 fa3b 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006192:	e007      	b.n	80061a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0018      	movs	r0, r3
 8006198:	f000 fa2e 	bl	80065f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 fa3a 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2210      	movs	r2, #16
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d125      	bne.n	8006204 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2210      	movs	r2, #16
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d11e      	bne.n	8006204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2211      	movs	r2, #17
 80061cc:	4252      	negs	r2, r2
 80061ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2208      	movs	r2, #8
 80061d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	23c0      	movs	r3, #192	; 0xc0
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4013      	ands	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	0018      	movs	r0, r3
 80061e8:	f000 fa0e 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e007      	b.n	80061fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fa01 	bl	80065f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 fa0d 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2201      	movs	r2, #1
 800620c:	4013      	ands	r3, r2
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10f      	bne.n	8006232 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	4013      	ands	r3, r2
 800621c:	2b01      	cmp	r3, #1
 800621e:	d108      	bne.n	8006232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2202      	movs	r2, #2
 8006226:	4252      	negs	r2, r2
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	0018      	movs	r0, r3
 800622e:	f7fd f9dd 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2280      	movs	r2, #128	; 0x80
 800623a:	4013      	ands	r3, r2
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d10f      	bne.n	8006260 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2280      	movs	r2, #128	; 0x80
 8006248:	4013      	ands	r3, r2
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d108      	bne.n	8006260 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2281      	movs	r2, #129	; 0x81
 8006254:	4252      	negs	r2, r2
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 fdae 	bl	8006dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	4013      	ands	r3, r2
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d10f      	bne.n	800628e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	2240      	movs	r2, #64	; 0x40
 8006276:	4013      	ands	r3, r2
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d108      	bne.n	800628e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2241      	movs	r2, #65	; 0x41
 8006282:	4252      	negs	r2, r2
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 f9cd 	bl	8006628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2220      	movs	r2, #32
 8006296:	4013      	ands	r3, r2
 8006298:	2b20      	cmp	r3, #32
 800629a:	d10f      	bne.n	80062bc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d108      	bne.n	80062bc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2221      	movs	r2, #33	; 0x21
 80062b0:	4252      	negs	r2, r2
 80062b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 fd78 	bl	8006dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2317      	movs	r3, #23
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	223c      	movs	r2, #60	; 0x3c
 80062dc:	5c9b      	ldrb	r3, [r3, r2]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e0ad      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	223c      	movs	r2, #60	; 0x3c
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b0c      	cmp	r3, #12
 80062f2:	d100      	bne.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80062f4:	e076      	b.n	80063e4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	d900      	bls.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x3a>
 80062fc:	e095      	b.n	800642a <HAL_TIM_PWM_ConfigChannel+0x166>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d04e      	beq.n	80063a2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d900      	bls.n	800630c <HAL_TIM_PWM_ConfigChannel+0x48>
 800630a:	e08e      	b.n	800642a <HAL_TIM_PWM_ConfigChannel+0x166>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d021      	beq.n	800635c <HAL_TIM_PWM_ConfigChannel+0x98>
 8006318:	e087      	b.n	800642a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f000 f9f4 	bl	8006710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2108      	movs	r1, #8
 8006334:	430a      	orrs	r2, r1
 8006336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2104      	movs	r1, #4
 8006344:	438a      	bics	r2, r1
 8006346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6999      	ldr	r1, [r3, #24]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	619a      	str	r2, [r3, #24]
      break;
 800635a:	e06b      	b.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f000 fa51 	bl	800680c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	0109      	lsls	r1, r1, #4
 8006378:	430a      	orrs	r2, r1
 800637a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4931      	ldr	r1, [pc, #196]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006388:	400a      	ands	r2, r1
 800638a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6999      	ldr	r1, [r3, #24]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	619a      	str	r2, [r3, #24]
      break;
 80063a0:	e048      	b.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f000 faac 	bl	8006908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2108      	movs	r1, #8
 80063bc:	430a      	orrs	r2, r1
 80063be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2104      	movs	r1, #4
 80063cc:	438a      	bics	r2, r1
 80063ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69d9      	ldr	r1, [r3, #28]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	61da      	str	r2, [r3, #28]
      break;
 80063e2:	e027      	b.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	0011      	movs	r1, r2
 80063ec:	0018      	movs	r0, r3
 80063ee:	f000 fb0b 	bl	8006a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2180      	movs	r1, #128	; 0x80
 80063fe:	0109      	lsls	r1, r1, #4
 8006400:	430a      	orrs	r2, r1
 8006402:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	490f      	ldr	r1, [pc, #60]	; (800644c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006410:	400a      	ands	r2, r1
 8006412:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69d9      	ldr	r1, [r3, #28]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	61da      	str	r2, [r3, #28]
      break;
 8006428:	e004      	b.n	8006434 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800642a:	2317      	movs	r3, #23
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2201      	movs	r2, #1
 8006430:	701a      	strb	r2, [r3, #0]
      break;
 8006432:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	223c      	movs	r2, #60	; 0x3c
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

  return status;
 800643c:	2317      	movs	r3, #23
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	781b      	ldrb	r3, [r3, #0]
}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b006      	add	sp, #24
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	fffffbff 	.word	0xfffffbff

08006450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645a:	230f      	movs	r3, #15
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	223c      	movs	r2, #60	; 0x3c
 8006466:	5c9b      	ldrb	r3, [r3, r2]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIM_ConfigClockSource+0x20>
 800646c:	2302      	movs	r3, #2
 800646e:	e0bc      	b.n	80065ea <HAL_TIM_ConfigClockSource+0x19a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	223c      	movs	r2, #60	; 0x3c
 8006474:	2101      	movs	r1, #1
 8006476:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	223d      	movs	r2, #61	; 0x3d
 800647c:	2102      	movs	r1, #2
 800647e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2277      	movs	r2, #119	; 0x77
 800648c:	4393      	bics	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a58      	ldr	r2, [pc, #352]	; (80065f4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006494:	4013      	ands	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	0192      	lsls	r2, r2, #6
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d040      	beq.n	800652e <HAL_TIM_ConfigClockSource+0xde>
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	0192      	lsls	r2, r2, #6
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d900      	bls.n	80064b6 <HAL_TIM_ConfigClockSource+0x66>
 80064b4:	e088      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	0152      	lsls	r2, r2, #5
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d100      	bne.n	80064c0 <HAL_TIM_ConfigClockSource+0x70>
 80064be:	e088      	b.n	80065d2 <HAL_TIM_ConfigClockSource+0x182>
 80064c0:	2280      	movs	r2, #128	; 0x80
 80064c2:	0152      	lsls	r2, r2, #5
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d900      	bls.n	80064ca <HAL_TIM_ConfigClockSource+0x7a>
 80064c8:	e07e      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064ca:	2b70      	cmp	r3, #112	; 0x70
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_ConfigClockSource+0xb0>
 80064ce:	d900      	bls.n	80064d2 <HAL_TIM_ConfigClockSource+0x82>
 80064d0:	e07a      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064d2:	2b60      	cmp	r3, #96	; 0x60
 80064d4:	d04f      	beq.n	8006576 <HAL_TIM_ConfigClockSource+0x126>
 80064d6:	d900      	bls.n	80064da <HAL_TIM_ConfigClockSource+0x8a>
 80064d8:	e076      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064da:	2b50      	cmp	r3, #80	; 0x50
 80064dc:	d03b      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x106>
 80064de:	d900      	bls.n	80064e2 <HAL_TIM_ConfigClockSource+0x92>
 80064e0:	e072      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d057      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0x146>
 80064e6:	d900      	bls.n	80064ea <HAL_TIM_ConfigClockSource+0x9a>
 80064e8:	e06e      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064ea:	2b30      	cmp	r3, #48	; 0x30
 80064ec:	d063      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x166>
 80064ee:	d86b      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d060      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x166>
 80064f4:	d868      	bhi.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d05d      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x166>
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d05b      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x166>
 80064fe:	e063      	b.n	80065c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6899      	ldr	r1, [r3, #8]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f000 fb58 	bl	8006bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2277      	movs	r2, #119	; 0x77
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	609a      	str	r2, [r3, #8]
      break;
 800652c:	e052      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6899      	ldr	r1, [r3, #8]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f000 fb41 	bl	8006bc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	01c9      	lsls	r1, r1, #7
 8006550:	430a      	orrs	r2, r1
 8006552:	609a      	str	r2, [r3, #8]
      break;
 8006554:	e03e      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6859      	ldr	r1, [r3, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	001a      	movs	r2, r3
 8006564:	f000 fab4 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2150      	movs	r1, #80	; 0x50
 800656e:	0018      	movs	r0, r3
 8006570:	f000 fb0e 	bl	8006b90 <TIM_ITRx_SetConfig>
      break;
 8006574:	e02e      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6859      	ldr	r1, [r3, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	001a      	movs	r2, r3
 8006584:	f000 fad2 	bl	8006b2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2160      	movs	r1, #96	; 0x60
 800658e:	0018      	movs	r0, r3
 8006590:	f000 fafe 	bl	8006b90 <TIM_ITRx_SetConfig>
      break;
 8006594:	e01e      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6859      	ldr	r1, [r3, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	001a      	movs	r2, r3
 80065a4:	f000 fa94 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 faee 	bl	8006b90 <TIM_ITRx_SetConfig>
      break;
 80065b4:	e00e      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	0019      	movs	r1, r3
 80065c0:	0010      	movs	r0, r2
 80065c2:	f000 fae5 	bl	8006b90 <TIM_ITRx_SetConfig>
      break;
 80065c6:	e005      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80065c8:	230f      	movs	r3, #15
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
      break;
 80065d0:	e000      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80065d2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	223d      	movs	r2, #61	; 0x3d
 80065d8:	2101      	movs	r1, #1
 80065da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	223c      	movs	r2, #60	; 0x3c
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]

  return status;
 80065e4:	230f      	movs	r3, #15
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b004      	add	sp, #16
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	ffff00ff 	.word	0xffff00ff

080065f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006600:	46c0      	nop			; (mov r8, r8)
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006610:	46c0      	nop			; (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b002      	add	sp, #8
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}

08006638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_Base_SetConfig+0xc0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_Base_SetConfig+0x20>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <TIM_Base_SetConfig+0xc4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d108      	bne.n	800666a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2270      	movs	r2, #112	; 0x70
 800665c:	4393      	bics	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <TIM_Base_SetConfig+0xc0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00f      	beq.n	8006692 <TIM_Base_SetConfig+0x5a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a21      	ldr	r2, [pc, #132]	; (80066fc <TIM_Base_SetConfig+0xc4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00b      	beq.n	8006692 <TIM_Base_SetConfig+0x5a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a20      	ldr	r2, [pc, #128]	; (8006700 <TIM_Base_SetConfig+0xc8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <TIM_Base_SetConfig+0x5a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <TIM_Base_SetConfig+0xcc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_Base_SetConfig+0x5a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <TIM_Base_SetConfig+0xd0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d108      	bne.n	80066a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a1d      	ldr	r2, [pc, #116]	; (800670c <TIM_Base_SetConfig+0xd4>)
 8006696:	4013      	ands	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	4393      	bics	r3, r2
 80066aa:	001a      	movs	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <TIM_Base_SetConfig+0xc0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_Base_SetConfig+0xaa>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <TIM_Base_SetConfig+0xcc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_Base_SetConfig+0xaa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a0a      	ldr	r2, [pc, #40]	; (8006708 <TIM_Base_SetConfig+0xd0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d103      	bne.n	80066ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	615a      	str	r2, [r3, #20]
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40000400 	.word	0x40000400
 8006700:	40002000 	.word	0x40002000
 8006704:	40014400 	.word	0x40014400
 8006708:	40014800 	.word	0x40014800
 800670c:	fffffcff 	.word	0xfffffcff

08006710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	2201      	movs	r2, #1
 8006720:	4393      	bics	r3, r2
 8006722:	001a      	movs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2270      	movs	r2, #112	; 0x70
 800673e:	4393      	bics	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2203      	movs	r2, #3
 8006746:	4393      	bics	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2202      	movs	r2, #2
 8006758:	4393      	bics	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <TIM_OC1_SetConfig+0xe8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <TIM_OC1_SetConfig+0x6e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a22      	ldr	r2, [pc, #136]	; (80067fc <TIM_OC1_SetConfig+0xec>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC1_SetConfig+0x6e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <TIM_OC1_SetConfig+0xf0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10c      	bne.n	8006798 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2208      	movs	r2, #8
 8006782:	4393      	bics	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2204      	movs	r2, #4
 8006794:	4393      	bics	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <TIM_OC1_SetConfig+0xe8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <TIM_OC1_SetConfig+0xa0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a16      	ldr	r2, [pc, #88]	; (80067fc <TIM_OC1_SetConfig+0xec>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC1_SetConfig+0xa0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a15      	ldr	r2, [pc, #84]	; (8006800 <TIM_OC1_SetConfig+0xf0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d111      	bne.n	80067d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4a14      	ldr	r2, [pc, #80]	; (8006804 <TIM_OC1_SetConfig+0xf4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4a13      	ldr	r2, [pc, #76]	; (8006808 <TIM_OC1_SetConfig+0xf8>)
 80067bc:	4013      	ands	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	46bd      	mov	sp, r7
 80067f2:	b006      	add	sp, #24
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	fffffeff 	.word	0xfffffeff
 8006808:	fffffdff 	.word	0xfffffdff

0800680c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	2210      	movs	r2, #16
 800681c:	4393      	bics	r3, r2
 800681e:	001a      	movs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a2c      	ldr	r2, [pc, #176]	; (80068ec <TIM_OC2_SetConfig+0xe0>)
 800683a:	4013      	ands	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a2b      	ldr	r2, [pc, #172]	; (80068f0 <TIM_OC2_SetConfig+0xe4>)
 8006842:	4013      	ands	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2220      	movs	r2, #32
 8006856:	4393      	bics	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <TIM_OC2_SetConfig+0xe8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10d      	bne.n	800688a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2280      	movs	r2, #128	; 0x80
 8006872:	4393      	bics	r3, r2
 8006874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2240      	movs	r2, #64	; 0x40
 8006886:	4393      	bics	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <TIM_OC2_SetConfig+0xe8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d007      	beq.n	80068a2 <TIM_OC2_SetConfig+0x96>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <TIM_OC2_SetConfig+0xec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_OC2_SetConfig+0x96>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a17      	ldr	r2, [pc, #92]	; (80068fc <TIM_OC2_SetConfig+0xf0>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d113      	bne.n	80068ca <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4a16      	ldr	r2, [pc, #88]	; (8006900 <TIM_OC2_SetConfig+0xf4>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4a15      	ldr	r2, [pc, #84]	; (8006904 <TIM_OC2_SetConfig+0xf8>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	46c0      	nop			; (mov r8, r8)
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b006      	add	sp, #24
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	ffff8fff 	.word	0xffff8fff
 80068f0:	fffffcff 	.word	0xfffffcff
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40014400 	.word	0x40014400
 80068fc:	40014800 	.word	0x40014800
 8006900:	fffffbff 	.word	0xfffffbff
 8006904:	fffff7ff 	.word	0xfffff7ff

08006908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	4a33      	ldr	r2, [pc, #204]	; (80069e4 <TIM_OC3_SetConfig+0xdc>)
 8006918:	401a      	ands	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2270      	movs	r2, #112	; 0x70
 8006934:	4393      	bics	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2203      	movs	r2, #3
 800693c:	4393      	bics	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_OC3_SetConfig+0xe0>)
 800694e:	4013      	ands	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a22      	ldr	r2, [pc, #136]	; (80069ec <TIM_OC3_SetConfig+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d10d      	bne.n	8006982 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <TIM_OC3_SetConfig+0xe8>)
 800696a:	4013      	ands	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <TIM_OC3_SetConfig+0xec>)
 800697e:	4013      	ands	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <TIM_OC3_SetConfig+0xe4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC3_SetConfig+0x92>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1a      	ldr	r2, [pc, #104]	; (80069f8 <TIM_OC3_SetConfig+0xf0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0x92>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <TIM_OC3_SetConfig+0xf4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <TIM_OC3_SetConfig+0xf8>)
 800699e:	4013      	ands	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <TIM_OC3_SetConfig+0xfc>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	46c0      	nop			; (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	b006      	add	sp, #24
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	fffffeff 	.word	0xfffffeff
 80069e8:	fffffdff 	.word	0xfffffdff
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	fffff7ff 	.word	0xfffff7ff
 80069f4:	fffffbff 	.word	0xfffffbff
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	ffffefff 	.word	0xffffefff
 8006a04:	ffffdfff 	.word	0xffffdfff

08006a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	4a26      	ldr	r2, [pc, #152]	; (8006ab0 <TIM_OC4_SetConfig+0xa8>)
 8006a18:	401a      	ands	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <TIM_OC4_SetConfig+0xac>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <TIM_OC4_SetConfig+0xb0>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <TIM_OC4_SetConfig+0xb4>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <TIM_OC4_SetConfig+0xb8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC4_SetConfig+0x70>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <TIM_OC4_SetConfig+0xbc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC4_SetConfig+0x70>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <TIM_OC4_SetConfig+0xc0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d109      	bne.n	8006a8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	4a14      	ldr	r2, [pc, #80]	; (8006acc <TIM_OC4_SetConfig+0xc4>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	019b      	lsls	r3, r3, #6
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b006      	add	sp, #24
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	ffffefff 	.word	0xffffefff
 8006ab4:	ffff8fff 	.word	0xffff8fff
 8006ab8:	fffffcff 	.word	0xfffffcff
 8006abc:	ffffdfff 	.word	0xffffdfff
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40014400 	.word	0x40014400
 8006ac8:	40014800 	.word	0x40014800
 8006acc:	ffffbfff 	.word	0xffffbfff

08006ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4393      	bics	r3, r2
 8006aea:	001a      	movs	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	22f0      	movs	r2, #240	; 0xf0
 8006afa:	4393      	bics	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b006      	add	sp, #24
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	2210      	movs	r2, #16
 8006b3e:	4393      	bics	r3, r2
 8006b40:	001a      	movs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4a0d      	ldr	r2, [pc, #52]	; (8006b8c <TIM_TI2_ConfigInputStage+0x60>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	22a0      	movs	r2, #160	; 0xa0
 8006b68:	4393      	bics	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b006      	add	sp, #24
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	ffff0fff 	.word	0xffff0fff

08006b90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2270      	movs	r2, #112	; 0x70
 8006ba4:	4393      	bics	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	2207      	movs	r2, #7
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	609a      	str	r2, [r3, #8]
}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b004      	add	sp, #16
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <TIM_ETR_SetConfig+0x3c>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b006      	add	sp, #24
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	ffff00ff 	.word	0xffff00ff

08006c04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	221f      	movs	r2, #31
 8006c14:	4013      	ands	r3, r2
 8006c16:	2201      	movs	r2, #1
 8006c18:	409a      	lsls	r2, r3
 8006c1a:	0013      	movs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	43d2      	mvns	r2, r2
 8006c26:	401a      	ands	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	211f      	movs	r1, #31
 8006c34:	400b      	ands	r3, r1
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	4099      	lsls	r1, r3
 8006c3a:	000b      	movs	r3, r1
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	46bd      	mov	sp, r7
 8006c46:	b006      	add	sp, #24
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	223c      	movs	r2, #60	; 0x3c
 8006c5a:	5c9b      	ldrb	r3, [r3, r2]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e03c      	b.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	223c      	movs	r2, #60	; 0x3c
 8006c68:	2101      	movs	r1, #1
 8006c6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	223d      	movs	r2, #61	; 0x3d
 8006c70:	2102      	movs	r1, #2
 8006c72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2270      	movs	r2, #112	; 0x70
 8006c88:	4393      	bics	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a11      	ldr	r2, [pc, #68]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a0f      	ldr	r2, [pc, #60]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d10c      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2280      	movs	r2, #128	; 0x80
 8006cb6:	4393      	bics	r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	223d      	movs	r2, #61	; 0x3d
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	223c      	movs	r2, #60	; 0x3c
 8006cd8:	2100      	movs	r1, #0
 8006cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40000400 	.word	0x40000400

08006cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	223c      	movs	r2, #60	; 0x3c
 8006d02:	5c9b      	ldrb	r3, [r3, r2]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e03e      	b.n	8006d8a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	223c      	movs	r2, #60	; 0x3c
 8006d10:	2101      	movs	r1, #1
 8006d12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	4393      	bics	r3, r2
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006d28:	401a      	ands	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006d36:	401a      	ands	r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006d44:	401a      	ands	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006d52:	401a      	ands	r2, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006d60:	401a      	ands	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4a0e      	ldr	r2, [pc, #56]	; (8006da8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006d6e:	401a      	ands	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	223c      	movs	r2, #60	; 0x3c
 8006d84:	2100      	movs	r1, #0
 8006d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b004      	add	sp, #16
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	fffffcff 	.word	0xfffffcff
 8006d98:	fffffbff 	.word	0xfffffbff
 8006d9c:	fffff7ff 	.word	0xfffff7ff
 8006da0:	ffffefff 	.word	0xffffefff
 8006da4:	ffffdfff 	.word	0xffffdfff
 8006da8:	ffffbfff 	.word	0xffffbfff

08006dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <_ZdlPvj>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f000 f801 	bl	8006dd4 <_ZdlPv>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <_ZdlPv>:
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	f000 f825 	bl	8006e24 <free>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <__libc_init_array>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	2600      	movs	r6, #0
 8006de0:	4d0c      	ldr	r5, [pc, #48]	; (8006e14 <__libc_init_array+0x38>)
 8006de2:	4c0d      	ldr	r4, [pc, #52]	; (8006e18 <__libc_init_array+0x3c>)
 8006de4:	1b64      	subs	r4, r4, r5
 8006de6:	10a4      	asrs	r4, r4, #2
 8006de8:	42a6      	cmp	r6, r4
 8006dea:	d109      	bne.n	8006e00 <__libc_init_array+0x24>
 8006dec:	2600      	movs	r6, #0
 8006dee:	f000 f891 	bl	8006f14 <_init>
 8006df2:	4d0a      	ldr	r5, [pc, #40]	; (8006e1c <__libc_init_array+0x40>)
 8006df4:	4c0a      	ldr	r4, [pc, #40]	; (8006e20 <__libc_init_array+0x44>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	42a6      	cmp	r6, r4
 8006dfc:	d105      	bne.n	8006e0a <__libc_init_array+0x2e>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	00b3      	lsls	r3, r6, #2
 8006e02:	58eb      	ldr	r3, [r5, r3]
 8006e04:	4798      	blx	r3
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7ee      	b.n	8006de8 <__libc_init_array+0xc>
 8006e0a:	00b3      	lsls	r3, r6, #2
 8006e0c:	58eb      	ldr	r3, [r5, r3]
 8006e0e:	4798      	blx	r3
 8006e10:	3601      	adds	r6, #1
 8006e12:	e7f2      	b.n	8006dfa <__libc_init_array+0x1e>
 8006e14:	0800739c 	.word	0x0800739c
 8006e18:	0800739c 	.word	0x0800739c
 8006e1c:	0800739c 	.word	0x0800739c
 8006e20:	080073a4 	.word	0x080073a4

08006e24 <free>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <free+0x10>)
 8006e28:	0001      	movs	r1, r0
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	f000 f816 	bl	8006e5c <_free_r>
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	2000000c 	.word	0x2000000c

08006e38 <memcpy>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d100      	bne.n	8006e42 <memcpy+0xa>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	5ccc      	ldrb	r4, [r1, r3]
 8006e44:	54c4      	strb	r4, [r0, r3]
 8006e46:	3301      	adds	r3, #1
 8006e48:	e7f8      	b.n	8006e3c <memcpy+0x4>

08006e4a <memset>:
 8006e4a:	0003      	movs	r3, r0
 8006e4c:	1882      	adds	r2, r0, r2
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d100      	bne.n	8006e54 <memset+0xa>
 8006e52:	4770      	bx	lr
 8006e54:	7019      	strb	r1, [r3, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	e7f9      	b.n	8006e4e <memset+0x4>
	...

08006e5c <_free_r>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	0005      	movs	r5, r0
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d010      	beq.n	8006e86 <_free_r+0x2a>
 8006e64:	1f0c      	subs	r4, r1, #4
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da00      	bge.n	8006e6e <_free_r+0x12>
 8006e6c:	18e4      	adds	r4, r4, r3
 8006e6e:	0028      	movs	r0, r5
 8006e70:	f000 f83e 	bl	8006ef0 <__malloc_lock>
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <_free_r+0x90>)
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <_free_r+0x2c>
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6014      	str	r4, [r2, #0]
 8006e80:	0028      	movs	r0, r5
 8006e82:	f000 f83d 	bl	8006f00 <__malloc_unlock>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d908      	bls.n	8006e9e <_free_r+0x42>
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	1860      	adds	r0, r4, r1
 8006e90:	4283      	cmp	r3, r0
 8006e92:	d1f3      	bne.n	8006e7c <_free_r+0x20>
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	1841      	adds	r1, r0, r1
 8006e9a:	6021      	str	r1, [r4, #0]
 8006e9c:	e7ee      	b.n	8006e7c <_free_r+0x20>
 8006e9e:	001a      	movs	r2, r3
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <_free_r+0x4e>
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	d9f9      	bls.n	8006e9e <_free_r+0x42>
 8006eaa:	6811      	ldr	r1, [r2, #0]
 8006eac:	1850      	adds	r0, r2, r1
 8006eae:	42a0      	cmp	r0, r4
 8006eb0:	d10b      	bne.n	8006eca <_free_r+0x6e>
 8006eb2:	6820      	ldr	r0, [r4, #0]
 8006eb4:	1809      	adds	r1, r1, r0
 8006eb6:	1850      	adds	r0, r2, r1
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	4283      	cmp	r3, r0
 8006ebc:	d1e0      	bne.n	8006e80 <_free_r+0x24>
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	1841      	adds	r1, r0, r1
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	6053      	str	r3, [r2, #4]
 8006ec8:	e7da      	b.n	8006e80 <_free_r+0x24>
 8006eca:	42a0      	cmp	r0, r4
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x78>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e7d5      	b.n	8006e80 <_free_r+0x24>
 8006ed4:	6821      	ldr	r1, [r4, #0]
 8006ed6:	1860      	adds	r0, r4, r1
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d103      	bne.n	8006ee4 <_free_r+0x88>
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	1841      	adds	r1, r0, r1
 8006ee2:	6021      	str	r1, [r4, #0]
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6054      	str	r4, [r2, #4]
 8006ee8:	e7ca      	b.n	8006e80 <_free_r+0x24>
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	200005b4 	.word	0x200005b4

08006ef0 <__malloc_lock>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4802      	ldr	r0, [pc, #8]	; (8006efc <__malloc_lock+0xc>)
 8006ef4:	f000 f80c 	bl	8006f10 <__retarget_lock_acquire_recursive>
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	2000074c 	.word	0x2000074c

08006f00 <__malloc_unlock>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4802      	ldr	r0, [pc, #8]	; (8006f0c <__malloc_unlock+0xc>)
 8006f04:	f000 f805 	bl	8006f12 <__retarget_lock_release_recursive>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	2000074c 	.word	0x2000074c

08006f10 <__retarget_lock_acquire_recursive>:
 8006f10:	4770      	bx	lr

08006f12 <__retarget_lock_release_recursive>:
 8006f12:	4770      	bx	lr

08006f14 <_init>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr

08006f20 <_fini>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f26:	bc08      	pop	{r3}
 8006f28:	469e      	mov	lr, r3
 8006f2a:	4770      	bx	lr
