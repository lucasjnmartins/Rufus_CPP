
Rufus_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b60  08005b60  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005b60  08005b60  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b60  08005b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000070  08005be0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08005be0  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e49a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e6  00000000  00000000  0002e532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000325e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a87  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011484  00000000  00000000  00044cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ff5d  00000000  00000000  0005613b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a8  00000000  00000000  000b60ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080059c8 	.word	0x080059c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080059c8 	.word	0x080059c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fadd>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4646      	mov	r6, r8
 80003f8:	46d6      	mov	lr, sl
 80003fa:	464f      	mov	r7, r9
 80003fc:	024d      	lsls	r5, r1, #9
 80003fe:	0242      	lsls	r2, r0, #9
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a52      	lsrs	r2, r2, #9
 8000404:	0a6e      	lsrs	r6, r5, #9
 8000406:	0047      	lsls	r7, r0, #1
 8000408:	46b0      	mov	r8, r6
 800040a:	0e3f      	lsrs	r7, r7, #24
 800040c:	004e      	lsls	r6, r1, #1
 800040e:	0fc4      	lsrs	r4, r0, #31
 8000410:	00d0      	lsls	r0, r2, #3
 8000412:	4694      	mov	ip, r2
 8000414:	003b      	movs	r3, r7
 8000416:	4682      	mov	sl, r0
 8000418:	0e36      	lsrs	r6, r6, #24
 800041a:	0fc9      	lsrs	r1, r1, #31
 800041c:	09ad      	lsrs	r5, r5, #6
 800041e:	428c      	cmp	r4, r1
 8000420:	d06d      	beq.n	80004fe <__aeabi_fadd+0x10a>
 8000422:	1bb8      	subs	r0, r7, r6
 8000424:	4681      	mov	r9, r0
 8000426:	2800      	cmp	r0, #0
 8000428:	dd4d      	ble.n	80004c6 <__aeabi_fadd+0xd2>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d100      	bne.n	8000430 <__aeabi_fadd+0x3c>
 800042e:	e088      	b.n	8000542 <__aeabi_fadd+0x14e>
 8000430:	2fff      	cmp	r7, #255	; 0xff
 8000432:	d05a      	beq.n	80004ea <__aeabi_fadd+0xf6>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	04db      	lsls	r3, r3, #19
 8000438:	431d      	orrs	r5, r3
 800043a:	464b      	mov	r3, r9
 800043c:	2201      	movs	r2, #1
 800043e:	2b1b      	cmp	r3, #27
 8000440:	dc0a      	bgt.n	8000458 <__aeabi_fadd+0x64>
 8000442:	002b      	movs	r3, r5
 8000444:	464a      	mov	r2, r9
 8000446:	4649      	mov	r1, r9
 8000448:	40d3      	lsrs	r3, r2
 800044a:	2220      	movs	r2, #32
 800044c:	1a52      	subs	r2, r2, r1
 800044e:	4095      	lsls	r5, r2
 8000450:	002a      	movs	r2, r5
 8000452:	1e55      	subs	r5, r2, #1
 8000454:	41aa      	sbcs	r2, r5
 8000456:	431a      	orrs	r2, r3
 8000458:	4653      	mov	r3, sl
 800045a:	1a9a      	subs	r2, r3, r2
 800045c:	0153      	lsls	r3, r2, #5
 800045e:	d400      	bmi.n	8000462 <__aeabi_fadd+0x6e>
 8000460:	e0b9      	b.n	80005d6 <__aeabi_fadd+0x1e2>
 8000462:	0192      	lsls	r2, r2, #6
 8000464:	0996      	lsrs	r6, r2, #6
 8000466:	0030      	movs	r0, r6
 8000468:	f001 f87a 	bl	8001560 <__clzsi2>
 800046c:	3805      	subs	r0, #5
 800046e:	4086      	lsls	r6, r0
 8000470:	4287      	cmp	r7, r0
 8000472:	dd00      	ble.n	8000476 <__aeabi_fadd+0x82>
 8000474:	e0d4      	b.n	8000620 <__aeabi_fadd+0x22c>
 8000476:	0033      	movs	r3, r6
 8000478:	1bc7      	subs	r7, r0, r7
 800047a:	2020      	movs	r0, #32
 800047c:	3701      	adds	r7, #1
 800047e:	40fb      	lsrs	r3, r7
 8000480:	1bc7      	subs	r7, r0, r7
 8000482:	40be      	lsls	r6, r7
 8000484:	0032      	movs	r2, r6
 8000486:	1e56      	subs	r6, r2, #1
 8000488:	41b2      	sbcs	r2, r6
 800048a:	2700      	movs	r7, #0
 800048c:	431a      	orrs	r2, r3
 800048e:	0753      	lsls	r3, r2, #29
 8000490:	d004      	beq.n	800049c <__aeabi_fadd+0xa8>
 8000492:	230f      	movs	r3, #15
 8000494:	4013      	ands	r3, r2
 8000496:	2b04      	cmp	r3, #4
 8000498:	d000      	beq.n	800049c <__aeabi_fadd+0xa8>
 800049a:	3204      	adds	r2, #4
 800049c:	0153      	lsls	r3, r2, #5
 800049e:	d400      	bmi.n	80004a2 <__aeabi_fadd+0xae>
 80004a0:	e09c      	b.n	80005dc <__aeabi_fadd+0x1e8>
 80004a2:	1c7b      	adds	r3, r7, #1
 80004a4:	2ffe      	cmp	r7, #254	; 0xfe
 80004a6:	d100      	bne.n	80004aa <__aeabi_fadd+0xb6>
 80004a8:	e09a      	b.n	80005e0 <__aeabi_fadd+0x1ec>
 80004aa:	0192      	lsls	r2, r2, #6
 80004ac:	0a52      	lsrs	r2, r2, #9
 80004ae:	4694      	mov	ip, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	05d8      	lsls	r0, r3, #23
 80004b4:	4663      	mov	r3, ip
 80004b6:	07e4      	lsls	r4, r4, #31
 80004b8:	4318      	orrs	r0, r3
 80004ba:	4320      	orrs	r0, r4
 80004bc:	bce0      	pop	{r5, r6, r7}
 80004be:	46ba      	mov	sl, r7
 80004c0:	46b1      	mov	r9, r6
 80004c2:	46a8      	mov	r8, r5
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d049      	beq.n	800055e <__aeabi_fadd+0x16a>
 80004ca:	1bf3      	subs	r3, r6, r7
 80004cc:	2f00      	cmp	r7, #0
 80004ce:	d000      	beq.n	80004d2 <__aeabi_fadd+0xde>
 80004d0:	e0b6      	b.n	8000640 <__aeabi_fadd+0x24c>
 80004d2:	4652      	mov	r2, sl
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d060      	beq.n	800059a <__aeabi_fadd+0x1a6>
 80004d8:	3b01      	subs	r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0xec>
 80004de:	e0fc      	b.n	80006da <__aeabi_fadd+0x2e6>
 80004e0:	2eff      	cmp	r6, #255	; 0xff
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fadd+0xf2>
 80004e4:	e0b4      	b.n	8000650 <__aeabi_fadd+0x25c>
 80004e6:	000c      	movs	r4, r1
 80004e8:	4642      	mov	r2, r8
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	d078      	beq.n	80005e0 <__aeabi_fadd+0x1ec>
 80004ee:	2080      	movs	r0, #128	; 0x80
 80004f0:	03c0      	lsls	r0, r0, #15
 80004f2:	4310      	orrs	r0, r2
 80004f4:	0242      	lsls	r2, r0, #9
 80004f6:	0a53      	lsrs	r3, r2, #9
 80004f8:	469c      	mov	ip, r3
 80004fa:	23ff      	movs	r3, #255	; 0xff
 80004fc:	e7d9      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80004fe:	1bb9      	subs	r1, r7, r6
 8000500:	2900      	cmp	r1, #0
 8000502:	dd71      	ble.n	80005e8 <__aeabi_fadd+0x1f4>
 8000504:	2e00      	cmp	r6, #0
 8000506:	d03f      	beq.n	8000588 <__aeabi_fadd+0x194>
 8000508:	2fff      	cmp	r7, #255	; 0xff
 800050a:	d0ee      	beq.n	80004ea <__aeabi_fadd+0xf6>
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	04db      	lsls	r3, r3, #19
 8000510:	431d      	orrs	r5, r3
 8000512:	2201      	movs	r2, #1
 8000514:	291b      	cmp	r1, #27
 8000516:	dc07      	bgt.n	8000528 <__aeabi_fadd+0x134>
 8000518:	002a      	movs	r2, r5
 800051a:	2320      	movs	r3, #32
 800051c:	40ca      	lsrs	r2, r1
 800051e:	1a59      	subs	r1, r3, r1
 8000520:	408d      	lsls	r5, r1
 8000522:	1e6b      	subs	r3, r5, #1
 8000524:	419d      	sbcs	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	4452      	add	r2, sl
 800052a:	0153      	lsls	r3, r2, #5
 800052c:	d553      	bpl.n	80005d6 <__aeabi_fadd+0x1e2>
 800052e:	3701      	adds	r7, #1
 8000530:	2fff      	cmp	r7, #255	; 0xff
 8000532:	d055      	beq.n	80005e0 <__aeabi_fadd+0x1ec>
 8000534:	2301      	movs	r3, #1
 8000536:	497b      	ldr	r1, [pc, #492]	; (8000724 <__aeabi_fadd+0x330>)
 8000538:	4013      	ands	r3, r2
 800053a:	0852      	lsrs	r2, r2, #1
 800053c:	400a      	ands	r2, r1
 800053e:	431a      	orrs	r2, r3
 8000540:	e7a5      	b.n	800048e <__aeabi_fadd+0x9a>
 8000542:	2d00      	cmp	r5, #0
 8000544:	d02c      	beq.n	80005a0 <__aeabi_fadd+0x1ac>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	44e1      	add	r9, ip
 800054e:	464b      	mov	r3, r9
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0x162>
 8000554:	e0ad      	b.n	80006b2 <__aeabi_fadd+0x2be>
 8000556:	2fff      	cmp	r7, #255	; 0xff
 8000558:	d000      	beq.n	800055c <__aeabi_fadd+0x168>
 800055a:	e76e      	b.n	800043a <__aeabi_fadd+0x46>
 800055c:	e7c5      	b.n	80004ea <__aeabi_fadd+0xf6>
 800055e:	20fe      	movs	r0, #254	; 0xfe
 8000560:	1c7e      	adds	r6, r7, #1
 8000562:	4230      	tst	r0, r6
 8000564:	d160      	bne.n	8000628 <__aeabi_fadd+0x234>
 8000566:	2f00      	cmp	r7, #0
 8000568:	d000      	beq.n	800056c <__aeabi_fadd+0x178>
 800056a:	e093      	b.n	8000694 <__aeabi_fadd+0x2a0>
 800056c:	4652      	mov	r2, sl
 800056e:	2a00      	cmp	r2, #0
 8000570:	d100      	bne.n	8000574 <__aeabi_fadd+0x180>
 8000572:	e0b6      	b.n	80006e2 <__aeabi_fadd+0x2ee>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d09c      	beq.n	80004b2 <__aeabi_fadd+0xbe>
 8000578:	1b52      	subs	r2, r2, r5
 800057a:	0150      	lsls	r0, r2, #5
 800057c:	d400      	bmi.n	8000580 <__aeabi_fadd+0x18c>
 800057e:	e0c3      	b.n	8000708 <__aeabi_fadd+0x314>
 8000580:	4653      	mov	r3, sl
 8000582:	000c      	movs	r4, r1
 8000584:	1aea      	subs	r2, r5, r3
 8000586:	e782      	b.n	800048e <__aeabi_fadd+0x9a>
 8000588:	2d00      	cmp	r5, #0
 800058a:	d009      	beq.n	80005a0 <__aeabi_fadd+0x1ac>
 800058c:	3901      	subs	r1, #1
 800058e:	2900      	cmp	r1, #0
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x1a0>
 8000592:	e08b      	b.n	80006ac <__aeabi_fadd+0x2b8>
 8000594:	2fff      	cmp	r7, #255	; 0xff
 8000596:	d1bc      	bne.n	8000512 <__aeabi_fadd+0x11e>
 8000598:	e7a7      	b.n	80004ea <__aeabi_fadd+0xf6>
 800059a:	000c      	movs	r4, r1
 800059c:	4642      	mov	r2, r8
 800059e:	0037      	movs	r7, r6
 80005a0:	2fff      	cmp	r7, #255	; 0xff
 80005a2:	d0a2      	beq.n	80004ea <__aeabi_fadd+0xf6>
 80005a4:	0252      	lsls	r2, r2, #9
 80005a6:	0a53      	lsrs	r3, r2, #9
 80005a8:	469c      	mov	ip, r3
 80005aa:	b2fb      	uxtb	r3, r7
 80005ac:	e781      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80005ae:	21fe      	movs	r1, #254	; 0xfe
 80005b0:	3701      	adds	r7, #1
 80005b2:	4239      	tst	r1, r7
 80005b4:	d165      	bne.n	8000682 <__aeabi_fadd+0x28e>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d17e      	bne.n	80006b8 <__aeabi_fadd+0x2c4>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x1cc>
 80005be:	e0aa      	b.n	8000716 <__aeabi_fadd+0x322>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x1d2>
 80005c4:	e775      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80005c6:	002a      	movs	r2, r5
 80005c8:	4452      	add	r2, sl
 80005ca:	2700      	movs	r7, #0
 80005cc:	0153      	lsls	r3, r2, #5
 80005ce:	d502      	bpl.n	80005d6 <__aeabi_fadd+0x1e2>
 80005d0:	4b55      	ldr	r3, [pc, #340]	; (8000728 <__aeabi_fadd+0x334>)
 80005d2:	3701      	adds	r7, #1
 80005d4:	401a      	ands	r2, r3
 80005d6:	0753      	lsls	r3, r2, #29
 80005d8:	d000      	beq.n	80005dc <__aeabi_fadd+0x1e8>
 80005da:	e75a      	b.n	8000492 <__aeabi_fadd+0x9e>
 80005dc:	08d2      	lsrs	r2, r2, #3
 80005de:	e7df      	b.n	80005a0 <__aeabi_fadd+0x1ac>
 80005e0:	2200      	movs	r2, #0
 80005e2:	23ff      	movs	r3, #255	; 0xff
 80005e4:	4694      	mov	ip, r2
 80005e6:	e764      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80005e8:	2900      	cmp	r1, #0
 80005ea:	d0e0      	beq.n	80005ae <__aeabi_fadd+0x1ba>
 80005ec:	1bf3      	subs	r3, r6, r7
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03e      	beq.n	8000670 <__aeabi_fadd+0x27c>
 80005f2:	2eff      	cmp	r6, #255	; 0xff
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x204>
 80005f6:	e777      	b.n	80004e8 <__aeabi_fadd+0xf4>
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0001      	movs	r1, r0
 80005fc:	04d2      	lsls	r2, r2, #19
 80005fe:	4311      	orrs	r1, r2
 8000600:	468a      	mov	sl, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2b1b      	cmp	r3, #27
 8000606:	dc08      	bgt.n	800061a <__aeabi_fadd+0x226>
 8000608:	4652      	mov	r2, sl
 800060a:	2120      	movs	r1, #32
 800060c:	4650      	mov	r0, sl
 800060e:	40da      	lsrs	r2, r3
 8000610:	1acb      	subs	r3, r1, r3
 8000612:	4098      	lsls	r0, r3
 8000614:	1e43      	subs	r3, r0, #1
 8000616:	4198      	sbcs	r0, r3
 8000618:	4302      	orrs	r2, r0
 800061a:	0037      	movs	r7, r6
 800061c:	1952      	adds	r2, r2, r5
 800061e:	e784      	b.n	800052a <__aeabi_fadd+0x136>
 8000620:	4a41      	ldr	r2, [pc, #260]	; (8000728 <__aeabi_fadd+0x334>)
 8000622:	1a3f      	subs	r7, r7, r0
 8000624:	4032      	ands	r2, r6
 8000626:	e732      	b.n	800048e <__aeabi_fadd+0x9a>
 8000628:	4653      	mov	r3, sl
 800062a:	1b5e      	subs	r6, r3, r5
 800062c:	0173      	lsls	r3, r6, #5
 800062e:	d42d      	bmi.n	800068c <__aeabi_fadd+0x298>
 8000630:	2e00      	cmp	r6, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x242>
 8000634:	e717      	b.n	8000466 <__aeabi_fadd+0x72>
 8000636:	2200      	movs	r2, #0
 8000638:	2400      	movs	r4, #0
 800063a:	2300      	movs	r3, #0
 800063c:	4694      	mov	ip, r2
 800063e:	e738      	b.n	80004b2 <__aeabi_fadd+0xbe>
 8000640:	2eff      	cmp	r6, #255	; 0xff
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x252>
 8000644:	e74f      	b.n	80004e6 <__aeabi_fadd+0xf2>
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	4650      	mov	r0, sl
 800064a:	04d2      	lsls	r2, r2, #19
 800064c:	4310      	orrs	r0, r2
 800064e:	4682      	mov	sl, r0
 8000650:	2201      	movs	r2, #1
 8000652:	2b1b      	cmp	r3, #27
 8000654:	dc08      	bgt.n	8000668 <__aeabi_fadd+0x274>
 8000656:	4652      	mov	r2, sl
 8000658:	2420      	movs	r4, #32
 800065a:	4650      	mov	r0, sl
 800065c:	40da      	lsrs	r2, r3
 800065e:	1ae3      	subs	r3, r4, r3
 8000660:	4098      	lsls	r0, r3
 8000662:	1e43      	subs	r3, r0, #1
 8000664:	4198      	sbcs	r0, r3
 8000666:	4302      	orrs	r2, r0
 8000668:	000c      	movs	r4, r1
 800066a:	0037      	movs	r7, r6
 800066c:	1aaa      	subs	r2, r5, r2
 800066e:	e6f5      	b.n	800045c <__aeabi_fadd+0x68>
 8000670:	2800      	cmp	r0, #0
 8000672:	d093      	beq.n	800059c <__aeabi_fadd+0x1a8>
 8000674:	3b01      	subs	r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d04f      	beq.n	800071a <__aeabi_fadd+0x326>
 800067a:	2eff      	cmp	r6, #255	; 0xff
 800067c:	d1c1      	bne.n	8000602 <__aeabi_fadd+0x20e>
 800067e:	4642      	mov	r2, r8
 8000680:	e733      	b.n	80004ea <__aeabi_fadd+0xf6>
 8000682:	2fff      	cmp	r7, #255	; 0xff
 8000684:	d0ac      	beq.n	80005e0 <__aeabi_fadd+0x1ec>
 8000686:	4455      	add	r5, sl
 8000688:	086a      	lsrs	r2, r5, #1
 800068a:	e7a4      	b.n	80005d6 <__aeabi_fadd+0x1e2>
 800068c:	4653      	mov	r3, sl
 800068e:	000c      	movs	r4, r1
 8000690:	1aee      	subs	r6, r5, r3
 8000692:	e6e8      	b.n	8000466 <__aeabi_fadd+0x72>
 8000694:	4653      	mov	r3, sl
 8000696:	2b00      	cmp	r3, #0
 8000698:	d128      	bne.n	80006ec <__aeabi_fadd+0x2f8>
 800069a:	2d00      	cmp	r5, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0x2ac>
 800069e:	e722      	b.n	80004e6 <__aeabi_fadd+0xf2>
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	03db      	lsls	r3, r3, #15
 80006a4:	469c      	mov	ip, r3
 80006a6:	2400      	movs	r4, #0
 80006a8:	23ff      	movs	r3, #255	; 0xff
 80006aa:	e702      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80006ac:	002a      	movs	r2, r5
 80006ae:	4452      	add	r2, sl
 80006b0:	e73b      	b.n	800052a <__aeabi_fadd+0x136>
 80006b2:	4653      	mov	r3, sl
 80006b4:	1b5a      	subs	r2, r3, r5
 80006b6:	e6d1      	b.n	800045c <__aeabi_fadd+0x68>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0x2ca>
 80006bc:	e714      	b.n	80004e8 <__aeabi_fadd+0xf4>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fadd+0x2d0>
 80006c2:	e712      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	03db      	lsls	r3, r3, #15
 80006c8:	421a      	tst	r2, r3
 80006ca:	d100      	bne.n	80006ce <__aeabi_fadd+0x2da>
 80006cc:	e70d      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006ce:	4641      	mov	r1, r8
 80006d0:	4219      	tst	r1, r3
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0x2e2>
 80006d4:	e709      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006d6:	4642      	mov	r2, r8
 80006d8:	e707      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006da:	000c      	movs	r4, r1
 80006dc:	0037      	movs	r7, r6
 80006de:	1aaa      	subs	r2, r5, r2
 80006e0:	e6bc      	b.n	800045c <__aeabi_fadd+0x68>
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d013      	beq.n	800070e <__aeabi_fadd+0x31a>
 80006e6:	000c      	movs	r4, r1
 80006e8:	46c4      	mov	ip, r8
 80006ea:	e6e2      	b.n	80004b2 <__aeabi_fadd+0xbe>
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x2fe>
 80006f0:	e6fb      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	03db      	lsls	r3, r3, #15
 80006f6:	421a      	tst	r2, r3
 80006f8:	d100      	bne.n	80006fc <__aeabi_fadd+0x308>
 80006fa:	e6f6      	b.n	80004ea <__aeabi_fadd+0xf6>
 80006fc:	4640      	mov	r0, r8
 80006fe:	4218      	tst	r0, r3
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x310>
 8000702:	e6f2      	b.n	80004ea <__aeabi_fadd+0xf6>
 8000704:	000c      	movs	r4, r1
 8000706:	e6ef      	b.n	80004e8 <__aeabi_fadd+0xf4>
 8000708:	2a00      	cmp	r2, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0x31a>
 800070c:	e763      	b.n	80005d6 <__aeabi_fadd+0x1e2>
 800070e:	2200      	movs	r2, #0
 8000710:	2400      	movs	r4, #0
 8000712:	4694      	mov	ip, r2
 8000714:	e6cd      	b.n	80004b2 <__aeabi_fadd+0xbe>
 8000716:	46c4      	mov	ip, r8
 8000718:	e6cb      	b.n	80004b2 <__aeabi_fadd+0xbe>
 800071a:	002a      	movs	r2, r5
 800071c:	0037      	movs	r7, r6
 800071e:	4452      	add	r2, sl
 8000720:	e703      	b.n	800052a <__aeabi_fadd+0x136>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	7dffffff 	.word	0x7dffffff
 8000728:	fbffffff 	.word	0xfbffffff

0800072c <__aeabi_fmul>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	4657      	mov	r7, sl
 8000730:	464e      	mov	r6, r9
 8000732:	4645      	mov	r5, r8
 8000734:	46de      	mov	lr, fp
 8000736:	0244      	lsls	r4, r0, #9
 8000738:	b5e0      	push	{r5, r6, r7, lr}
 800073a:	0045      	lsls	r5, r0, #1
 800073c:	1c0f      	adds	r7, r1, #0
 800073e:	0a64      	lsrs	r4, r4, #9
 8000740:	0e2d      	lsrs	r5, r5, #24
 8000742:	0fc6      	lsrs	r6, r0, #31
 8000744:	2d00      	cmp	r5, #0
 8000746:	d047      	beq.n	80007d8 <__aeabi_fmul+0xac>
 8000748:	2dff      	cmp	r5, #255	; 0xff
 800074a:	d04d      	beq.n	80007e8 <__aeabi_fmul+0xbc>
 800074c:	2300      	movs	r3, #0
 800074e:	2080      	movs	r0, #128	; 0x80
 8000750:	469a      	mov	sl, r3
 8000752:	469b      	mov	fp, r3
 8000754:	00e4      	lsls	r4, r4, #3
 8000756:	04c0      	lsls	r0, r0, #19
 8000758:	4304      	orrs	r4, r0
 800075a:	3d7f      	subs	r5, #127	; 0x7f
 800075c:	0278      	lsls	r0, r7, #9
 800075e:	0a43      	lsrs	r3, r0, #9
 8000760:	4699      	mov	r9, r3
 8000762:	007a      	lsls	r2, r7, #1
 8000764:	0ffb      	lsrs	r3, r7, #31
 8000766:	4698      	mov	r8, r3
 8000768:	0e12      	lsrs	r2, r2, #24
 800076a:	464b      	mov	r3, r9
 800076c:	d044      	beq.n	80007f8 <__aeabi_fmul+0xcc>
 800076e:	2aff      	cmp	r2, #255	; 0xff
 8000770:	d011      	beq.n	8000796 <__aeabi_fmul+0x6a>
 8000772:	00d8      	lsls	r0, r3, #3
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	4303      	orrs	r3, r0
 800077a:	4699      	mov	r9, r3
 800077c:	2000      	movs	r0, #0
 800077e:	3a7f      	subs	r2, #127	; 0x7f
 8000780:	18ad      	adds	r5, r5, r2
 8000782:	4647      	mov	r7, r8
 8000784:	4653      	mov	r3, sl
 8000786:	4077      	eors	r7, r6
 8000788:	1c69      	adds	r1, r5, #1
 800078a:	2b0f      	cmp	r3, #15
 800078c:	d83f      	bhi.n	800080e <__aeabi_fmul+0xe2>
 800078e:	4a72      	ldr	r2, [pc, #456]	; (8000958 <__aeabi_fmul+0x22c>)
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	58d3      	ldr	r3, [r2, r3]
 8000794:	469f      	mov	pc, r3
 8000796:	35ff      	adds	r5, #255	; 0xff
 8000798:	2b00      	cmp	r3, #0
 800079a:	d000      	beq.n	800079e <__aeabi_fmul+0x72>
 800079c:	e079      	b.n	8000892 <__aeabi_fmul+0x166>
 800079e:	4652      	mov	r2, sl
 80007a0:	2302      	movs	r3, #2
 80007a2:	431a      	orrs	r2, r3
 80007a4:	4692      	mov	sl, r2
 80007a6:	2002      	movs	r0, #2
 80007a8:	e7eb      	b.n	8000782 <__aeabi_fmul+0x56>
 80007aa:	4647      	mov	r7, r8
 80007ac:	464c      	mov	r4, r9
 80007ae:	4683      	mov	fp, r0
 80007b0:	465b      	mov	r3, fp
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d028      	beq.n	8000808 <__aeabi_fmul+0xdc>
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d100      	bne.n	80007bc <__aeabi_fmul+0x90>
 80007ba:	e0c6      	b.n	800094a <__aeabi_fmul+0x21e>
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d14f      	bne.n	8000860 <__aeabi_fmul+0x134>
 80007c0:	2000      	movs	r0, #0
 80007c2:	2400      	movs	r4, #0
 80007c4:	05c0      	lsls	r0, r0, #23
 80007c6:	07ff      	lsls	r7, r7, #31
 80007c8:	4320      	orrs	r0, r4
 80007ca:	4338      	orrs	r0, r7
 80007cc:	bcf0      	pop	{r4, r5, r6, r7}
 80007ce:	46bb      	mov	fp, r7
 80007d0:	46b2      	mov	sl, r6
 80007d2:	46a9      	mov	r9, r5
 80007d4:	46a0      	mov	r8, r4
 80007d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007d8:	2c00      	cmp	r4, #0
 80007da:	d171      	bne.n	80008c0 <__aeabi_fmul+0x194>
 80007dc:	2304      	movs	r3, #4
 80007de:	469a      	mov	sl, r3
 80007e0:	3b03      	subs	r3, #3
 80007e2:	2500      	movs	r5, #0
 80007e4:	469b      	mov	fp, r3
 80007e6:	e7b9      	b.n	800075c <__aeabi_fmul+0x30>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d163      	bne.n	80008b4 <__aeabi_fmul+0x188>
 80007ec:	2308      	movs	r3, #8
 80007ee:	469a      	mov	sl, r3
 80007f0:	3b06      	subs	r3, #6
 80007f2:	25ff      	movs	r5, #255	; 0xff
 80007f4:	469b      	mov	fp, r3
 80007f6:	e7b1      	b.n	800075c <__aeabi_fmul+0x30>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d150      	bne.n	800089e <__aeabi_fmul+0x172>
 80007fc:	4652      	mov	r2, sl
 80007fe:	3301      	adds	r3, #1
 8000800:	431a      	orrs	r2, r3
 8000802:	4692      	mov	sl, r2
 8000804:	2001      	movs	r0, #1
 8000806:	e7bc      	b.n	8000782 <__aeabi_fmul+0x56>
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	2400      	movs	r4, #0
 800080c:	e7da      	b.n	80007c4 <__aeabi_fmul+0x98>
 800080e:	4648      	mov	r0, r9
 8000810:	0c26      	lsrs	r6, r4, #16
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	0c22      	lsrs	r2, r4, #16
 8000816:	0404      	lsls	r4, r0, #16
 8000818:	0c24      	lsrs	r4, r4, #16
 800081a:	464b      	mov	r3, r9
 800081c:	0020      	movs	r0, r4
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	4350      	muls	r0, r2
 8000822:	4374      	muls	r4, r6
 8000824:	435a      	muls	r2, r3
 8000826:	435e      	muls	r6, r3
 8000828:	1912      	adds	r2, r2, r4
 800082a:	0c03      	lsrs	r3, r0, #16
 800082c:	189b      	adds	r3, r3, r2
 800082e:	429c      	cmp	r4, r3
 8000830:	d903      	bls.n	800083a <__aeabi_fmul+0x10e>
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0252      	lsls	r2, r2, #9
 8000836:	4694      	mov	ip, r2
 8000838:	4466      	add	r6, ip
 800083a:	0400      	lsls	r0, r0, #16
 800083c:	041a      	lsls	r2, r3, #16
 800083e:	0c00      	lsrs	r0, r0, #16
 8000840:	1812      	adds	r2, r2, r0
 8000842:	0194      	lsls	r4, r2, #6
 8000844:	1e60      	subs	r0, r4, #1
 8000846:	4184      	sbcs	r4, r0
 8000848:	0c1b      	lsrs	r3, r3, #16
 800084a:	0e92      	lsrs	r2, r2, #26
 800084c:	199b      	adds	r3, r3, r6
 800084e:	4314      	orrs	r4, r2
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	431c      	orrs	r4, r3
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	d572      	bpl.n	800093e <__aeabi_fmul+0x212>
 8000858:	2001      	movs	r0, #1
 800085a:	0863      	lsrs	r3, r4, #1
 800085c:	4004      	ands	r4, r0
 800085e:	431c      	orrs	r4, r3
 8000860:	0008      	movs	r0, r1
 8000862:	307f      	adds	r0, #127	; 0x7f
 8000864:	2800      	cmp	r0, #0
 8000866:	dd3c      	ble.n	80008e2 <__aeabi_fmul+0x1b6>
 8000868:	0763      	lsls	r3, r4, #29
 800086a:	d004      	beq.n	8000876 <__aeabi_fmul+0x14a>
 800086c:	230f      	movs	r3, #15
 800086e:	4023      	ands	r3, r4
 8000870:	2b04      	cmp	r3, #4
 8000872:	d000      	beq.n	8000876 <__aeabi_fmul+0x14a>
 8000874:	3404      	adds	r4, #4
 8000876:	0123      	lsls	r3, r4, #4
 8000878:	d503      	bpl.n	8000882 <__aeabi_fmul+0x156>
 800087a:	3180      	adds	r1, #128	; 0x80
 800087c:	0008      	movs	r0, r1
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <__aeabi_fmul+0x230>)
 8000880:	401c      	ands	r4, r3
 8000882:	28fe      	cmp	r0, #254	; 0xfe
 8000884:	dcc0      	bgt.n	8000808 <__aeabi_fmul+0xdc>
 8000886:	01a4      	lsls	r4, r4, #6
 8000888:	0a64      	lsrs	r4, r4, #9
 800088a:	b2c0      	uxtb	r0, r0
 800088c:	e79a      	b.n	80007c4 <__aeabi_fmul+0x98>
 800088e:	0037      	movs	r7, r6
 8000890:	e78e      	b.n	80007b0 <__aeabi_fmul+0x84>
 8000892:	4652      	mov	r2, sl
 8000894:	2303      	movs	r3, #3
 8000896:	431a      	orrs	r2, r3
 8000898:	4692      	mov	sl, r2
 800089a:	2003      	movs	r0, #3
 800089c:	e771      	b.n	8000782 <__aeabi_fmul+0x56>
 800089e:	4648      	mov	r0, r9
 80008a0:	f000 fe5e 	bl	8001560 <__clzsi2>
 80008a4:	464a      	mov	r2, r9
 80008a6:	1f43      	subs	r3, r0, #5
 80008a8:	409a      	lsls	r2, r3
 80008aa:	1a2d      	subs	r5, r5, r0
 80008ac:	4691      	mov	r9, r2
 80008ae:	2000      	movs	r0, #0
 80008b0:	3d76      	subs	r5, #118	; 0x76
 80008b2:	e766      	b.n	8000782 <__aeabi_fmul+0x56>
 80008b4:	230c      	movs	r3, #12
 80008b6:	469a      	mov	sl, r3
 80008b8:	3b09      	subs	r3, #9
 80008ba:	25ff      	movs	r5, #255	; 0xff
 80008bc:	469b      	mov	fp, r3
 80008be:	e74d      	b.n	800075c <__aeabi_fmul+0x30>
 80008c0:	0020      	movs	r0, r4
 80008c2:	f000 fe4d 	bl	8001560 <__clzsi2>
 80008c6:	2576      	movs	r5, #118	; 0x76
 80008c8:	1f43      	subs	r3, r0, #5
 80008ca:	409c      	lsls	r4, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	426d      	negs	r5, r5
 80008d0:	469a      	mov	sl, r3
 80008d2:	469b      	mov	fp, r3
 80008d4:	1a2d      	subs	r5, r5, r0
 80008d6:	e741      	b.n	800075c <__aeabi_fmul+0x30>
 80008d8:	2480      	movs	r4, #128	; 0x80
 80008da:	2700      	movs	r7, #0
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	03e4      	lsls	r4, r4, #15
 80008e0:	e770      	b.n	80007c4 <__aeabi_fmul+0x98>
 80008e2:	2301      	movs	r3, #1
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	2b1b      	cmp	r3, #27
 80008e8:	dd00      	ble.n	80008ec <__aeabi_fmul+0x1c0>
 80008ea:	e769      	b.n	80007c0 <__aeabi_fmul+0x94>
 80008ec:	319e      	adds	r1, #158	; 0x9e
 80008ee:	0020      	movs	r0, r4
 80008f0:	408c      	lsls	r4, r1
 80008f2:	40d8      	lsrs	r0, r3
 80008f4:	1e63      	subs	r3, r4, #1
 80008f6:	419c      	sbcs	r4, r3
 80008f8:	4304      	orrs	r4, r0
 80008fa:	0763      	lsls	r3, r4, #29
 80008fc:	d004      	beq.n	8000908 <__aeabi_fmul+0x1dc>
 80008fe:	230f      	movs	r3, #15
 8000900:	4023      	ands	r3, r4
 8000902:	2b04      	cmp	r3, #4
 8000904:	d000      	beq.n	8000908 <__aeabi_fmul+0x1dc>
 8000906:	3404      	adds	r4, #4
 8000908:	0163      	lsls	r3, r4, #5
 800090a:	d51a      	bpl.n	8000942 <__aeabi_fmul+0x216>
 800090c:	2001      	movs	r0, #1
 800090e:	2400      	movs	r4, #0
 8000910:	e758      	b.n	80007c4 <__aeabi_fmul+0x98>
 8000912:	2080      	movs	r0, #128	; 0x80
 8000914:	03c0      	lsls	r0, r0, #15
 8000916:	4204      	tst	r4, r0
 8000918:	d009      	beq.n	800092e <__aeabi_fmul+0x202>
 800091a:	464b      	mov	r3, r9
 800091c:	4203      	tst	r3, r0
 800091e:	d106      	bne.n	800092e <__aeabi_fmul+0x202>
 8000920:	464c      	mov	r4, r9
 8000922:	4304      	orrs	r4, r0
 8000924:	0264      	lsls	r4, r4, #9
 8000926:	4647      	mov	r7, r8
 8000928:	20ff      	movs	r0, #255	; 0xff
 800092a:	0a64      	lsrs	r4, r4, #9
 800092c:	e74a      	b.n	80007c4 <__aeabi_fmul+0x98>
 800092e:	2080      	movs	r0, #128	; 0x80
 8000930:	03c0      	lsls	r0, r0, #15
 8000932:	4304      	orrs	r4, r0
 8000934:	0264      	lsls	r4, r4, #9
 8000936:	0037      	movs	r7, r6
 8000938:	20ff      	movs	r0, #255	; 0xff
 800093a:	0a64      	lsrs	r4, r4, #9
 800093c:	e742      	b.n	80007c4 <__aeabi_fmul+0x98>
 800093e:	0029      	movs	r1, r5
 8000940:	e78e      	b.n	8000860 <__aeabi_fmul+0x134>
 8000942:	01a4      	lsls	r4, r4, #6
 8000944:	2000      	movs	r0, #0
 8000946:	0a64      	lsrs	r4, r4, #9
 8000948:	e73c      	b.n	80007c4 <__aeabi_fmul+0x98>
 800094a:	2080      	movs	r0, #128	; 0x80
 800094c:	03c0      	lsls	r0, r0, #15
 800094e:	4304      	orrs	r4, r0
 8000950:	0264      	lsls	r4, r4, #9
 8000952:	20ff      	movs	r0, #255	; 0xff
 8000954:	0a64      	lsrs	r4, r4, #9
 8000956:	e735      	b.n	80007c4 <__aeabi_fmul+0x98>
 8000958:	08005a00 	.word	0x08005a00
 800095c:	f7ffffff 	.word	0xf7ffffff

08000960 <__aeabi_i2f>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	2800      	cmp	r0, #0
 8000964:	d013      	beq.n	800098e <__aeabi_i2f+0x2e>
 8000966:	17c3      	asrs	r3, r0, #31
 8000968:	18c5      	adds	r5, r0, r3
 800096a:	405d      	eors	r5, r3
 800096c:	0fc4      	lsrs	r4, r0, #31
 800096e:	0028      	movs	r0, r5
 8000970:	f000 fdf6 	bl	8001560 <__clzsi2>
 8000974:	239e      	movs	r3, #158	; 0x9e
 8000976:	0001      	movs	r1, r0
 8000978:	1a1b      	subs	r3, r3, r0
 800097a:	2b96      	cmp	r3, #150	; 0x96
 800097c:	dc0f      	bgt.n	800099e <__aeabi_i2f+0x3e>
 800097e:	2808      	cmp	r0, #8
 8000980:	dd01      	ble.n	8000986 <__aeabi_i2f+0x26>
 8000982:	3908      	subs	r1, #8
 8000984:	408d      	lsls	r5, r1
 8000986:	026d      	lsls	r5, r5, #9
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	b2d8      	uxtb	r0, r3
 800098c:	e002      	b.n	8000994 <__aeabi_i2f+0x34>
 800098e:	2400      	movs	r4, #0
 8000990:	2000      	movs	r0, #0
 8000992:	2500      	movs	r5, #0
 8000994:	05c0      	lsls	r0, r0, #23
 8000996:	4328      	orrs	r0, r5
 8000998:	07e4      	lsls	r4, r4, #31
 800099a:	4320      	orrs	r0, r4
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	2b99      	cmp	r3, #153	; 0x99
 80009a0:	dd0b      	ble.n	80009ba <__aeabi_i2f+0x5a>
 80009a2:	2205      	movs	r2, #5
 80009a4:	002e      	movs	r6, r5
 80009a6:	1a12      	subs	r2, r2, r0
 80009a8:	40d6      	lsrs	r6, r2
 80009aa:	0002      	movs	r2, r0
 80009ac:	321b      	adds	r2, #27
 80009ae:	4095      	lsls	r5, r2
 80009b0:	0028      	movs	r0, r5
 80009b2:	1e45      	subs	r5, r0, #1
 80009b4:	41a8      	sbcs	r0, r5
 80009b6:	0035      	movs	r5, r6
 80009b8:	4305      	orrs	r5, r0
 80009ba:	2905      	cmp	r1, #5
 80009bc:	dd01      	ble.n	80009c2 <__aeabi_i2f+0x62>
 80009be:	1f4a      	subs	r2, r1, #5
 80009c0:	4095      	lsls	r5, r2
 80009c2:	002a      	movs	r2, r5
 80009c4:	4e08      	ldr	r6, [pc, #32]	; (80009e8 <__aeabi_i2f+0x88>)
 80009c6:	4032      	ands	r2, r6
 80009c8:	0768      	lsls	r0, r5, #29
 80009ca:	d009      	beq.n	80009e0 <__aeabi_i2f+0x80>
 80009cc:	200f      	movs	r0, #15
 80009ce:	4028      	ands	r0, r5
 80009d0:	2804      	cmp	r0, #4
 80009d2:	d005      	beq.n	80009e0 <__aeabi_i2f+0x80>
 80009d4:	3204      	adds	r2, #4
 80009d6:	0150      	lsls	r0, r2, #5
 80009d8:	d502      	bpl.n	80009e0 <__aeabi_i2f+0x80>
 80009da:	239f      	movs	r3, #159	; 0x9f
 80009dc:	4032      	ands	r2, r6
 80009de:	1a5b      	subs	r3, r3, r1
 80009e0:	0192      	lsls	r2, r2, #6
 80009e2:	0a55      	lsrs	r5, r2, #9
 80009e4:	b2d8      	uxtb	r0, r3
 80009e6:	e7d5      	b.n	8000994 <__aeabi_i2f+0x34>
 80009e8:	fbffffff 	.word	0xfbffffff

080009ec <__aeabi_ddiv>:
 80009ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ee:	4657      	mov	r7, sl
 80009f0:	464e      	mov	r6, r9
 80009f2:	4645      	mov	r5, r8
 80009f4:	46de      	mov	lr, fp
 80009f6:	b5e0      	push	{r5, r6, r7, lr}
 80009f8:	4681      	mov	r9, r0
 80009fa:	0005      	movs	r5, r0
 80009fc:	030c      	lsls	r4, r1, #12
 80009fe:	0048      	lsls	r0, r1, #1
 8000a00:	4692      	mov	sl, r2
 8000a02:	001f      	movs	r7, r3
 8000a04:	b085      	sub	sp, #20
 8000a06:	0b24      	lsrs	r4, r4, #12
 8000a08:	0d40      	lsrs	r0, r0, #21
 8000a0a:	0fce      	lsrs	r6, r1, #31
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d059      	beq.n	8000ac4 <__aeabi_ddiv+0xd8>
 8000a10:	4b87      	ldr	r3, [pc, #540]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x2c>
 8000a16:	e098      	b.n	8000b4a <__aeabi_ddiv+0x15e>
 8000a18:	0f6b      	lsrs	r3, r5, #29
 8000a1a:	00e4      	lsls	r4, r4, #3
 8000a1c:	431c      	orrs	r4, r3
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	4323      	orrs	r3, r4
 8000a24:	4698      	mov	r8, r3
 8000a26:	4b83      	ldr	r3, [pc, #524]	; (8000c34 <__aeabi_ddiv+0x248>)
 8000a28:	00ed      	lsls	r5, r5, #3
 8000a2a:	469b      	mov	fp, r3
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4699      	mov	r9, r3
 8000a30:	4483      	add	fp, r0
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	033c      	lsls	r4, r7, #12
 8000a36:	007b      	lsls	r3, r7, #1
 8000a38:	4650      	mov	r0, sl
 8000a3a:	0b24      	lsrs	r4, r4, #12
 8000a3c:	0d5b      	lsrs	r3, r3, #21
 8000a3e:	0fff      	lsrs	r7, r7, #31
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d067      	beq.n	8000b14 <__aeabi_ddiv+0x128>
 8000a44:	4a7a      	ldr	r2, [pc, #488]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d018      	beq.n	8000a7c <__aeabi_ddiv+0x90>
 8000a4a:	497a      	ldr	r1, [pc, #488]	; (8000c34 <__aeabi_ddiv+0x248>)
 8000a4c:	0f42      	lsrs	r2, r0, #29
 8000a4e:	468c      	mov	ip, r1
 8000a50:	00e4      	lsls	r4, r4, #3
 8000a52:	4659      	mov	r1, fp
 8000a54:	4314      	orrs	r4, r2
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	4463      	add	r3, ip
 8000a5a:	0412      	lsls	r2, r2, #16
 8000a5c:	1acb      	subs	r3, r1, r3
 8000a5e:	4314      	orrs	r4, r2
 8000a60:	469b      	mov	fp, r3
 8000a62:	00c2      	lsls	r2, r0, #3
 8000a64:	2000      	movs	r0, #0
 8000a66:	0033      	movs	r3, r6
 8000a68:	407b      	eors	r3, r7
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d900      	bls.n	8000a74 <__aeabi_ddiv+0x88>
 8000a72:	e0ef      	b.n	8000c54 <__aeabi_ddiv+0x268>
 8000a74:	4970      	ldr	r1, [pc, #448]	; (8000c38 <__aeabi_ddiv+0x24c>)
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	58cb      	ldr	r3, [r1, r3]
 8000a7a:	469f      	mov	pc, r3
 8000a7c:	4b6f      	ldr	r3, [pc, #444]	; (8000c3c <__aeabi_ddiv+0x250>)
 8000a7e:	4652      	mov	r2, sl
 8000a80:	469c      	mov	ip, r3
 8000a82:	4322      	orrs	r2, r4
 8000a84:	44e3      	add	fp, ip
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d000      	beq.n	8000a8c <__aeabi_ddiv+0xa0>
 8000a8a:	e095      	b.n	8000bb8 <__aeabi_ddiv+0x1cc>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	2302      	movs	r3, #2
 8000a90:	4319      	orrs	r1, r3
 8000a92:	4689      	mov	r9, r1
 8000a94:	2400      	movs	r4, #0
 8000a96:	2002      	movs	r0, #2
 8000a98:	e7e5      	b.n	8000a66 <__aeabi_ddiv+0x7a>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2400      	movs	r4, #0
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	4652      	mov	r2, sl
 8000aa2:	051b      	lsls	r3, r3, #20
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	07d2      	lsls	r2, r2, #31
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	0028      	movs	r0, r5
 8000aac:	0019      	movs	r1, r3
 8000aae:	b005      	add	sp, #20
 8000ab0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ab2:	46bb      	mov	fp, r7
 8000ab4:	46b2      	mov	sl, r6
 8000ab6:	46a9      	mov	r9, r5
 8000ab8:	46a0      	mov	r8, r4
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	2400      	movs	r4, #0
 8000abe:	2500      	movs	r5, #0
 8000ac0:	4b5b      	ldr	r3, [pc, #364]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000ac2:	e7ed      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000ac4:	464b      	mov	r3, r9
 8000ac6:	4323      	orrs	r3, r4
 8000ac8:	4698      	mov	r8, r3
 8000aca:	d100      	bne.n	8000ace <__aeabi_ddiv+0xe2>
 8000acc:	e089      	b.n	8000be2 <__aeabi_ddiv+0x1f6>
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_ddiv+0xe8>
 8000ad2:	e1e0      	b.n	8000e96 <__aeabi_ddiv+0x4aa>
 8000ad4:	0020      	movs	r0, r4
 8000ad6:	f000 fd43 	bl	8001560 <__clzsi2>
 8000ada:	0001      	movs	r1, r0
 8000adc:	0002      	movs	r2, r0
 8000ade:	390b      	subs	r1, #11
 8000ae0:	231d      	movs	r3, #29
 8000ae2:	1a5b      	subs	r3, r3, r1
 8000ae4:	4649      	mov	r1, r9
 8000ae6:	0010      	movs	r0, r2
 8000ae8:	40d9      	lsrs	r1, r3
 8000aea:	3808      	subs	r0, #8
 8000aec:	4084      	lsls	r4, r0
 8000aee:	000b      	movs	r3, r1
 8000af0:	464d      	mov	r5, r9
 8000af2:	4323      	orrs	r3, r4
 8000af4:	4698      	mov	r8, r3
 8000af6:	4085      	lsls	r5, r0
 8000af8:	4851      	ldr	r0, [pc, #324]	; (8000c40 <__aeabi_ddiv+0x254>)
 8000afa:	033c      	lsls	r4, r7, #12
 8000afc:	1a83      	subs	r3, r0, r2
 8000afe:	469b      	mov	fp, r3
 8000b00:	2300      	movs	r3, #0
 8000b02:	4699      	mov	r9, r3
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	007b      	lsls	r3, r7, #1
 8000b08:	4650      	mov	r0, sl
 8000b0a:	0b24      	lsrs	r4, r4, #12
 8000b0c:	0d5b      	lsrs	r3, r3, #21
 8000b0e:	0fff      	lsrs	r7, r7, #31
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d197      	bne.n	8000a44 <__aeabi_ddiv+0x58>
 8000b14:	4652      	mov	r2, sl
 8000b16:	4322      	orrs	r2, r4
 8000b18:	d055      	beq.n	8000bc6 <__aeabi_ddiv+0x1da>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_ddiv+0x134>
 8000b1e:	e1ca      	b.n	8000eb6 <__aeabi_ddiv+0x4ca>
 8000b20:	0020      	movs	r0, r4
 8000b22:	f000 fd1d 	bl	8001560 <__clzsi2>
 8000b26:	0002      	movs	r2, r0
 8000b28:	3a0b      	subs	r2, #11
 8000b2a:	231d      	movs	r3, #29
 8000b2c:	0001      	movs	r1, r0
 8000b2e:	1a9b      	subs	r3, r3, r2
 8000b30:	4652      	mov	r2, sl
 8000b32:	3908      	subs	r1, #8
 8000b34:	40da      	lsrs	r2, r3
 8000b36:	408c      	lsls	r4, r1
 8000b38:	4314      	orrs	r4, r2
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	408a      	lsls	r2, r1
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <__aeabi_ddiv+0x258>)
 8000b40:	4458      	add	r0, fp
 8000b42:	469b      	mov	fp, r3
 8000b44:	4483      	add	fp, r0
 8000b46:	2000      	movs	r0, #0
 8000b48:	e78d      	b.n	8000a66 <__aeabi_ddiv+0x7a>
 8000b4a:	464b      	mov	r3, r9
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	4698      	mov	r8, r3
 8000b50:	d140      	bne.n	8000bd4 <__aeabi_ddiv+0x1e8>
 8000b52:	2308      	movs	r3, #8
 8000b54:	4699      	mov	r9, r3
 8000b56:	3b06      	subs	r3, #6
 8000b58:	2500      	movs	r5, #0
 8000b5a:	4683      	mov	fp, r0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	e769      	b.n	8000a34 <__aeabi_ddiv+0x48>
 8000b60:	46b2      	mov	sl, r6
 8000b62:	9b00      	ldr	r3, [sp, #0]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d0a9      	beq.n	8000abc <__aeabi_ddiv+0xd0>
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_ddiv+0x182>
 8000b6c:	e211      	b.n	8000f92 <__aeabi_ddiv+0x5a6>
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d093      	beq.n	8000a9a <__aeabi_ddiv+0xae>
 8000b72:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <__aeabi_ddiv+0x25c>)
 8000b74:	445a      	add	r2, fp
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_ddiv+0x190>
 8000b7a:	e13c      	b.n	8000df6 <__aeabi_ddiv+0x40a>
 8000b7c:	076b      	lsls	r3, r5, #29
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_ddiv+0x196>
 8000b80:	e1a7      	b.n	8000ed2 <__aeabi_ddiv+0x4e6>
 8000b82:	08ed      	lsrs	r5, r5, #3
 8000b84:	4643      	mov	r3, r8
 8000b86:	01db      	lsls	r3, r3, #7
 8000b88:	d506      	bpl.n	8000b98 <__aeabi_ddiv+0x1ac>
 8000b8a:	4642      	mov	r2, r8
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <__aeabi_ddiv+0x260>)
 8000b8e:	401a      	ands	r2, r3
 8000b90:	4690      	mov	r8, r2
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	445a      	add	r2, fp
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <__aeabi_ddiv+0x264>)
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dc8e      	bgt.n	8000abc <__aeabi_ddiv+0xd0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	0552      	lsls	r2, r2, #21
 8000ba2:	0758      	lsls	r0, r3, #29
 8000ba4:	025c      	lsls	r4, r3, #9
 8000ba6:	4305      	orrs	r5, r0
 8000ba8:	0b24      	lsrs	r4, r4, #12
 8000baa:	0d53      	lsrs	r3, r2, #21
 8000bac:	e778      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000bae:	46ba      	mov	sl, r7
 8000bb0:	46a0      	mov	r8, r4
 8000bb2:	0015      	movs	r5, r2
 8000bb4:	9000      	str	r0, [sp, #0]
 8000bb6:	e7d4      	b.n	8000b62 <__aeabi_ddiv+0x176>
 8000bb8:	464a      	mov	r2, r9
 8000bba:	2303      	movs	r3, #3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	4691      	mov	r9, r2
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	e74f      	b.n	8000a66 <__aeabi_ddiv+0x7a>
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4319      	orrs	r1, r3
 8000bcc:	4689      	mov	r9, r1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	e748      	b.n	8000a66 <__aeabi_ddiv+0x7a>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	4699      	mov	r9, r3
 8000bd8:	3b09      	subs	r3, #9
 8000bda:	46a0      	mov	r8, r4
 8000bdc:	4683      	mov	fp, r0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	e728      	b.n	8000a34 <__aeabi_ddiv+0x48>
 8000be2:	2304      	movs	r3, #4
 8000be4:	4699      	mov	r9, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	469b      	mov	fp, r3
 8000bea:	3301      	adds	r3, #1
 8000bec:	2500      	movs	r5, #0
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	e720      	b.n	8000a34 <__aeabi_ddiv+0x48>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2480      	movs	r4, #128	; 0x80
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000bfc:	0324      	lsls	r4, r4, #12
 8000bfe:	e74f      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000c00:	2380      	movs	r3, #128	; 0x80
 8000c02:	4641      	mov	r1, r8
 8000c04:	031b      	lsls	r3, r3, #12
 8000c06:	4219      	tst	r1, r3
 8000c08:	d008      	beq.n	8000c1c <__aeabi_ddiv+0x230>
 8000c0a:	421c      	tst	r4, r3
 8000c0c:	d106      	bne.n	8000c1c <__aeabi_ddiv+0x230>
 8000c0e:	431c      	orrs	r4, r3
 8000c10:	0324      	lsls	r4, r4, #12
 8000c12:	46ba      	mov	sl, r7
 8000c14:	0015      	movs	r5, r2
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000c18:	0b24      	lsrs	r4, r4, #12
 8000c1a:	e741      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000c1c:	2480      	movs	r4, #128	; 0x80
 8000c1e:	4643      	mov	r3, r8
 8000c20:	0324      	lsls	r4, r4, #12
 8000c22:	431c      	orrs	r4, r3
 8000c24:	0324      	lsls	r4, r4, #12
 8000c26:	46b2      	mov	sl, r6
 8000c28:	4b01      	ldr	r3, [pc, #4]	; (8000c30 <__aeabi_ddiv+0x244>)
 8000c2a:	0b24      	lsrs	r4, r4, #12
 8000c2c:	e738      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	000007ff 	.word	0x000007ff
 8000c34:	fffffc01 	.word	0xfffffc01
 8000c38:	08005a40 	.word	0x08005a40
 8000c3c:	fffff801 	.word	0xfffff801
 8000c40:	fffffc0d 	.word	0xfffffc0d
 8000c44:	000003f3 	.word	0x000003f3
 8000c48:	000003ff 	.word	0x000003ff
 8000c4c:	feffffff 	.word	0xfeffffff
 8000c50:	000007fe 	.word	0x000007fe
 8000c54:	4544      	cmp	r4, r8
 8000c56:	d200      	bcs.n	8000c5a <__aeabi_ddiv+0x26e>
 8000c58:	e116      	b.n	8000e88 <__aeabi_ddiv+0x49c>
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0x272>
 8000c5c:	e111      	b.n	8000e82 <__aeabi_ddiv+0x496>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	425b      	negs	r3, r3
 8000c62:	469c      	mov	ip, r3
 8000c64:	002e      	movs	r6, r5
 8000c66:	4640      	mov	r0, r8
 8000c68:	2500      	movs	r5, #0
 8000c6a:	44e3      	add	fp, ip
 8000c6c:	0223      	lsls	r3, r4, #8
 8000c6e:	0e14      	lsrs	r4, r2, #24
 8000c70:	431c      	orrs	r4, r3
 8000c72:	0c1b      	lsrs	r3, r3, #16
 8000c74:	4699      	mov	r9, r3
 8000c76:	0423      	lsls	r3, r4, #16
 8000c78:	0c1f      	lsrs	r7, r3, #16
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	4649      	mov	r1, r9
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	9701      	str	r7, [sp, #4]
 8000c82:	f7ff fac7 	bl	8000214 <__aeabi_uidivmod>
 8000c86:	0002      	movs	r2, r0
 8000c88:	437a      	muls	r2, r7
 8000c8a:	040b      	lsls	r3, r1, #16
 8000c8c:	0c31      	lsrs	r1, r6, #16
 8000c8e:	4680      	mov	r8, r0
 8000c90:	4319      	orrs	r1, r3
 8000c92:	428a      	cmp	r2, r1
 8000c94:	d90b      	bls.n	8000cae <__aeabi_ddiv+0x2c2>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	1909      	adds	r1, r1, r4
 8000c9e:	44e0      	add	r8, ip
 8000ca0:	428c      	cmp	r4, r1
 8000ca2:	d804      	bhi.n	8000cae <__aeabi_ddiv+0x2c2>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d902      	bls.n	8000cae <__aeabi_ddiv+0x2c2>
 8000ca8:	1e83      	subs	r3, r0, #2
 8000caa:	4698      	mov	r8, r3
 8000cac:	1909      	adds	r1, r1, r4
 8000cae:	1a88      	subs	r0, r1, r2
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	f7ff faaf 	bl	8000214 <__aeabi_uidivmod>
 8000cb6:	0409      	lsls	r1, r1, #16
 8000cb8:	468c      	mov	ip, r1
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	4666      	mov	r6, ip
 8000cbe:	9a01      	ldr	r2, [sp, #4]
 8000cc0:	0c09      	lsrs	r1, r1, #16
 8000cc2:	4342      	muls	r2, r0
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	4331      	orrs	r1, r6
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	d904      	bls.n	8000cd6 <__aeabi_ddiv+0x2ea>
 8000ccc:	1909      	adds	r1, r1, r4
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	428c      	cmp	r4, r1
 8000cd2:	d800      	bhi.n	8000cd6 <__aeabi_ddiv+0x2ea>
 8000cd4:	e111      	b.n	8000efa <__aeabi_ddiv+0x50e>
 8000cd6:	1a89      	subs	r1, r1, r2
 8000cd8:	4642      	mov	r2, r8
 8000cda:	9e00      	ldr	r6, [sp, #0]
 8000cdc:	0412      	lsls	r2, r2, #16
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	0c33      	lsrs	r3, r6, #16
 8000ce2:	001f      	movs	r7, r3
 8000ce4:	0c10      	lsrs	r0, r2, #16
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	0413      	lsls	r3, r2, #16
 8000cec:	0432      	lsls	r2, r6, #16
 8000cee:	0c16      	lsrs	r6, r2, #16
 8000cf0:	0032      	movs	r2, r6
 8000cf2:	0c1b      	lsrs	r3, r3, #16
 8000cf4:	435a      	muls	r2, r3
 8000cf6:	9603      	str	r6, [sp, #12]
 8000cf8:	437b      	muls	r3, r7
 8000cfa:	4346      	muls	r6, r0
 8000cfc:	4378      	muls	r0, r7
 8000cfe:	0c17      	lsrs	r7, r2, #16
 8000d00:	46bc      	mov	ip, r7
 8000d02:	199b      	adds	r3, r3, r6
 8000d04:	4463      	add	r3, ip
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d903      	bls.n	8000d12 <__aeabi_ddiv+0x326>
 8000d0a:	2680      	movs	r6, #128	; 0x80
 8000d0c:	0276      	lsls	r6, r6, #9
 8000d0e:	46b4      	mov	ip, r6
 8000d10:	4460      	add	r0, ip
 8000d12:	0c1e      	lsrs	r6, r3, #16
 8000d14:	1830      	adds	r0, r6, r0
 8000d16:	0416      	lsls	r6, r2, #16
 8000d18:	041b      	lsls	r3, r3, #16
 8000d1a:	0c36      	lsrs	r6, r6, #16
 8000d1c:	199e      	adds	r6, r3, r6
 8000d1e:	4281      	cmp	r1, r0
 8000d20:	d200      	bcs.n	8000d24 <__aeabi_ddiv+0x338>
 8000d22:	e09c      	b.n	8000e5e <__aeabi_ddiv+0x472>
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x33c>
 8000d26:	e097      	b.n	8000e58 <__aeabi_ddiv+0x46c>
 8000d28:	1bae      	subs	r6, r5, r6
 8000d2a:	1a09      	subs	r1, r1, r0
 8000d2c:	42b5      	cmp	r5, r6
 8000d2e:	4180      	sbcs	r0, r0
 8000d30:	4240      	negs	r0, r0
 8000d32:	1a08      	subs	r0, r1, r0
 8000d34:	4284      	cmp	r4, r0
 8000d36:	d100      	bne.n	8000d3a <__aeabi_ddiv+0x34e>
 8000d38:	e111      	b.n	8000f5e <__aeabi_ddiv+0x572>
 8000d3a:	4649      	mov	r1, r9
 8000d3c:	f7ff fa6a 	bl	8000214 <__aeabi_uidivmod>
 8000d40:	9a01      	ldr	r2, [sp, #4]
 8000d42:	040b      	lsls	r3, r1, #16
 8000d44:	4342      	muls	r2, r0
 8000d46:	0c31      	lsrs	r1, r6, #16
 8000d48:	0005      	movs	r5, r0
 8000d4a:	4319      	orrs	r1, r3
 8000d4c:	428a      	cmp	r2, r1
 8000d4e:	d907      	bls.n	8000d60 <__aeabi_ddiv+0x374>
 8000d50:	1909      	adds	r1, r1, r4
 8000d52:	3d01      	subs	r5, #1
 8000d54:	428c      	cmp	r4, r1
 8000d56:	d803      	bhi.n	8000d60 <__aeabi_ddiv+0x374>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	d901      	bls.n	8000d60 <__aeabi_ddiv+0x374>
 8000d5c:	1e85      	subs	r5, r0, #2
 8000d5e:	1909      	adds	r1, r1, r4
 8000d60:	1a88      	subs	r0, r1, r2
 8000d62:	4649      	mov	r1, r9
 8000d64:	f7ff fa56 	bl	8000214 <__aeabi_uidivmod>
 8000d68:	0409      	lsls	r1, r1, #16
 8000d6a:	468c      	mov	ip, r1
 8000d6c:	0431      	lsls	r1, r6, #16
 8000d6e:	4666      	mov	r6, ip
 8000d70:	9a01      	ldr	r2, [sp, #4]
 8000d72:	0c09      	lsrs	r1, r1, #16
 8000d74:	4342      	muls	r2, r0
 8000d76:	0003      	movs	r3, r0
 8000d78:	4331      	orrs	r1, r6
 8000d7a:	428a      	cmp	r2, r1
 8000d7c:	d907      	bls.n	8000d8e <__aeabi_ddiv+0x3a2>
 8000d7e:	1909      	adds	r1, r1, r4
 8000d80:	3b01      	subs	r3, #1
 8000d82:	428c      	cmp	r4, r1
 8000d84:	d803      	bhi.n	8000d8e <__aeabi_ddiv+0x3a2>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	d901      	bls.n	8000d8e <__aeabi_ddiv+0x3a2>
 8000d8a:	1e83      	subs	r3, r0, #2
 8000d8c:	1909      	adds	r1, r1, r4
 8000d8e:	9e03      	ldr	r6, [sp, #12]
 8000d90:	1a89      	subs	r1, r1, r2
 8000d92:	0032      	movs	r2, r6
 8000d94:	042d      	lsls	r5, r5, #16
 8000d96:	431d      	orrs	r5, r3
 8000d98:	9f02      	ldr	r7, [sp, #8]
 8000d9a:	042b      	lsls	r3, r5, #16
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	435a      	muls	r2, r3
 8000da0:	437b      	muls	r3, r7
 8000da2:	469c      	mov	ip, r3
 8000da4:	0c28      	lsrs	r0, r5, #16
 8000da6:	4346      	muls	r6, r0
 8000da8:	0c13      	lsrs	r3, r2, #16
 8000daa:	44b4      	add	ip, r6
 8000dac:	4463      	add	r3, ip
 8000dae:	4378      	muls	r0, r7
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d903      	bls.n	8000dbc <__aeabi_ddiv+0x3d0>
 8000db4:	2680      	movs	r6, #128	; 0x80
 8000db6:	0276      	lsls	r6, r6, #9
 8000db8:	46b4      	mov	ip, r6
 8000dba:	4460      	add	r0, ip
 8000dbc:	0c1e      	lsrs	r6, r3, #16
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	041b      	lsls	r3, r3, #16
 8000dc2:	0c12      	lsrs	r2, r2, #16
 8000dc4:	1830      	adds	r0, r6, r0
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	4281      	cmp	r1, r0
 8000dca:	d306      	bcc.n	8000dda <__aeabi_ddiv+0x3ee>
 8000dcc:	d002      	beq.n	8000dd4 <__aeabi_ddiv+0x3e8>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	431d      	orrs	r5, r3
 8000dd2:	e6ce      	b.n	8000b72 <__aeabi_ddiv+0x186>
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0x3ee>
 8000dd8:	e6cb      	b.n	8000b72 <__aeabi_ddiv+0x186>
 8000dda:	1861      	adds	r1, r4, r1
 8000ddc:	1e6e      	subs	r6, r5, #1
 8000dde:	42a1      	cmp	r1, r4
 8000de0:	d200      	bcs.n	8000de4 <__aeabi_ddiv+0x3f8>
 8000de2:	e0a4      	b.n	8000f2e <__aeabi_ddiv+0x542>
 8000de4:	4281      	cmp	r1, r0
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x3fe>
 8000de8:	e0c9      	b.n	8000f7e <__aeabi_ddiv+0x592>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x402>
 8000dec:	e0d9      	b.n	8000fa2 <__aeabi_ddiv+0x5b6>
 8000dee:	0035      	movs	r5, r6
 8000df0:	e7ed      	b.n	8000dce <__aeabi_ddiv+0x3e2>
 8000df2:	2501      	movs	r5, #1
 8000df4:	426d      	negs	r5, r5
 8000df6:	2101      	movs	r1, #1
 8000df8:	1a89      	subs	r1, r1, r2
 8000dfa:	2938      	cmp	r1, #56	; 0x38
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_ddiv+0x414>
 8000dfe:	e64c      	b.n	8000a9a <__aeabi_ddiv+0xae>
 8000e00:	291f      	cmp	r1, #31
 8000e02:	dc00      	bgt.n	8000e06 <__aeabi_ddiv+0x41a>
 8000e04:	e07f      	b.n	8000f06 <__aeabi_ddiv+0x51a>
 8000e06:	231f      	movs	r3, #31
 8000e08:	425b      	negs	r3, r3
 8000e0a:	1a9a      	subs	r2, r3, r2
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	40d3      	lsrs	r3, r2
 8000e10:	2920      	cmp	r1, #32
 8000e12:	d004      	beq.n	8000e1e <__aeabi_ddiv+0x432>
 8000e14:	4644      	mov	r4, r8
 8000e16:	4a65      	ldr	r2, [pc, #404]	; (8000fac <__aeabi_ddiv+0x5c0>)
 8000e18:	445a      	add	r2, fp
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	1e6a      	subs	r2, r5, #1
 8000e20:	4195      	sbcs	r5, r2
 8000e22:	2207      	movs	r2, #7
 8000e24:	432b      	orrs	r3, r5
 8000e26:	0015      	movs	r5, r2
 8000e28:	2400      	movs	r4, #0
 8000e2a:	401d      	ands	r5, r3
 8000e2c:	421a      	tst	r2, r3
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0x446>
 8000e30:	e0a1      	b.n	8000f76 <__aeabi_ddiv+0x58a>
 8000e32:	220f      	movs	r2, #15
 8000e34:	2400      	movs	r4, #0
 8000e36:	401a      	ands	r2, r3
 8000e38:	2a04      	cmp	r2, #4
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_ddiv+0x452>
 8000e3c:	e098      	b.n	8000f70 <__aeabi_ddiv+0x584>
 8000e3e:	1d1a      	adds	r2, r3, #4
 8000e40:	429a      	cmp	r2, r3
 8000e42:	419b      	sbcs	r3, r3
 8000e44:	425b      	negs	r3, r3
 8000e46:	18e4      	adds	r4, r4, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	0222      	lsls	r2, r4, #8
 8000e4c:	d400      	bmi.n	8000e50 <__aeabi_ddiv+0x464>
 8000e4e:	e08f      	b.n	8000f70 <__aeabi_ddiv+0x584>
 8000e50:	2301      	movs	r3, #1
 8000e52:	2400      	movs	r4, #0
 8000e54:	2500      	movs	r5, #0
 8000e56:	e623      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000e58:	42b5      	cmp	r5, r6
 8000e5a:	d300      	bcc.n	8000e5e <__aeabi_ddiv+0x472>
 8000e5c:	e764      	b.n	8000d28 <__aeabi_ddiv+0x33c>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	9b00      	ldr	r3, [sp, #0]
 8000e64:	469c      	mov	ip, r3
 8000e66:	4465      	add	r5, ip
 8000e68:	001f      	movs	r7, r3
 8000e6a:	429d      	cmp	r5, r3
 8000e6c:	419b      	sbcs	r3, r3
 8000e6e:	425b      	negs	r3, r3
 8000e70:	191b      	adds	r3, r3, r4
 8000e72:	18c9      	adds	r1, r1, r3
 8000e74:	428c      	cmp	r4, r1
 8000e76:	d23a      	bcs.n	8000eee <__aeabi_ddiv+0x502>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	d863      	bhi.n	8000f44 <__aeabi_ddiv+0x558>
 8000e7c:	d060      	beq.n	8000f40 <__aeabi_ddiv+0x554>
 8000e7e:	4690      	mov	r8, r2
 8000e80:	e752      	b.n	8000d28 <__aeabi_ddiv+0x33c>
 8000e82:	42aa      	cmp	r2, r5
 8000e84:	d900      	bls.n	8000e88 <__aeabi_ddiv+0x49c>
 8000e86:	e6ea      	b.n	8000c5e <__aeabi_ddiv+0x272>
 8000e88:	4643      	mov	r3, r8
 8000e8a:	07de      	lsls	r6, r3, #31
 8000e8c:	0858      	lsrs	r0, r3, #1
 8000e8e:	086b      	lsrs	r3, r5, #1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	07ed      	lsls	r5, r5, #31
 8000e94:	e6ea      	b.n	8000c6c <__aeabi_ddiv+0x280>
 8000e96:	4648      	mov	r0, r9
 8000e98:	f000 fb62 	bl	8001560 <__clzsi2>
 8000e9c:	0001      	movs	r1, r0
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	3115      	adds	r1, #21
 8000ea2:	3220      	adds	r2, #32
 8000ea4:	291c      	cmp	r1, #28
 8000ea6:	dc00      	bgt.n	8000eaa <__aeabi_ddiv+0x4be>
 8000ea8:	e61a      	b.n	8000ae0 <__aeabi_ddiv+0xf4>
 8000eaa:	464b      	mov	r3, r9
 8000eac:	3808      	subs	r0, #8
 8000eae:	4083      	lsls	r3, r0
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	4698      	mov	r8, r3
 8000eb4:	e620      	b.n	8000af8 <__aeabi_ddiv+0x10c>
 8000eb6:	f000 fb53 	bl	8001560 <__clzsi2>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	3215      	adds	r2, #21
 8000ec0:	3020      	adds	r0, #32
 8000ec2:	2a1c      	cmp	r2, #28
 8000ec4:	dc00      	bgt.n	8000ec8 <__aeabi_ddiv+0x4dc>
 8000ec6:	e630      	b.n	8000b2a <__aeabi_ddiv+0x13e>
 8000ec8:	4654      	mov	r4, sl
 8000eca:	3b08      	subs	r3, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	409c      	lsls	r4, r3
 8000ed0:	e635      	b.n	8000b3e <__aeabi_ddiv+0x152>
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	402b      	ands	r3, r5
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x4f0>
 8000eda:	e652      	b.n	8000b82 <__aeabi_ddiv+0x196>
 8000edc:	2305      	movs	r3, #5
 8000ede:	425b      	negs	r3, r3
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	419b      	sbcs	r3, r3
 8000ee4:	3504      	adds	r5, #4
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	08ed      	lsrs	r5, r5, #3
 8000eea:	4498      	add	r8, r3
 8000eec:	e64a      	b.n	8000b84 <__aeabi_ddiv+0x198>
 8000eee:	428c      	cmp	r4, r1
 8000ef0:	d1c5      	bne.n	8000e7e <__aeabi_ddiv+0x492>
 8000ef2:	42af      	cmp	r7, r5
 8000ef4:	d9c0      	bls.n	8000e78 <__aeabi_ddiv+0x48c>
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	e716      	b.n	8000d28 <__aeabi_ddiv+0x33c>
 8000efa:	428a      	cmp	r2, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x514>
 8000efe:	e6ea      	b.n	8000cd6 <__aeabi_ddiv+0x2ea>
 8000f00:	1e83      	subs	r3, r0, #2
 8000f02:	1909      	adds	r1, r1, r4
 8000f04:	e6e7      	b.n	8000cd6 <__aeabi_ddiv+0x2ea>
 8000f06:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <__aeabi_ddiv+0x5c4>)
 8000f08:	0028      	movs	r0, r5
 8000f0a:	445a      	add	r2, fp
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	4095      	lsls	r5, r2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	40c8      	lsrs	r0, r1
 8000f14:	1e6a      	subs	r2, r5, #1
 8000f16:	4195      	sbcs	r5, r2
 8000f18:	4644      	mov	r4, r8
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	432b      	orrs	r3, r5
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	075a      	lsls	r2, r3, #29
 8000f22:	d092      	beq.n	8000e4a <__aeabi_ddiv+0x45e>
 8000f24:	220f      	movs	r2, #15
 8000f26:	401a      	ands	r2, r3
 8000f28:	2a04      	cmp	r2, #4
 8000f2a:	d188      	bne.n	8000e3e <__aeabi_ddiv+0x452>
 8000f2c:	e78d      	b.n	8000e4a <__aeabi_ddiv+0x45e>
 8000f2e:	0035      	movs	r5, r6
 8000f30:	4281      	cmp	r1, r0
 8000f32:	d000      	beq.n	8000f36 <__aeabi_ddiv+0x54a>
 8000f34:	e74b      	b.n	8000dce <__aeabi_ddiv+0x3e2>
 8000f36:	9a00      	ldr	r2, [sp, #0]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_ddiv+0x552>
 8000f3c:	e747      	b.n	8000dce <__aeabi_ddiv+0x3e2>
 8000f3e:	e618      	b.n	8000b72 <__aeabi_ddiv+0x186>
 8000f40:	42ae      	cmp	r6, r5
 8000f42:	d99c      	bls.n	8000e7e <__aeabi_ddiv+0x492>
 8000f44:	2302      	movs	r3, #2
 8000f46:	425b      	negs	r3, r3
 8000f48:	469c      	mov	ip, r3
 8000f4a:	9b00      	ldr	r3, [sp, #0]
 8000f4c:	44e0      	add	r8, ip
 8000f4e:	469c      	mov	ip, r3
 8000f50:	4465      	add	r5, ip
 8000f52:	429d      	cmp	r5, r3
 8000f54:	419b      	sbcs	r3, r3
 8000f56:	425b      	negs	r3, r3
 8000f58:	191b      	adds	r3, r3, r4
 8000f5a:	18c9      	adds	r1, r1, r3
 8000f5c:	e6e4      	b.n	8000d28 <__aeabi_ddiv+0x33c>
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <__aeabi_ddiv+0x5c8>)
 8000f60:	445a      	add	r2, fp
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	dc00      	bgt.n	8000f68 <__aeabi_ddiv+0x57c>
 8000f66:	e744      	b.n	8000df2 <__aeabi_ddiv+0x406>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4498      	add	r8, r3
 8000f6e:	e609      	b.n	8000b84 <__aeabi_ddiv+0x198>
 8000f70:	0765      	lsls	r5, r4, #29
 8000f72:	0264      	lsls	r4, r4, #9
 8000f74:	0b24      	lsrs	r4, r4, #12
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	431d      	orrs	r5, r3
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e590      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000f7e:	9e00      	ldr	r6, [sp, #0]
 8000f80:	3d02      	subs	r5, #2
 8000f82:	0072      	lsls	r2, r6, #1
 8000f84:	42b2      	cmp	r2, r6
 8000f86:	41bf      	sbcs	r7, r7
 8000f88:	427f      	negs	r7, r7
 8000f8a:	193c      	adds	r4, r7, r4
 8000f8c:	1909      	adds	r1, r1, r4
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	e7ce      	b.n	8000f30 <__aeabi_ddiv+0x544>
 8000f92:	2480      	movs	r4, #128	; 0x80
 8000f94:	4643      	mov	r3, r8
 8000f96:	0324      	lsls	r4, r4, #12
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	0324      	lsls	r4, r4, #12
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <__aeabi_ddiv+0x5cc>)
 8000f9e:	0b24      	lsrs	r4, r4, #12
 8000fa0:	e57e      	b.n	8000aa0 <__aeabi_ddiv+0xb4>
 8000fa2:	9a00      	ldr	r2, [sp, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3ea      	bcc.n	8000f7e <__aeabi_ddiv+0x592>
 8000fa8:	0035      	movs	r5, r6
 8000faa:	e7c4      	b.n	8000f36 <__aeabi_ddiv+0x54a>
 8000fac:	0000043e 	.word	0x0000043e
 8000fb0:	0000041e 	.word	0x0000041e
 8000fb4:	000003ff 	.word	0x000003ff
 8000fb8:	000007ff 	.word	0x000007ff

08000fbc <__aeabi_dmul>:
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbe:	4657      	mov	r7, sl
 8000fc0:	464e      	mov	r6, r9
 8000fc2:	4645      	mov	r5, r8
 8000fc4:	46de      	mov	lr, fp
 8000fc6:	b5e0      	push	{r5, r6, r7, lr}
 8000fc8:	4698      	mov	r8, r3
 8000fca:	030c      	lsls	r4, r1, #12
 8000fcc:	004b      	lsls	r3, r1, #1
 8000fce:	0006      	movs	r6, r0
 8000fd0:	4692      	mov	sl, r2
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	0b24      	lsrs	r4, r4, #12
 8000fd6:	0d5b      	lsrs	r3, r3, #21
 8000fd8:	0fcf      	lsrs	r7, r1, #31
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d06c      	beq.n	80010b8 <__aeabi_dmul+0xfc>
 8000fde:	4add      	ldr	r2, [pc, #884]	; (8001354 <__aeabi_dmul+0x398>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dmul+0x2a>
 8000fe4:	e086      	b.n	80010f4 <__aeabi_dmul+0x138>
 8000fe6:	0f42      	lsrs	r2, r0, #29
 8000fe8:	00e4      	lsls	r4, r4, #3
 8000fea:	4314      	orrs	r4, r2
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	0412      	lsls	r2, r2, #16
 8000ff0:	4314      	orrs	r4, r2
 8000ff2:	4ad9      	ldr	r2, [pc, #868]	; (8001358 <__aeabi_dmul+0x39c>)
 8000ff4:	00c5      	lsls	r5, r0, #3
 8000ff6:	4694      	mov	ip, r2
 8000ff8:	4463      	add	r3, ip
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4699      	mov	r9, r3
 8001000:	469b      	mov	fp, r3
 8001002:	4643      	mov	r3, r8
 8001004:	4642      	mov	r2, r8
 8001006:	031e      	lsls	r6, r3, #12
 8001008:	0fd2      	lsrs	r2, r2, #31
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4650      	mov	r0, sl
 800100e:	4690      	mov	r8, r2
 8001010:	0b36      	lsrs	r6, r6, #12
 8001012:	0d5b      	lsrs	r3, r3, #21
 8001014:	d100      	bne.n	8001018 <__aeabi_dmul+0x5c>
 8001016:	e078      	b.n	800110a <__aeabi_dmul+0x14e>
 8001018:	4ace      	ldr	r2, [pc, #824]	; (8001354 <__aeabi_dmul+0x398>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01d      	beq.n	800105a <__aeabi_dmul+0x9e>
 800101e:	49ce      	ldr	r1, [pc, #824]	; (8001358 <__aeabi_dmul+0x39c>)
 8001020:	0f42      	lsrs	r2, r0, #29
 8001022:	468c      	mov	ip, r1
 8001024:	9900      	ldr	r1, [sp, #0]
 8001026:	4463      	add	r3, ip
 8001028:	00f6      	lsls	r6, r6, #3
 800102a:	468c      	mov	ip, r1
 800102c:	4316      	orrs	r6, r2
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	449c      	add	ip, r3
 8001032:	0412      	lsls	r2, r2, #16
 8001034:	4663      	mov	r3, ip
 8001036:	4316      	orrs	r6, r2
 8001038:	00c2      	lsls	r2, r0, #3
 800103a:	2000      	movs	r0, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	9900      	ldr	r1, [sp, #0]
 8001040:	4643      	mov	r3, r8
 8001042:	3101      	adds	r1, #1
 8001044:	468c      	mov	ip, r1
 8001046:	4649      	mov	r1, r9
 8001048:	407b      	eors	r3, r7
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	290f      	cmp	r1, #15
 800104e:	d900      	bls.n	8001052 <__aeabi_dmul+0x96>
 8001050:	e07e      	b.n	8001150 <__aeabi_dmul+0x194>
 8001052:	4bc2      	ldr	r3, [pc, #776]	; (800135c <__aeabi_dmul+0x3a0>)
 8001054:	0089      	lsls	r1, r1, #2
 8001056:	5859      	ldr	r1, [r3, r1]
 8001058:	468f      	mov	pc, r1
 800105a:	4652      	mov	r2, sl
 800105c:	9b00      	ldr	r3, [sp, #0]
 800105e:	4332      	orrs	r2, r6
 8001060:	d000      	beq.n	8001064 <__aeabi_dmul+0xa8>
 8001062:	e156      	b.n	8001312 <__aeabi_dmul+0x356>
 8001064:	49bb      	ldr	r1, [pc, #748]	; (8001354 <__aeabi_dmul+0x398>)
 8001066:	2600      	movs	r6, #0
 8001068:	468c      	mov	ip, r1
 800106a:	4463      	add	r3, ip
 800106c:	4649      	mov	r1, r9
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	4319      	orrs	r1, r3
 8001074:	4689      	mov	r9, r1
 8001076:	2002      	movs	r0, #2
 8001078:	e7e1      	b.n	800103e <__aeabi_dmul+0x82>
 800107a:	4643      	mov	r3, r8
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	0034      	movs	r4, r6
 8001080:	0015      	movs	r5, r2
 8001082:	4683      	mov	fp, r0
 8001084:	465b      	mov	r3, fp
 8001086:	2b02      	cmp	r3, #2
 8001088:	d05e      	beq.n	8001148 <__aeabi_dmul+0x18c>
 800108a:	2b03      	cmp	r3, #3
 800108c:	d100      	bne.n	8001090 <__aeabi_dmul+0xd4>
 800108e:	e1f3      	b.n	8001478 <__aeabi_dmul+0x4bc>
 8001090:	2b01      	cmp	r3, #1
 8001092:	d000      	beq.n	8001096 <__aeabi_dmul+0xda>
 8001094:	e118      	b.n	80012c8 <__aeabi_dmul+0x30c>
 8001096:	2200      	movs	r2, #0
 8001098:	2400      	movs	r4, #0
 800109a:	2500      	movs	r5, #0
 800109c:	9b01      	ldr	r3, [sp, #4]
 800109e:	0512      	lsls	r2, r2, #20
 80010a0:	4322      	orrs	r2, r4
 80010a2:	07db      	lsls	r3, r3, #31
 80010a4:	431a      	orrs	r2, r3
 80010a6:	0028      	movs	r0, r5
 80010a8:	0011      	movs	r1, r2
 80010aa:	b007      	add	sp, #28
 80010ac:	bcf0      	pop	{r4, r5, r6, r7}
 80010ae:	46bb      	mov	fp, r7
 80010b0:	46b2      	mov	sl, r6
 80010b2:	46a9      	mov	r9, r5
 80010b4:	46a0      	mov	r8, r4
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b8:	0025      	movs	r5, r4
 80010ba:	4305      	orrs	r5, r0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dmul+0x104>
 80010be:	e141      	b.n	8001344 <__aeabi_dmul+0x388>
 80010c0:	2c00      	cmp	r4, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dmul+0x10a>
 80010c4:	e1ad      	b.n	8001422 <__aeabi_dmul+0x466>
 80010c6:	0020      	movs	r0, r4
 80010c8:	f000 fa4a 	bl	8001560 <__clzsi2>
 80010cc:	0001      	movs	r1, r0
 80010ce:	0002      	movs	r2, r0
 80010d0:	390b      	subs	r1, #11
 80010d2:	231d      	movs	r3, #29
 80010d4:	0010      	movs	r0, r2
 80010d6:	1a5b      	subs	r3, r3, r1
 80010d8:	0031      	movs	r1, r6
 80010da:	0035      	movs	r5, r6
 80010dc:	3808      	subs	r0, #8
 80010de:	4084      	lsls	r4, r0
 80010e0:	40d9      	lsrs	r1, r3
 80010e2:	4085      	lsls	r5, r0
 80010e4:	430c      	orrs	r4, r1
 80010e6:	489e      	ldr	r0, [pc, #632]	; (8001360 <__aeabi_dmul+0x3a4>)
 80010e8:	1a83      	subs	r3, r0, r2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	4699      	mov	r9, r3
 80010f0:	469b      	mov	fp, r3
 80010f2:	e786      	b.n	8001002 <__aeabi_dmul+0x46>
 80010f4:	0005      	movs	r5, r0
 80010f6:	4325      	orrs	r5, r4
 80010f8:	d000      	beq.n	80010fc <__aeabi_dmul+0x140>
 80010fa:	e11c      	b.n	8001336 <__aeabi_dmul+0x37a>
 80010fc:	2208      	movs	r2, #8
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	2400      	movs	r4, #0
 8001104:	4691      	mov	r9, r2
 8001106:	469b      	mov	fp, r3
 8001108:	e77b      	b.n	8001002 <__aeabi_dmul+0x46>
 800110a:	4652      	mov	r2, sl
 800110c:	4332      	orrs	r2, r6
 800110e:	d100      	bne.n	8001112 <__aeabi_dmul+0x156>
 8001110:	e10a      	b.n	8001328 <__aeabi_dmul+0x36c>
 8001112:	2e00      	cmp	r6, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dmul+0x15c>
 8001116:	e176      	b.n	8001406 <__aeabi_dmul+0x44a>
 8001118:	0030      	movs	r0, r6
 800111a:	f000 fa21 	bl	8001560 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	0001      	movs	r1, r0
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	4652      	mov	r2, sl
 800112a:	3908      	subs	r1, #8
 800112c:	40da      	lsrs	r2, r3
 800112e:	408e      	lsls	r6, r1
 8001130:	4316      	orrs	r6, r2
 8001132:	4652      	mov	r2, sl
 8001134:	408a      	lsls	r2, r1
 8001136:	9b00      	ldr	r3, [sp, #0]
 8001138:	4989      	ldr	r1, [pc, #548]	; (8001360 <__aeabi_dmul+0x3a4>)
 800113a:	1a18      	subs	r0, r3, r0
 800113c:	0003      	movs	r3, r0
 800113e:	468c      	mov	ip, r1
 8001140:	4463      	add	r3, ip
 8001142:	2000      	movs	r0, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	e77a      	b.n	800103e <__aeabi_dmul+0x82>
 8001148:	2400      	movs	r4, #0
 800114a:	2500      	movs	r5, #0
 800114c:	4a81      	ldr	r2, [pc, #516]	; (8001354 <__aeabi_dmul+0x398>)
 800114e:	e7a5      	b.n	800109c <__aeabi_dmul+0xe0>
 8001150:	0c2f      	lsrs	r7, r5, #16
 8001152:	042d      	lsls	r5, r5, #16
 8001154:	0c2d      	lsrs	r5, r5, #16
 8001156:	002b      	movs	r3, r5
 8001158:	0c11      	lsrs	r1, r2, #16
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	0c12      	lsrs	r2, r2, #16
 800115e:	4353      	muls	r3, r2
 8001160:	4698      	mov	r8, r3
 8001162:	0013      	movs	r3, r2
 8001164:	0028      	movs	r0, r5
 8001166:	437b      	muls	r3, r7
 8001168:	4699      	mov	r9, r3
 800116a:	4348      	muls	r0, r1
 800116c:	4448      	add	r0, r9
 800116e:	4683      	mov	fp, r0
 8001170:	4640      	mov	r0, r8
 8001172:	000b      	movs	r3, r1
 8001174:	0c00      	lsrs	r0, r0, #16
 8001176:	4682      	mov	sl, r0
 8001178:	4658      	mov	r0, fp
 800117a:	437b      	muls	r3, r7
 800117c:	4450      	add	r0, sl
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	4581      	cmp	r9, r0
 8001182:	d906      	bls.n	8001192 <__aeabi_dmul+0x1d6>
 8001184:	469a      	mov	sl, r3
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	4699      	mov	r9, r3
 800118c:	44ca      	add	sl, r9
 800118e:	4653      	mov	r3, sl
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	0c03      	lsrs	r3, r0, #16
 8001194:	469b      	mov	fp, r3
 8001196:	4643      	mov	r3, r8
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	0400      	lsls	r0, r0, #16
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	4698      	mov	r8, r3
 80011a0:	0003      	movs	r3, r0
 80011a2:	4443      	add	r3, r8
 80011a4:	9304      	str	r3, [sp, #16]
 80011a6:	0c33      	lsrs	r3, r6, #16
 80011a8:	4699      	mov	r9, r3
 80011aa:	002b      	movs	r3, r5
 80011ac:	0436      	lsls	r6, r6, #16
 80011ae:	0c36      	lsrs	r6, r6, #16
 80011b0:	4373      	muls	r3, r6
 80011b2:	4698      	mov	r8, r3
 80011b4:	0033      	movs	r3, r6
 80011b6:	437b      	muls	r3, r7
 80011b8:	469a      	mov	sl, r3
 80011ba:	464b      	mov	r3, r9
 80011bc:	435d      	muls	r5, r3
 80011be:	435f      	muls	r7, r3
 80011c0:	4643      	mov	r3, r8
 80011c2:	4455      	add	r5, sl
 80011c4:	0c18      	lsrs	r0, r3, #16
 80011c6:	1940      	adds	r0, r0, r5
 80011c8:	4582      	cmp	sl, r0
 80011ca:	d903      	bls.n	80011d4 <__aeabi_dmul+0x218>
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	025b      	lsls	r3, r3, #9
 80011d0:	469a      	mov	sl, r3
 80011d2:	4457      	add	r7, sl
 80011d4:	0c05      	lsrs	r5, r0, #16
 80011d6:	19eb      	adds	r3, r5, r7
 80011d8:	9305      	str	r3, [sp, #20]
 80011da:	4643      	mov	r3, r8
 80011dc:	041d      	lsls	r5, r3, #16
 80011de:	0c2d      	lsrs	r5, r5, #16
 80011e0:	0400      	lsls	r0, r0, #16
 80011e2:	1940      	adds	r0, r0, r5
 80011e4:	0c25      	lsrs	r5, r4, #16
 80011e6:	0424      	lsls	r4, r4, #16
 80011e8:	0c24      	lsrs	r4, r4, #16
 80011ea:	0027      	movs	r7, r4
 80011ec:	4357      	muls	r7, r2
 80011ee:	436a      	muls	r2, r5
 80011f0:	4690      	mov	r8, r2
 80011f2:	002a      	movs	r2, r5
 80011f4:	0c3b      	lsrs	r3, r7, #16
 80011f6:	469a      	mov	sl, r3
 80011f8:	434a      	muls	r2, r1
 80011fa:	4361      	muls	r1, r4
 80011fc:	4441      	add	r1, r8
 80011fe:	4451      	add	r1, sl
 8001200:	4483      	add	fp, r0
 8001202:	4588      	cmp	r8, r1
 8001204:	d903      	bls.n	800120e <__aeabi_dmul+0x252>
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4698      	mov	r8, r3
 800120c:	4442      	add	r2, r8
 800120e:	043f      	lsls	r7, r7, #16
 8001210:	0c0b      	lsrs	r3, r1, #16
 8001212:	0c3f      	lsrs	r7, r7, #16
 8001214:	0409      	lsls	r1, r1, #16
 8001216:	19c9      	adds	r1, r1, r7
 8001218:	0027      	movs	r7, r4
 800121a:	4698      	mov	r8, r3
 800121c:	464b      	mov	r3, r9
 800121e:	4377      	muls	r7, r6
 8001220:	435c      	muls	r4, r3
 8001222:	436e      	muls	r6, r5
 8001224:	435d      	muls	r5, r3
 8001226:	0c3b      	lsrs	r3, r7, #16
 8001228:	4699      	mov	r9, r3
 800122a:	19a4      	adds	r4, r4, r6
 800122c:	444c      	add	r4, r9
 800122e:	4442      	add	r2, r8
 8001230:	9503      	str	r5, [sp, #12]
 8001232:	42a6      	cmp	r6, r4
 8001234:	d904      	bls.n	8001240 <__aeabi_dmul+0x284>
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	4698      	mov	r8, r3
 800123c:	4445      	add	r5, r8
 800123e:	9503      	str	r5, [sp, #12]
 8001240:	9b02      	ldr	r3, [sp, #8]
 8001242:	043f      	lsls	r7, r7, #16
 8001244:	445b      	add	r3, fp
 8001246:	001e      	movs	r6, r3
 8001248:	4283      	cmp	r3, r0
 800124a:	4180      	sbcs	r0, r0
 800124c:	0423      	lsls	r3, r4, #16
 800124e:	4698      	mov	r8, r3
 8001250:	9b05      	ldr	r3, [sp, #20]
 8001252:	0c3f      	lsrs	r7, r7, #16
 8001254:	4447      	add	r7, r8
 8001256:	4698      	mov	r8, r3
 8001258:	1876      	adds	r6, r6, r1
 800125a:	428e      	cmp	r6, r1
 800125c:	4189      	sbcs	r1, r1
 800125e:	4447      	add	r7, r8
 8001260:	4240      	negs	r0, r0
 8001262:	183d      	adds	r5, r7, r0
 8001264:	46a8      	mov	r8, r5
 8001266:	4693      	mov	fp, r2
 8001268:	4249      	negs	r1, r1
 800126a:	468a      	mov	sl, r1
 800126c:	44c3      	add	fp, r8
 800126e:	429f      	cmp	r7, r3
 8001270:	41bf      	sbcs	r7, r7
 8001272:	4580      	cmp	r8, r0
 8001274:	4180      	sbcs	r0, r0
 8001276:	9b03      	ldr	r3, [sp, #12]
 8001278:	44da      	add	sl, fp
 800127a:	4698      	mov	r8, r3
 800127c:	4653      	mov	r3, sl
 800127e:	4240      	negs	r0, r0
 8001280:	427f      	negs	r7, r7
 8001282:	4307      	orrs	r7, r0
 8001284:	0c24      	lsrs	r4, r4, #16
 8001286:	4593      	cmp	fp, r2
 8001288:	4192      	sbcs	r2, r2
 800128a:	458a      	cmp	sl, r1
 800128c:	4189      	sbcs	r1, r1
 800128e:	193f      	adds	r7, r7, r4
 8001290:	0ddc      	lsrs	r4, r3, #23
 8001292:	9b04      	ldr	r3, [sp, #16]
 8001294:	0275      	lsls	r5, r6, #9
 8001296:	431d      	orrs	r5, r3
 8001298:	1e68      	subs	r0, r5, #1
 800129a:	4185      	sbcs	r5, r0
 800129c:	4653      	mov	r3, sl
 800129e:	4252      	negs	r2, r2
 80012a0:	4249      	negs	r1, r1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	18bf      	adds	r7, r7, r2
 80012a6:	4447      	add	r7, r8
 80012a8:	0df6      	lsrs	r6, r6, #23
 80012aa:	027f      	lsls	r7, r7, #9
 80012ac:	4335      	orrs	r5, r6
 80012ae:	025a      	lsls	r2, r3, #9
 80012b0:	433c      	orrs	r4, r7
 80012b2:	4315      	orrs	r5, r2
 80012b4:	01fb      	lsls	r3, r7, #7
 80012b6:	d400      	bmi.n	80012ba <__aeabi_dmul+0x2fe>
 80012b8:	e0c1      	b.n	800143e <__aeabi_dmul+0x482>
 80012ba:	2101      	movs	r1, #1
 80012bc:	086a      	lsrs	r2, r5, #1
 80012be:	400d      	ands	r5, r1
 80012c0:	4315      	orrs	r5, r2
 80012c2:	07e2      	lsls	r2, r4, #31
 80012c4:	4315      	orrs	r5, r2
 80012c6:	0864      	lsrs	r4, r4, #1
 80012c8:	4926      	ldr	r1, [pc, #152]	; (8001364 <__aeabi_dmul+0x3a8>)
 80012ca:	4461      	add	r1, ip
 80012cc:	2900      	cmp	r1, #0
 80012ce:	dd56      	ble.n	800137e <__aeabi_dmul+0x3c2>
 80012d0:	076b      	lsls	r3, r5, #29
 80012d2:	d009      	beq.n	80012e8 <__aeabi_dmul+0x32c>
 80012d4:	220f      	movs	r2, #15
 80012d6:	402a      	ands	r2, r5
 80012d8:	2a04      	cmp	r2, #4
 80012da:	d005      	beq.n	80012e8 <__aeabi_dmul+0x32c>
 80012dc:	1d2a      	adds	r2, r5, #4
 80012de:	42aa      	cmp	r2, r5
 80012e0:	41ad      	sbcs	r5, r5
 80012e2:	426d      	negs	r5, r5
 80012e4:	1964      	adds	r4, r4, r5
 80012e6:	0015      	movs	r5, r2
 80012e8:	01e3      	lsls	r3, r4, #7
 80012ea:	d504      	bpl.n	80012f6 <__aeabi_dmul+0x33a>
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <__aeabi_dmul+0x3ac>)
 80012f0:	00c9      	lsls	r1, r1, #3
 80012f2:	4014      	ands	r4, r2
 80012f4:	4461      	add	r1, ip
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <__aeabi_dmul+0x3b0>)
 80012f8:	4291      	cmp	r1, r2
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dmul+0x342>
 80012fc:	e724      	b.n	8001148 <__aeabi_dmul+0x18c>
 80012fe:	0762      	lsls	r2, r4, #29
 8001300:	08ed      	lsrs	r5, r5, #3
 8001302:	0264      	lsls	r4, r4, #9
 8001304:	0549      	lsls	r1, r1, #21
 8001306:	4315      	orrs	r5, r2
 8001308:	0b24      	lsrs	r4, r4, #12
 800130a:	0d4a      	lsrs	r2, r1, #21
 800130c:	e6c6      	b.n	800109c <__aeabi_dmul+0xe0>
 800130e:	9701      	str	r7, [sp, #4]
 8001310:	e6b8      	b.n	8001084 <__aeabi_dmul+0xc8>
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <__aeabi_dmul+0x398>)
 8001314:	2003      	movs	r0, #3
 8001316:	4694      	mov	ip, r2
 8001318:	4463      	add	r3, ip
 800131a:	464a      	mov	r2, r9
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2303      	movs	r3, #3
 8001320:	431a      	orrs	r2, r3
 8001322:	4691      	mov	r9, r2
 8001324:	4652      	mov	r2, sl
 8001326:	e68a      	b.n	800103e <__aeabi_dmul+0x82>
 8001328:	4649      	mov	r1, r9
 800132a:	2301      	movs	r3, #1
 800132c:	4319      	orrs	r1, r3
 800132e:	4689      	mov	r9, r1
 8001330:	2600      	movs	r6, #0
 8001332:	2001      	movs	r0, #1
 8001334:	e683      	b.n	800103e <__aeabi_dmul+0x82>
 8001336:	220c      	movs	r2, #12
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2303      	movs	r3, #3
 800133c:	0005      	movs	r5, r0
 800133e:	4691      	mov	r9, r2
 8001340:	469b      	mov	fp, r3
 8001342:	e65e      	b.n	8001002 <__aeabi_dmul+0x46>
 8001344:	2304      	movs	r3, #4
 8001346:	4699      	mov	r9, r3
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	2400      	movs	r4, #0
 8001350:	469b      	mov	fp, r3
 8001352:	e656      	b.n	8001002 <__aeabi_dmul+0x46>
 8001354:	000007ff 	.word	0x000007ff
 8001358:	fffffc01 	.word	0xfffffc01
 800135c:	08005a80 	.word	0x08005a80
 8001360:	fffffc0d 	.word	0xfffffc0d
 8001364:	000003ff 	.word	0x000003ff
 8001368:	feffffff 	.word	0xfeffffff
 800136c:	000007fe 	.word	0x000007fe
 8001370:	2300      	movs	r3, #0
 8001372:	2480      	movs	r4, #128	; 0x80
 8001374:	2500      	movs	r5, #0
 8001376:	4a44      	ldr	r2, [pc, #272]	; (8001488 <__aeabi_dmul+0x4cc>)
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	0324      	lsls	r4, r4, #12
 800137c:	e68e      	b.n	800109c <__aeabi_dmul+0xe0>
 800137e:	2001      	movs	r0, #1
 8001380:	1a40      	subs	r0, r0, r1
 8001382:	2838      	cmp	r0, #56	; 0x38
 8001384:	dd00      	ble.n	8001388 <__aeabi_dmul+0x3cc>
 8001386:	e686      	b.n	8001096 <__aeabi_dmul+0xda>
 8001388:	281f      	cmp	r0, #31
 800138a:	dd5b      	ble.n	8001444 <__aeabi_dmul+0x488>
 800138c:	221f      	movs	r2, #31
 800138e:	0023      	movs	r3, r4
 8001390:	4252      	negs	r2, r2
 8001392:	1a51      	subs	r1, r2, r1
 8001394:	40cb      	lsrs	r3, r1
 8001396:	0019      	movs	r1, r3
 8001398:	2820      	cmp	r0, #32
 800139a:	d003      	beq.n	80013a4 <__aeabi_dmul+0x3e8>
 800139c:	4a3b      	ldr	r2, [pc, #236]	; (800148c <__aeabi_dmul+0x4d0>)
 800139e:	4462      	add	r2, ip
 80013a0:	4094      	lsls	r4, r2
 80013a2:	4325      	orrs	r5, r4
 80013a4:	1e6a      	subs	r2, r5, #1
 80013a6:	4195      	sbcs	r5, r2
 80013a8:	002a      	movs	r2, r5
 80013aa:	430a      	orrs	r2, r1
 80013ac:	2107      	movs	r1, #7
 80013ae:	000d      	movs	r5, r1
 80013b0:	2400      	movs	r4, #0
 80013b2:	4015      	ands	r5, r2
 80013b4:	4211      	tst	r1, r2
 80013b6:	d05b      	beq.n	8001470 <__aeabi_dmul+0x4b4>
 80013b8:	210f      	movs	r1, #15
 80013ba:	2400      	movs	r4, #0
 80013bc:	4011      	ands	r1, r2
 80013be:	2904      	cmp	r1, #4
 80013c0:	d053      	beq.n	800146a <__aeabi_dmul+0x4ae>
 80013c2:	1d11      	adds	r1, r2, #4
 80013c4:	4291      	cmp	r1, r2
 80013c6:	4192      	sbcs	r2, r2
 80013c8:	4252      	negs	r2, r2
 80013ca:	18a4      	adds	r4, r4, r2
 80013cc:	000a      	movs	r2, r1
 80013ce:	0223      	lsls	r3, r4, #8
 80013d0:	d54b      	bpl.n	800146a <__aeabi_dmul+0x4ae>
 80013d2:	2201      	movs	r2, #1
 80013d4:	2400      	movs	r4, #0
 80013d6:	2500      	movs	r5, #0
 80013d8:	e660      	b.n	800109c <__aeabi_dmul+0xe0>
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	031b      	lsls	r3, r3, #12
 80013de:	421c      	tst	r4, r3
 80013e0:	d009      	beq.n	80013f6 <__aeabi_dmul+0x43a>
 80013e2:	421e      	tst	r6, r3
 80013e4:	d107      	bne.n	80013f6 <__aeabi_dmul+0x43a>
 80013e6:	4333      	orrs	r3, r6
 80013e8:	031c      	lsls	r4, r3, #12
 80013ea:	4643      	mov	r3, r8
 80013ec:	0015      	movs	r5, r2
 80013ee:	0b24      	lsrs	r4, r4, #12
 80013f0:	4a25      	ldr	r2, [pc, #148]	; (8001488 <__aeabi_dmul+0x4cc>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	e652      	b.n	800109c <__aeabi_dmul+0xe0>
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	0312      	lsls	r2, r2, #12
 80013fa:	4314      	orrs	r4, r2
 80013fc:	0324      	lsls	r4, r4, #12
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <__aeabi_dmul+0x4cc>)
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	9701      	str	r7, [sp, #4]
 8001404:	e64a      	b.n	800109c <__aeabi_dmul+0xe0>
 8001406:	f000 f8ab 	bl	8001560 <__clzsi2>
 800140a:	0003      	movs	r3, r0
 800140c:	001a      	movs	r2, r3
 800140e:	3215      	adds	r2, #21
 8001410:	3020      	adds	r0, #32
 8001412:	2a1c      	cmp	r2, #28
 8001414:	dc00      	bgt.n	8001418 <__aeabi_dmul+0x45c>
 8001416:	e684      	b.n	8001122 <__aeabi_dmul+0x166>
 8001418:	4656      	mov	r6, sl
 800141a:	3b08      	subs	r3, #8
 800141c:	2200      	movs	r2, #0
 800141e:	409e      	lsls	r6, r3
 8001420:	e689      	b.n	8001136 <__aeabi_dmul+0x17a>
 8001422:	f000 f89d 	bl	8001560 <__clzsi2>
 8001426:	0001      	movs	r1, r0
 8001428:	0002      	movs	r2, r0
 800142a:	3115      	adds	r1, #21
 800142c:	3220      	adds	r2, #32
 800142e:	291c      	cmp	r1, #28
 8001430:	dc00      	bgt.n	8001434 <__aeabi_dmul+0x478>
 8001432:	e64e      	b.n	80010d2 <__aeabi_dmul+0x116>
 8001434:	0034      	movs	r4, r6
 8001436:	3808      	subs	r0, #8
 8001438:	2500      	movs	r5, #0
 800143a:	4084      	lsls	r4, r0
 800143c:	e653      	b.n	80010e6 <__aeabi_dmul+0x12a>
 800143e:	9b00      	ldr	r3, [sp, #0]
 8001440:	469c      	mov	ip, r3
 8001442:	e741      	b.n	80012c8 <__aeabi_dmul+0x30c>
 8001444:	4912      	ldr	r1, [pc, #72]	; (8001490 <__aeabi_dmul+0x4d4>)
 8001446:	0022      	movs	r2, r4
 8001448:	4461      	add	r1, ip
 800144a:	002e      	movs	r6, r5
 800144c:	408d      	lsls	r5, r1
 800144e:	408a      	lsls	r2, r1
 8001450:	40c6      	lsrs	r6, r0
 8001452:	1e69      	subs	r1, r5, #1
 8001454:	418d      	sbcs	r5, r1
 8001456:	4332      	orrs	r2, r6
 8001458:	432a      	orrs	r2, r5
 800145a:	40c4      	lsrs	r4, r0
 800145c:	0753      	lsls	r3, r2, #29
 800145e:	d0b6      	beq.n	80013ce <__aeabi_dmul+0x412>
 8001460:	210f      	movs	r1, #15
 8001462:	4011      	ands	r1, r2
 8001464:	2904      	cmp	r1, #4
 8001466:	d1ac      	bne.n	80013c2 <__aeabi_dmul+0x406>
 8001468:	e7b1      	b.n	80013ce <__aeabi_dmul+0x412>
 800146a:	0765      	lsls	r5, r4, #29
 800146c:	0264      	lsls	r4, r4, #9
 800146e:	0b24      	lsrs	r4, r4, #12
 8001470:	08d2      	lsrs	r2, r2, #3
 8001472:	4315      	orrs	r5, r2
 8001474:	2200      	movs	r2, #0
 8001476:	e611      	b.n	800109c <__aeabi_dmul+0xe0>
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	0312      	lsls	r2, r2, #12
 800147c:	4314      	orrs	r4, r2
 800147e:	0324      	lsls	r4, r4, #12
 8001480:	4a01      	ldr	r2, [pc, #4]	; (8001488 <__aeabi_dmul+0x4cc>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e60a      	b.n	800109c <__aeabi_dmul+0xe0>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	0000043e 	.word	0x0000043e
 8001490:	0000041e 	.word	0x0000041e

08001494 <__aeabi_d2iz>:
 8001494:	000a      	movs	r2, r1
 8001496:	b530      	push	{r4, r5, lr}
 8001498:	4c13      	ldr	r4, [pc, #76]	; (80014e8 <__aeabi_d2iz+0x54>)
 800149a:	0053      	lsls	r3, r2, #1
 800149c:	0309      	lsls	r1, r1, #12
 800149e:	0005      	movs	r5, r0
 80014a0:	0b09      	lsrs	r1, r1, #12
 80014a2:	2000      	movs	r0, #0
 80014a4:	0d5b      	lsrs	r3, r3, #21
 80014a6:	0fd2      	lsrs	r2, r2, #31
 80014a8:	42a3      	cmp	r3, r4
 80014aa:	dd04      	ble.n	80014b6 <__aeabi_d2iz+0x22>
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <__aeabi_d2iz+0x58>)
 80014ae:	4283      	cmp	r3, r0
 80014b0:	dd02      	ble.n	80014b8 <__aeabi_d2iz+0x24>
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <__aeabi_d2iz+0x5c>)
 80014b4:	18d0      	adds	r0, r2, r3
 80014b6:	bd30      	pop	{r4, r5, pc}
 80014b8:	2080      	movs	r0, #128	; 0x80
 80014ba:	0340      	lsls	r0, r0, #13
 80014bc:	4301      	orrs	r1, r0
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <__aeabi_d2iz+0x60>)
 80014c0:	1ac0      	subs	r0, r0, r3
 80014c2:	281f      	cmp	r0, #31
 80014c4:	dd08      	ble.n	80014d8 <__aeabi_d2iz+0x44>
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <__aeabi_d2iz+0x64>)
 80014c8:	1ac3      	subs	r3, r0, r3
 80014ca:	40d9      	lsrs	r1, r3
 80014cc:	000b      	movs	r3, r1
 80014ce:	4258      	negs	r0, r3
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d1f0      	bne.n	80014b6 <__aeabi_d2iz+0x22>
 80014d4:	0018      	movs	r0, r3
 80014d6:	e7ee      	b.n	80014b6 <__aeabi_d2iz+0x22>
 80014d8:	4c08      	ldr	r4, [pc, #32]	; (80014fc <__aeabi_d2iz+0x68>)
 80014da:	40c5      	lsrs	r5, r0
 80014dc:	46a4      	mov	ip, r4
 80014de:	4463      	add	r3, ip
 80014e0:	4099      	lsls	r1, r3
 80014e2:	000b      	movs	r3, r1
 80014e4:	432b      	orrs	r3, r5
 80014e6:	e7f2      	b.n	80014ce <__aeabi_d2iz+0x3a>
 80014e8:	000003fe 	.word	0x000003fe
 80014ec:	0000041d 	.word	0x0000041d
 80014f0:	7fffffff 	.word	0x7fffffff
 80014f4:	00000433 	.word	0x00000433
 80014f8:	00000413 	.word	0x00000413
 80014fc:	fffffbed 	.word	0xfffffbed

08001500 <__aeabi_i2d>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	2800      	cmp	r0, #0
 8001504:	d016      	beq.n	8001534 <__aeabi_i2d+0x34>
 8001506:	17c3      	asrs	r3, r0, #31
 8001508:	18c5      	adds	r5, r0, r3
 800150a:	405d      	eors	r5, r3
 800150c:	0fc4      	lsrs	r4, r0, #31
 800150e:	0028      	movs	r0, r5
 8001510:	f000 f826 	bl	8001560 <__clzsi2>
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <__aeabi_i2d+0x5c>)
 8001516:	1a12      	subs	r2, r2, r0
 8001518:	280a      	cmp	r0, #10
 800151a:	dc16      	bgt.n	800154a <__aeabi_i2d+0x4a>
 800151c:	0003      	movs	r3, r0
 800151e:	002e      	movs	r6, r5
 8001520:	3315      	adds	r3, #21
 8001522:	409e      	lsls	r6, r3
 8001524:	230b      	movs	r3, #11
 8001526:	1a18      	subs	r0, r3, r0
 8001528:	40c5      	lsrs	r5, r0
 800152a:	0553      	lsls	r3, r2, #21
 800152c:	032d      	lsls	r5, r5, #12
 800152e:	0b2d      	lsrs	r5, r5, #12
 8001530:	0d5b      	lsrs	r3, r3, #21
 8001532:	e003      	b.n	800153c <__aeabi_i2d+0x3c>
 8001534:	2400      	movs	r4, #0
 8001536:	2300      	movs	r3, #0
 8001538:	2500      	movs	r5, #0
 800153a:	2600      	movs	r6, #0
 800153c:	051b      	lsls	r3, r3, #20
 800153e:	432b      	orrs	r3, r5
 8001540:	07e4      	lsls	r4, r4, #31
 8001542:	4323      	orrs	r3, r4
 8001544:	0030      	movs	r0, r6
 8001546:	0019      	movs	r1, r3
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	380b      	subs	r0, #11
 800154c:	4085      	lsls	r5, r0
 800154e:	0553      	lsls	r3, r2, #21
 8001550:	032d      	lsls	r5, r5, #12
 8001552:	2600      	movs	r6, #0
 8001554:	0b2d      	lsrs	r5, r5, #12
 8001556:	0d5b      	lsrs	r3, r3, #21
 8001558:	e7f0      	b.n	800153c <__aeabi_i2d+0x3c>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	0000041e 	.word	0x0000041e

08001560 <__clzsi2>:
 8001560:	211c      	movs	r1, #28
 8001562:	2301      	movs	r3, #1
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	4298      	cmp	r0, r3
 8001568:	d301      	bcc.n	800156e <__clzsi2+0xe>
 800156a:	0c00      	lsrs	r0, r0, #16
 800156c:	3910      	subs	r1, #16
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	4298      	cmp	r0, r3
 8001572:	d301      	bcc.n	8001578 <__clzsi2+0x18>
 8001574:	0a00      	lsrs	r0, r0, #8
 8001576:	3908      	subs	r1, #8
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	4298      	cmp	r0, r3
 800157c:	d301      	bcc.n	8001582 <__clzsi2+0x22>
 800157e:	0900      	lsrs	r0, r0, #4
 8001580:	3904      	subs	r1, #4
 8001582:	a202      	add	r2, pc, #8	; (adr r2, 800158c <__clzsi2+0x2c>)
 8001584:	5c10      	ldrb	r0, [r2, r0]
 8001586:	1840      	adds	r0, r0, r1
 8001588:	4770      	bx	lr
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	02020304 	.word	0x02020304
 8001590:	01010101 	.word	0x01010101
	...

0800159c <_ZN6buttonC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "button.h"

button::button(GPIO_TypeDef* PORT, uint16_t PIN) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	1dbb      	adds	r3, r7, #6
 80015a8:	801a      	strh	r2, [r3, #0]
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <_ZN6buttonC1EP12GPIO_TypeDeft+0x2c>)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	609a      	str	r2, [r3, #8]
	pin = PIN;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1dba      	adds	r2, r7, #6
 80015ba:	8812      	ldrh	r2, [r2, #0]
 80015bc:	809a      	strh	r2, [r3, #4]
}
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08005ac8 	.word	0x08005ac8

080015cc <_ZN6buttonD1Ev>:

button::~button() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <_ZN6buttonD1Ev+0x18>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	08005ac8 	.word	0x08005ac8

080015e8 <_ZN6buttonD0Ev>:
button::~button() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
}
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff ffea 	bl	80015cc <_ZN6buttonD1Ev>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	210c      	movs	r1, #12
 80015fc:	0018      	movs	r0, r3
 80015fe:	f004 f949 	bl	8005894 <_ZdlPvj>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN6button6GetPinEv>:

uint16_t button::GetPin() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	return pin;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	889b      	ldrh	r3, [r3, #4]
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN7controlC1EP8position>:
 *      Author: Lucas Martins
 */

#include "control.h"

control::control(position* P) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <_ZN7controlC1EP8position+0x34>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	p = P;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	605a      	str	r2, [r3, #4]
	kp = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
	kd = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
	der = 0;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
}
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	08005ad8 	.word	0x08005ad8

08001658 <_ZN7controlD1Ev>:

control::~control() {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <_ZN7controlD1Ev+0x18>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08005ad8 	.word	0x08005ad8

08001674 <_ZN7controlD0Ev>:
control::~control() {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
}
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ffea 	bl	8001658 <_ZN7controlD1Ev>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2124      	movs	r1, #36	; 0x24
 8001688:	0018      	movs	r0, r3
 800168a:	f004 f903 	bl	8005894 <_ZdlPvj>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b002      	add	sp, #8
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN7control8PIDValueEv>:

void control::setKD(float KD) {
	kd = KD;
}

float control::PIDValue() {
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	oldPos = pos;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	621a      	str	r2, [r3, #32]
	pos = p->DefinePosition();
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f000 fc22 	bl	8001ef6 <_ZN8position14DefinePositionEv>
 80016b2:	0002      	movs	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	61da      	str	r2, [r3, #28]
	der = pos - oldPos;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
	oldPID = PID;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	619a      	str	r2, [r3, #24]
	PID = (kp*pos + kd*oldPos);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689c      	ldr	r4, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff f942 	bl	8000960 <__aeabi_i2f>
 80016dc:	1c03      	adds	r3, r0, #0
 80016de:	1c19      	adds	r1, r3, #0
 80016e0:	1c20      	adds	r0, r4, #0
 80016e2:	f7ff f823 	bl	800072c <__aeabi_fmul>
 80016e6:	1c03      	adds	r3, r0, #0
 80016e8:	1c1d      	adds	r5, r3, #0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68dc      	ldr	r4, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff f934 	bl	8000960 <__aeabi_i2f>
 80016f8:	1c03      	adds	r3, r0, #0
 80016fa:	1c19      	adds	r1, r3, #0
 80016fc:	1c20      	adds	r0, r4, #0
 80016fe:	f7ff f815 	bl	800072c <__aeabi_fmul>
 8001702:	1c03      	adds	r3, r0, #0
 8001704:	1c19      	adds	r1, r3, #0
 8001706:	1c28      	adds	r0, r5, #0
 8001708:	f7fe fe74 	bl	80003f4 <__aeabi_fadd>
 800170c:	1c03      	adds	r3, r0, #0
 800170e:	1c1a      	adds	r2, r3, #0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	615a      	str	r2, [r3, #20]
	return PID;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
}
 8001718:	1c18      	adds	r0, r3, #0
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bdb0      	pop	{r4, r5, r7, pc}

08001720 <_ZN7encoderC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "encoder.h"

encoder::encoder(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	1dbb      	adds	r3, r7, #6
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <_ZN7encoderC1EP12GPIO_TypeDeft+0x40>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	615a      	str	r2, [r3, #20]
	pin = PIN;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1dba      	adds	r2, r7, #6
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	821a      	strh	r2, [r3, #16]
	rps = 0;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
	time = 0;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
	cont = 0;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
}
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	08005ae8 	.word	0x08005ae8

08001764 <_ZN7encoderD1Ev>:

encoder::~encoder() {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	4a03      	ldr	r2, [pc, #12]	; (800177c <_ZN7encoderD1Ev+0x18>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}
 800177c:	08005ae8 	.word	0x08005ae8

08001780 <_ZN7encoderD0Ev>:
encoder::~encoder() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
}
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff ffea 	bl	8001764 <_ZN7encoderD1Ev>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2118      	movs	r1, #24
 8001794:	0018      	movs	r0, r3
 8001796:	f004 f87d 	bl	8005894 <_ZdlPvj>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_ZN7encoder6GetPinEv>:

uint16_t encoder::GetPin() {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	return pin;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8a1b      	ldrh	r3, [r3, #16]
}
 80017b0:	0018      	movs	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZN7encoder6SetRpsEv>:

int encoder::GetRps() {
	return rps;
}

void encoder::SetRps() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	time = cont;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
	if(time < 200) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2bc7      	cmp	r3, #199	; 0xc7
 80017ce:	dc18      	bgt.n	8001802 <_ZN7encoder6SetRpsEv+0x4a>
		rps = 1 / (0.00015*time);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff fe93 	bl	8001500 <__aeabi_i2d>
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <_ZN7encoder6SetRpsEv+0x60>)
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <_ZN7encoder6SetRpsEv+0x64>)
 80017de:	f7ff fbed 	bl	8000fbc <__aeabi_dmul>
 80017e2:	0002      	movs	r2, r0
 80017e4:	000b      	movs	r3, r1
 80017e6:	2000      	movs	r0, #0
 80017e8:	490d      	ldr	r1, [pc, #52]	; (8001820 <_ZN7encoder6SetRpsEv+0x68>)
 80017ea:	f7ff f8ff 	bl	80009ec <__aeabi_ddiv>
 80017ee:	0002      	movs	r2, r0
 80017f0:	000b      	movs	r3, r1
 80017f2:	0010      	movs	r0, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	f7ff fe4d 	bl	8001494 <__aeabi_d2iz>
 80017fa:	0002      	movs	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	e002      	b.n	8001808 <_ZN7encoder6SetRpsEv+0x50>
	} else {
		rps = 0;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
	}
	cont = 0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	30553261 	.word	0x30553261
 800181c:	3f23a92a 	.word	0x3f23a92a
 8001820:	3ff00000 	.word	0x3ff00000

08001824 <_ZN7encoder4ContEv>:

void encoder::Cont() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	if(cont < 200) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2bc7      	cmp	r3, #199	; 0xc7
 8001832:	dc05      	bgt.n	8001840 <_ZN7encoder4ContEv+0x1c>
		cont++;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60da      	str	r2, [r3, #12]
	} else {
		SetRps();
	}
}
 800183e:	e003      	b.n	8001848 <_ZN7encoder4ContEv+0x24>
		SetRps();
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff ffb8 	bl	80017b8 <_ZN7encoder6SetRpsEv>
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN3ledC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "led.h"

led::led(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <_ZN3ledC1EP12GPIO_TypeDeft+0x2c>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	605a      	str	r2, [r3, #4]
	pin = PIN;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1dba      	adds	r2, r7, #6
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	811a      	strh	r2, [r3, #8]
}
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	08005af8 	.word	0x08005af8

08001880 <_ZN3ledD1Ev>:

led::~led() {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <_ZN3ledD1Ev+0x18>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}
 8001898:	08005af8 	.word	0x08005af8

0800189c <_ZN3ledD0Ev>:
led::~led() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
}
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff ffea 	bl	8001880 <_ZN3ledD1Ev>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	210c      	movs	r1, #12
 80018b0:	0018      	movs	r0, r3
 80018b2:	f003 ffef 	bl	8005894 <_ZdlPvj>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}

080018c0 <ADC_Interrupt>:

	}
}


void ADC_Interrupt(uint8_t* Array, int size) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	p.SetAnalog(Array, size);
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <ADC_Interrupt+0x2c>)
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fa99 	bl	8001e08 <_ZN8position9SetAnalogEPhi>
	pidValue = controle.PIDValue();
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <ADC_Interrupt+0x30>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fedd 	bl	8001698 <_ZN7control8PIDValueEv>
 80018de:	1c02      	adds	r2, r0, #0
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <ADC_Interrupt+0x34>)
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b002      	add	sp, #8
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000008c 	.word	0x2000008c
 80018f0:	200001d4 	.word	0x200001d4
 80018f4:	20000220 	.word	0x20000220

080018f8 <TIM1_Interrupt>:


void TIM1_Interrupt() {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	if(z != 60000) {
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <TIM1_Interrupt+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <TIM1_Interrupt+0x68>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00c      	beq.n	8001920 <TIM1_Interrupt+0x28>
		z++;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <TIM1_Interrupt+0x64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <TIM1_Interrupt+0x64>)
 800190e:	601a      	str	r2, [r3, #0]
		if(z >= 50000) {
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <TIM1_Interrupt+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <TIM1_Interrupt+0x6c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d902      	bls.n	8001920 <TIM1_Interrupt+0x28>
			z = 0;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <TIM1_Interrupt+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
		}
	}
	if(debounce > 0) {
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <TIM1_Interrupt+0x70>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <TIM1_Interrupt+0x3c>
		debounce--;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <TIM1_Interrupt+0x70>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	3b01      	subs	r3, #1
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <TIM1_Interrupt+0x70>)
 8001932:	701a      	strb	r2, [r3, #0]
	}

	if((state == RUNNING) || (state == CALIBRATION)) {
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <TIM1_Interrupt+0x74>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d003      	beq.n	8001944 <TIM1_Interrupt+0x4c>
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <TIM1_Interrupt+0x74>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <TIM1_Interrupt+0x5c>
		enc1.Cont();
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <TIM1_Interrupt+0x78>)
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff ff6c 	bl	8001824 <_ZN7encoder4ContEv>
		enc2.Cont();
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <TIM1_Interrupt+0x7c>)
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff ff68 	bl	8001824 <_ZN7encoder4ContEv>
	}
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20000144 	.word	0x20000144
 8001960:	0000ea60 	.word	0x0000ea60
 8001964:	0000c34f 	.word	0x0000c34f
 8001968:	20000148 	.word	0x20000148
 800196c:	20000149 	.word	0x20000149
 8001970:	20000114 	.word	0x20000114
 8001974:	2000012c 	.word	0x2000012c

08001978 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	0002      	movs	r2, r0
 8001980:	1dbb      	adds	r3, r7, #6
 8001982:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == enc1.GetPin()) {
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff ff0c 	bl	80017a4 <_ZN7encoder6GetPinEv>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	425a      	negs	r2, r3
 8001998:	4153      	adcs	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <HAL_GPIO_EXTI_Callback+0x40>
		if((state == RUNNING) || (state == CALIBRATION)) {
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_EXTI_Callback+0x38>
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d103      	bne.n	80019b8 <HAL_GPIO_EXTI_Callback+0x40>
			enc1.SetRps();
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_GPIO_EXTI_Callback+0xe4>)
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff ff00 	bl	80017b8 <_ZN7encoder6SetRpsEv>
		}
	}

	if (GPIO_Pin == enc2.GetPin()) {
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_GPIO_EXTI_Callback+0xec>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fef2 	bl	80017a4 <_ZN7encoder6GetPinEv>
 80019c0:	0003      	movs	r3, r0
 80019c2:	001a      	movs	r2, r3
 80019c4:	1dbb      	adds	r3, r7, #6
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	425a      	negs	r2, r3
 80019cc:	4153      	adcs	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x74>
		if((state == RUNNING) || (state == CALIBRATION)) {
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_EXTI_Callback+0x6c>
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d103      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x74>
			enc2.SetRps();
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_GPIO_EXTI_Callback+0xec>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff fee6 	bl	80017b8 <_ZN7encoder6SetRpsEv>
		}
	}

	if (GPIO_Pin == b.GetPin()) {
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_GPIO_EXTI_Callback+0xf0>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff fe0c 	bl	800160c <_ZN6button6GetPinEv>
 80019f4:	0003      	movs	r3, r0
 80019f6:	001a      	movs	r2, r3
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	425a      	negs	r2, r3
 8001a00:	4153      	adcs	r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d024      	beq.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
		if(debounce == 0) {
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d120      	bne.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
			debounce = 5;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a12:	2205      	movs	r2, #5
 8001a14:	701a      	strb	r2, [r3, #0]
			switch(state) {
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d014      	beq.n	8001a48 <HAL_GPIO_EXTI_Callback+0xd0>
 8001a1e:	dc17      	bgt.n	8001a50 <HAL_GPIO_EXTI_Callback+0xd8>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_EXTI_Callback+0xc8>
 8001a24:	dc14      	bgt.n	8001a50 <HAL_GPIO_EXTI_Callback+0xd8>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_GPIO_EXTI_Callback+0xb8>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d004      	beq.n	8001a38 <HAL_GPIO_EXTI_Callback+0xc0>
				break;
			case 3:
				state = 0;
				break;
			default:
				break;
 8001a2e:	e00f      	b.n	8001a50 <HAL_GPIO_EXTI_Callback+0xd8>
				state = 1;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
				break;
 8001a36:	e00c      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
				state = 2;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
				break;
 8001a3e:	e008      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
				state = 3;
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a42:	2203      	movs	r2, #3
 8001a44:	701a      	strb	r2, [r3, #0]
				break;
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
				state = 0;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
				break;
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_EXTI_Callback+0xda>
				break;
 8001a50:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000114 	.word	0x20000114
 8001a60:	20000149 	.word	0x20000149
 8001a64:	2000012c 	.word	0x2000012c
 8001a68:	20000108 	.word	0x20000108
 8001a6c:	20000148 	.word	0x20000148

08001a70 <_Z41__static_initialization_and_destruction_0ii>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d000      	beq.n	8001a82 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8001a80:	e07e      	b.n	8001b80 <_Z41__static_initialization_and_destruction_0ii+0x110>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	4a66      	ldr	r2, [pc, #408]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d17a      	bne.n	8001b80 <_Z41__static_initialization_and_destruction_0ii+0x110>
position p;
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 f98d 	bl	8001dac <_ZN8positionC1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	005a      	lsls	r2, r3, #1
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	05d9      	lsls	r1, r3, #23
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 fafd 	bl	800209c <_ZN10sensorSideC1EP12GPIO_TypeDeft>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 8001aa2:	4962      	ldr	r1, [pc, #392]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001aa4:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 faf7 	bl	800209c <_ZN10sensorSideC1EP12GPIO_TypeDeft>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 8001aae:	4961      	ldr	r1, [pc, #388]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fecb 	bl	8001850 <_ZN3ledC1EP12GPIO_TypeDeft>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 8001aba:	495e      	ldr	r1, [pc, #376]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f7ff fec5 	bl	8001850 <_ZN3ledC1EP12GPIO_TypeDeft>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 8001ac6:	495b      	ldr	r1, [pc, #364]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001aca:	2202      	movs	r2, #2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff febf 	bl	8001850 <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8001ad2:	4956      	ldr	r1, [pc, #344]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001ad4:	4b5b      	ldr	r3, [pc, #364]	; (8001c44 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff feb9 	bl	8001850 <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 8001ade:	4953      	ldr	r1, [pc, #332]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff feb3 	bl	8001850 <_ZN3ledC1EP12GPIO_TypeDeft>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	011a      	lsls	r2, r3, #4
 8001aee:	2390      	movs	r3, #144	; 0x90
 8001af0:	05d9      	lsls	r1, r3, #23
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff fd51 	bl	800159c <_ZN6buttonC1EP12GPIO_TypeDeft>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 8001afa:	494e      	ldr	r1, [pc, #312]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001afc:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff fe0d 	bl	8001720 <_ZN7encoderC1EP12GPIO_TypeDeft>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	2390      	movs	r3, #144	; 0x90
 8001b0c:	05d9      	lsls	r1, r3, #23
 8001b0e:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fe05 	bl	8001720 <_ZN7encoderC1EP12GPIO_TypeDeft>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 8001b16:	4a50      	ldr	r2, [pc, #320]	; (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8001b18:	4950      	ldr	r1, [pc, #320]	; (8001c5c <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8001b1a:	4851      	ldr	r0, [pc, #324]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	019b      	lsls	r3, r3, #6
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	01db      	lsls	r3, r3, #7
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	0013      	movs	r3, r2
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f000 f8bc 	bl	8001cac <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 8001b34:	4a3d      	ldr	r2, [pc, #244]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001b36:	494b      	ldr	r1, [pc, #300]	; (8001c64 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8001b38:	484b      	ldr	r0, [pc, #300]	; (8001c68 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2301      	movs	r3, #1
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	0013      	movs	r3, r2
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f000 f8ae 	bl	8001cac <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motorControl mdir(&m1, &enc1);
 8001b50:	4a3f      	ldr	r2, [pc, #252]	; (8001c50 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001b52:	4943      	ldr	r1, [pc, #268]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8001b54:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f8f2 	bl	8001d40 <_ZN12motorControlC1EP5motorP7encoder>
motorControl mesq(&m2, &enc2);
 8001b5c:	4a3d      	ldr	r2, [pc, #244]	; (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8001b5e:	4942      	ldr	r1, [pc, #264]	; (8001c68 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8001b60:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f000 f8ec 	bl	8001d40 <_ZN12motorControlC1EP5motorP7encoder>
control controle(&p);
 8001b68:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001b6a:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fd56 	bl	8001620 <_ZN7controlC1EP8position>
robot rufus(&controle, &mdir, &mesq);
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8001b76:	4a3d      	ldr	r2, [pc, #244]	; (8001c6c <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8001b78:	493e      	ldr	r1, [pc, #248]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8001b7a:	483f      	ldr	r0, [pc, #252]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8001b7c:	f000 fa54 	bl	8002028 <_ZN5robotC1EP7controlP12motorControlS3_>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d147      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d143      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 fa63 	bl	800205c <_ZN5robotD1Ev>
control controle(&p);
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff fd5d 	bl	8001658 <_ZN7controlD1Ev>
motorControl mesq(&m2, &enc2);
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f8e3 	bl	8001d6c <_ZN12motorControlD1Ev>
motorControl mdir(&m1, &enc1);
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 f8df 	bl	8001d6c <_ZN12motorControlD1Ev>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f8a5 	bl	8001d00 <_ZN5motorD1Ev>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 f8a1 	bl	8001d00 <_ZN5motorD1Ev>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fdcf 	bl	8001764 <_ZN7encoderD1Ev>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff fdcb 	bl	8001764 <_ZN7encoderD1Ev>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff fcfb 	bl	80015cc <_ZN6buttonD1Ev>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fe51 	bl	8001880 <_ZN3ledD1Ev>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fe4d 	bl	8001880 <_ZN3ledD1Ev>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff fe49 	bl	8001880 <_ZN3ledD1Ev>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff fe45 	bl	8001880 <_ZN3ledD1Ev>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fe41 	bl	8001880 <_ZN3ledD1Ev>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fa67 	bl	80020d4 <_ZN10sensorSideD1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 fa63 	bl	80020d4 <_ZN10sensorSideD1Ev>
position p;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 f8d9 	bl	8001dc8 <_ZN8positionD1Ev>
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	0000ffff 	.word	0x0000ffff
 8001c24:	2000008c 	.word	0x2000008c
 8001c28:	200000b4 	.word	0x200000b4
 8001c2c:	48001400 	.word	0x48001400
 8001c30:	200000c0 	.word	0x200000c0
 8001c34:	48000400 	.word	0x48000400
 8001c38:	200000cc 	.word	0x200000cc
 8001c3c:	200000d8 	.word	0x200000d8
 8001c40:	200000e4 	.word	0x200000e4
 8001c44:	200000f0 	.word	0x200000f0
 8001c48:	200000fc 	.word	0x200000fc
 8001c4c:	20000108 	.word	0x20000108
 8001c50:	20000114 	.word	0x20000114
 8001c54:	2000012c 	.word	0x2000012c
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	20000254 	.word	0x20000254
 8001c60:	2000014c 	.word	0x2000014c
 8001c64:	2000036c 	.word	0x2000036c
 8001c68:	20000164 	.word	0x20000164
 8001c6c:	2000017c 	.word	0x2000017c
 8001c70:	200001a8 	.word	0x200001a8
 8001c74:	200001d4 	.word	0x200001d4
 8001c78:	200001f8 	.word	0x200001f8

08001c7c <_GLOBAL__sub_I_p>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <_GLOBAL__sub_I_p+0x14>)
 8001c82:	0019      	movs	r1, r3
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff fef3 	bl	8001a70 <_Z41__static_initialization_and_destruction_0ii>
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	0000ffff 	.word	0x0000ffff

08001c94 <_GLOBAL__sub_D_p>:
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <_GLOBAL__sub_D_p+0x14>)
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fee7 	bl	8001a70 <_Z41__static_initialization_and_destruction_0ii>
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	0000ffff 	.word	0x0000ffff

08001cac <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>:
 *      Author: Lucas Martins
 */

#include "motor.h"

motor::motor(TIM_HandleTypeDef*  TIMER, uint8_t CHANNEL,  GPIO_TypeDef* PORT1, uint16_t PIN1, GPIO_TypeDef* PORT2, uint16_t PIN2) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t+0x50>)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	channel = CHANNEL;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1dfa      	adds	r2, r7, #7
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	721a      	strb	r2, [r3, #8]
	timer = TIMER;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	605a      	str	r2, [r3, #4]
	in1Port = PORT1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	60da      	str	r2, [r3, #12]
	in2Port = PORT2;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	611a      	str	r2, [r3, #16]
	in1Pin = PIN1;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	2318      	movs	r3, #24
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	8293      	strh	r3, [r2, #20]
	in2Pin = PIN2;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	18ba      	adds	r2, r7, r2
 8001cec:	8812      	ldrh	r2, [r2, #0]
 8001cee:	82da      	strh	r2, [r3, #22]
}
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	08005b08 	.word	0x08005b08

08001d00 <_ZN5motorD1Ev>:

motor::~motor() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <_ZN5motorD1Ev+0x18>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08005b08 	.word	0x08005b08

08001d1c <_ZN5motorD0Ev>:
motor::~motor() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
}
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ffea 	bl	8001d00 <_ZN5motorD1Ev>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2118      	movs	r1, #24
 8001d30:	0018      	movs	r0, r3
 8001d32:	f003 fdaf 	bl	8005894 <_ZdlPvj>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b002      	add	sp, #8
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN12motorControlC1EP5motorP7encoder>:
 *      Author: Lucas Martins
 */

#include <motorControl.h>

motorControl::motorControl(motor* M, encoder* E) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <_ZN12motorControlC1EP5motorP7encoder+0x28>)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	m = M;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	605a      	str	r2, [r3, #4]
	e = E;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08005b18 	.word	0x08005b18

08001d6c <_ZN12motorControlD1Ev>:

motorControl::~motorControl() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <_ZN12motorControlD1Ev+0x18>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08005b18 	.word	0x08005b18

08001d88 <_ZN12motorControlD0Ev>:
motorControl::~motorControl() {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
}
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff ffea 	bl	8001d6c <_ZN12motorControlD1Ev>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f003 fd79 	bl	8005894 <_ZdlPvj>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZN8positionC1Ev>:
 *      Author: Lucas Martins
 */

#include "position.h"

position::position() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <_ZN8positionC1Ev+0x18>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b002      	add	sp, #8
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	08005b28 	.word	0x08005b28

08001dc8 <_ZN8positionD1Ev>:

position::~position() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <_ZN8positionD1Ev+0x18>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	08005b28 	.word	0x08005b28

08001de4 <_ZN8positionD0Ev>:
position::~position() {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
}
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7ff ffea 	bl	8001dc8 <_ZN8positionD1Ev>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2128      	movs	r1, #40	; 0x28
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f003 fd4b 	bl	8005894 <_ZdlPvj>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZN8position9SetAnalogEPhi>:

void position::SetAnalog(uint8_t* array, int size) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	uint32_t aux;
	for(int i=0; i<CHANNELS; i++) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	dc37      	bgt.n	8001e8e <_ZN8position9SetAnalogEPhi+0x86>
		aux = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2106      	movs	r1, #6
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7fe f9f6 	bl	800021c <__divsi3>
 8001e30:	0003      	movs	r3, r0
 8001e32:	001a      	movs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	da13      	bge.n	8001e62 <_ZN8position9SetAnalogEPhi+0x5a>
			aux = aux + array[i+j*CHANNELS];
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	001a      	movs	r2, r3
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	001a      	movs	r2, r3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	189b      	adds	r3, r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	e7e1      	b.n	8001e26 <_ZN8position9SetAnalogEPhi+0x1e>
		}
		sensors_analog[i] = aux / (size/CHANNELS);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2106      	movs	r1, #6
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7fe f9d8 	bl	800021c <__divsi3>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	0019      	movs	r1, r3
 8001e70:	69f8      	ldr	r0, [r7, #28]
 8001e72:	f7fe f949 	bl	8000108 <__udivsi3>
 8001e76:	0003      	movs	r3, r0
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	18d3      	adds	r3, r2, r3
 8001e80:	331a      	adds	r3, #26
 8001e82:	1c0a      	adds	r2, r1, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	e7c4      	b.n	8001e18 <_ZN8position9SetAnalogEPhi+0x10>
	}
	SetSensors();
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 f804 	bl	8001e9e <_ZN8position10SetSensorsEv>
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b008      	add	sp, #32
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZN8position10SetSensorsEv>:
		}
		med[i] = (max[i] + min[i]) / 2;
	}
}

void position::SetSensors() {
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b05      	cmp	r3, #5
 8001eae:	dc1e      	bgt.n	8001eee <_ZN8position10SetSensorsEv+0x50>
		if(sensors_analog[i] < med[i]){
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	331a      	adds	r3, #26
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	18cb      	adds	r3, r1, r3
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_ZN8position10SetSensorsEv+0x3a>
			sensors[i] = 1;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	2120      	movs	r1, #32
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	18d3      	adds	r3, r2, r3
 8001ed0:	185b      	adds	r3, r3, r1
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e006      	b.n	8001ee6 <_ZN8position10SetSensorsEv+0x48>
		} else {
			sensors[i] = 0;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	2120      	movs	r1, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	18d3      	adds	r3, r2, r3
 8001ee0:	185b      	adds	r3, r3, r1
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e7dd      	b.n	8001eaa <_ZN8position10SetSensorsEv+0xc>
		}
	}
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_ZN8position14DefinePositionEv>:

int position::DefinePosition() {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	if(sensors[2] && sensors[3]) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2222      	movs	r2, #34	; 0x22
 8001f02:	5c9b      	ldrb	r3, [r3, r2]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <_ZN8position14DefinePositionEv+0x26>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2223      	movs	r2, #35	; 0x23
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <_ZN8position14DefinePositionEv+0x26>
		oldPos = 0;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
		return 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e080      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3] && sensors[4]) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2223      	movs	r2, #35	; 0x23
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <_ZN8position14DefinePositionEv+0x44>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2224      	movs	r2, #36	; 0x24
 8001f2a:	5c9b      	ldrb	r3, [r3, r2]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <_ZN8position14DefinePositionEv+0x44>
		oldPos = 2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	605a      	str	r2, [r3, #4]
		return 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	e071      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1] && sensors[2]) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2221      	movs	r2, #33	; 0x21
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <_ZN8position14DefinePositionEv+0x66>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2222      	movs	r2, #34	; 0x22
 8001f48:	5c9b      	ldrb	r3, [r3, r2]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <_ZN8position14DefinePositionEv+0x66>
		oldPos = -2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	4252      	negs	r2, r2
 8001f54:	605a      	str	r2, [r3, #4]
		return -2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	425b      	negs	r3, r3
 8001f5a:	e060      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4] && sensors[5]) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	; 0x24
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <_ZN8position14DefinePositionEv+0x84>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2225      	movs	r2, #37	; 0x25
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <_ZN8position14DefinePositionEv+0x84>
		oldPos = 4;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2204      	movs	r2, #4
 8001f74:	605a      	str	r2, [r3, #4]
		return 4;
 8001f76:	2304      	movs	r3, #4
 8001f78:	e051      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0] && sensors[1]) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <_ZN8position14DefinePositionEv+0xa6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2221      	movs	r2, #33	; 0x21
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <_ZN8position14DefinePositionEv+0xa6>
		oldPos = -4;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2204      	movs	r2, #4
 8001f92:	4252      	negs	r2, r2
 8001f94:	605a      	str	r2, [r3, #4]
		return -4;
 8001f96:	2304      	movs	r3, #4
 8001f98:	425b      	negs	r3, r3
 8001f9a:	e040      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3]) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2223      	movs	r2, #35	; 0x23
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <_ZN8position14DefinePositionEv+0xba>
		oldPos = 1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	605a      	str	r2, [r3, #4]
		return 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e036      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[2]) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2222      	movs	r2, #34	; 0x22
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <_ZN8position14DefinePositionEv+0xd2>
		oldPos = -1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	605a      	str	r2, [r3, #4]
		return -1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	e02a      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4]) {
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d004      	beq.n	8001fdc <_ZN8position14DefinePositionEv+0xe6>
		oldPos = 3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	605a      	str	r2, [r3, #4]
		return 3;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e020      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1]) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2221      	movs	r2, #33	; 0x21
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <_ZN8position14DefinePositionEv+0xfe>
		oldPos = -3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	4252      	negs	r2, r2
 8001fec:	605a      	str	r2, [r3, #4]
		return -3;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	e014      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[5]) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2225      	movs	r2, #37	; 0x25
 8001ff8:	5c9b      	ldrb	r3, [r3, r2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <_ZN8position14DefinePositionEv+0x10c>
		return 5;
 8001ffe:	2305      	movs	r3, #5
 8002000:	e00d      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0]) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <_ZN8position14DefinePositionEv+0x124>
		oldPos = -5;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	4252      	negs	r2, r2
 8002012:	605a      	str	r2, [r3, #4]
		return -5;
 8002014:	2305      	movs	r3, #5
 8002016:	425b      	negs	r3, r3
 8002018:	e001      	b.n	800201e <_ZN8position14DefinePositionEv+0x128>
	}
	return oldPos;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <_ZN5robotC1EP7controlP12motorControlS3_>:
 *      Author: Lucas Martins
 */

#include "robot.h"

robot::robot(control* CTR, motorControl* MDIR, motorControl* MESQ) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <_ZN5robotC1EP7controlP12motorControlS3_+0x30>)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ctr = CTR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	605a      	str	r2, [r3, #4]
	mdir = MDIR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
	mesq = MESQ;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	60da      	str	r2, [r3, #12]
}
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bd80      	pop	{r7, pc}
 8002058:	08005b38 	.word	0x08005b38

0800205c <_ZN5robotD1Ev>:

robot::~robot() {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <_ZN5robotD1Ev+0x18>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	08005b38 	.word	0x08005b38

08002078 <_ZN5robotD0Ev>:
robot::~robot() {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
}
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff ffea 	bl	800205c <_ZN5robotD1Ev>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2128      	movs	r1, #40	; 0x28
 800208c:	0018      	movs	r0, r3
 800208e:	f003 fc01 	bl	8005894 <_ZdlPvj>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZN10sensorSideC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "sensorSide.h"

sensorSide::sensorSide(GPIO_TypeDef* PORT, uint16_t PIN) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	1dbb      	adds	r3, r7, #6
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <_ZN10sensorSideC1EP12GPIO_TypeDeft+0x34>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	609a      	str	r2, [r3, #8]
	pin = PIN;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1dba      	adds	r2, r7, #6
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	80da      	strh	r2, [r3, #6]
	track = 0;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	711a      	strb	r2, [r3, #4]
}
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	08005b48 	.word	0x08005b48

080020d4 <_ZN10sensorSideD1Ev>:

sensorSide::~sensorSide() {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <_ZN10sensorSideD1Ev+0x18>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	08005b48 	.word	0x08005b48

080020f0 <_ZN10sensorSideD0Ev>:
sensorSide::~sensorSide() {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
}
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff ffea 	bl	80020d4 <_ZN10sensorSideD1Ev>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	210c      	movs	r1, #12
 8002104:	0018      	movs	r0, r3
 8002106:	f003 fbc5 	bl	8005894 <_ZdlPvj>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t adcArray[BUFFER], check;
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	ADC_Interrupt(adcArray, BUFFER);
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <HAL_ADC_ConvCpltCallback+0x1c>)
 800211e:	212a      	movs	r1, #42	; 0x2a
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff fbcd 	bl	80018c0 <ADC_Interrupt>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	20000228 	.word	0x20000228

08002134 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1) {
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002140:	429a      	cmp	r2, r3
 8002142:	d101      	bne.n	8002148 <HAL_TIM_PeriodElapsedCallback+0x14>
	  TIM1_Interrupt();
 8002144:	f7ff fbd8 	bl	80018f8 <TIM1_Interrupt>
  }
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200002a0 	.word	0x200002a0

08002154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002158:	f000 fd66 	bl	8002c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800215c:	f000 f830 	bl	80021c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002160:	f000 fa92 	bl	8002688 <MX_GPIO_Init>
  MX_DMA_Init();
 8002164:	f000 fa72 	bl	800264c <MX_DMA_Init>
  MX_ADC_Init();
 8002168:	f000 f874 	bl	8002254 <MX_ADC_Init>
  MX_TIM1_Init();
 800216c:	f000 f90e 	bl	800238c <MX_TIM1_Init>
  MX_TIM16_Init();
 8002170:	f000 f964 	bl	800243c <MX_TIM16_Init>
  MX_TIM17_Init();
 8002174:	f000 f9e6 	bl	8002544 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <main+0x58>)
 800217a:	0018      	movs	r0, r3
 800217c:	f001 fa48 	bl	8003610 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcArray, BUFFER);
 8002180:	490b      	ldr	r1, [pc, #44]	; (80021b0 <main+0x5c>)
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <main+0x58>)
 8002184:	222a      	movs	r2, #42	; 0x2a
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fef2 	bl	8002f70 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <main+0x60>)
 800218e:	0018      	movs	r0, r3
 8002190:	f002 fba2 	bl	80048d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <main+0x64>)
 8002196:	2100      	movs	r1, #0
 8002198:	0018      	movs	r0, r3
 800219a:	f002 fc3b 	bl	8004a14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <main+0x68>)
 80021a0:	2100      	movs	r1, #0
 80021a2:	0018      	movs	r0, r3
 80021a4:	f002 fc36 	bl	8004a14 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <main+0x54>
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	2000032c 	.word	0x2000032c
 80021b0:	20000228 	.word	0x20000228
 80021b4:	200002a0 	.word	0x200002a0
 80021b8:	2000036c 	.word	0x2000036c
 80021bc:	20000254 	.word	0x20000254

080021c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b091      	sub	sp, #68	; 0x44
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	2410      	movs	r4, #16
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	0018      	movs	r0, r3
 80021cc:	2330      	movs	r3, #48	; 0x30
 80021ce:	001a      	movs	r2, r3
 80021d0:	2100      	movs	r1, #0
 80021d2:	f003 fb95 	bl	8005900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d6:	003b      	movs	r3, r7
 80021d8:	0018      	movs	r0, r3
 80021da:	2310      	movs	r3, #16
 80021dc:	001a      	movs	r2, r3
 80021de:	2100      	movs	r1, #0
 80021e0:	f003 fb8e 	bl	8005900 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e4:	0021      	movs	r1, r4
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2201      	movs	r2, #1
 80021f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2210      	movs	r2, #16
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2202      	movs	r2, #2
 80021fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021fe:	187b      	adds	r3, r7, r1
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002204:	187b      	adds	r3, r7, r1
 8002206:	22a0      	movs	r2, #160	; 0xa0
 8002208:	0392      	lsls	r2, r2, #14
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800220c:	187b      	adds	r3, r7, r1
 800220e:	2200      	movs	r2, #0
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002212:	187b      	adds	r3, r7, r1
 8002214:	0018      	movs	r0, r3
 8002216:	f001 fec3 	bl	8003fa0 <HAL_RCC_OscConfig>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d001      	beq.n	8002222 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800221e:	f000 fb09 	bl	8002834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002222:	003b      	movs	r3, r7
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002228:	003b      	movs	r3, r7
 800222a:	2202      	movs	r2, #2
 800222c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222e:	003b      	movs	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002234:	003b      	movs	r3, r7
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800223a:	003b      	movs	r3, r7
 800223c:	2101      	movs	r1, #1
 800223e:	0018      	movs	r0, r3
 8002240:	f002 f9c8 	bl	80045d4 <HAL_RCC_ClockConfig>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002248:	f000 faf4 	bl	8002834 <Error_Handler>
  }
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b011      	add	sp, #68	; 0x44
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	0018      	movs	r0, r3
 800225e:	230c      	movs	r3, #12
 8002260:	001a      	movs	r2, r3
 8002262:	2100      	movs	r1, #0
 8002264:	f003 fb4c 	bl	8005900 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <MX_ADC_Init+0x130>)
 800226a:	4a47      	ldr	r2, [pc, #284]	; (8002388 <MX_ADC_Init+0x134>)
 800226c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <MX_ADC_Init+0x130>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0612      	lsls	r2, r2, #24
 8002274:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <MX_ADC_Init+0x130>)
 8002278:	2210      	movs	r2, #16
 800227a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <MX_ADC_Init+0x130>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <MX_ADC_Init+0x130>)
 8002284:	2201      	movs	r2, #1
 8002286:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002288:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <MX_ADC_Init+0x130>)
 800228a:	2208      	movs	r2, #8
 800228c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <MX_ADC_Init+0x130>)
 8002290:	2200      	movs	r2, #0
 8002292:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <MX_ADC_Init+0x130>)
 8002296:	2200      	movs	r2, #0
 8002298:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <MX_ADC_Init+0x130>)
 800229c:	2201      	movs	r2, #1
 800229e:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80022a0:	4b38      	ldr	r3, [pc, #224]	; (8002384 <MX_ADC_Init+0x130>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <MX_ADC_Init+0x130>)
 80022a8:	22c2      	movs	r2, #194	; 0xc2
 80022aa:	32ff      	adds	r2, #255	; 0xff
 80022ac:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ae:	4b35      	ldr	r3, [pc, #212]	; (8002384 <MX_ADC_Init+0x130>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <MX_ADC_Init+0x130>)
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <MX_ADC_Init+0x130>)
 80022be:	2200      	movs	r2, #0
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <MX_ADC_Init+0x130>)
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fd13 	bl	8002cf0 <HAL_ADC_Init>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80022ce:	f000 fab1 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	0152      	lsls	r2, r2, #5
 80022de:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2204      	movs	r2, #4
 80022e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80022e6:	1d3a      	adds	r2, r7, #4
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MX_ADC_Init+0x130>)
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 ff91 	bl	8003214 <HAL_ADC_ConfigChannel>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80022f6:	f000 fa9d 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	2202      	movs	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002300:	1d3a      	adds	r2, r7, #4
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <MX_ADC_Init+0x130>)
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f000 ff84 	bl	8003214 <HAL_ADC_ConfigChannel>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d001      	beq.n	8002314 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002310:	f000 fa90 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2203      	movs	r2, #3
 8002318:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800231a:	1d3a      	adds	r2, r7, #4
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <MX_ADC_Init+0x130>)
 800231e:	0011      	movs	r1, r2
 8002320:	0018      	movs	r0, r3
 8002322:	f000 ff77 	bl	8003214 <HAL_ADC_ConfigChannel>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d001      	beq.n	800232e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800232a:	f000 fa83 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2204      	movs	r2, #4
 8002332:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002334:	1d3a      	adds	r2, r7, #4
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_ADC_Init+0x130>)
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f000 ff6a 	bl	8003214 <HAL_ADC_ConfigChannel>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d001      	beq.n	8002348 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8002344:	f000 fa76 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	2205      	movs	r2, #5
 800234c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800234e:	1d3a      	adds	r2, r7, #4
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_ADC_Init+0x130>)
 8002352:	0011      	movs	r1, r2
 8002354:	0018      	movs	r0, r3
 8002356:	f000 ff5d 	bl	8003214 <HAL_ADC_ConfigChannel>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d001      	beq.n	8002362 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800235e:	f000 fa69 	bl	8002834 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2206      	movs	r2, #6
 8002366:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002368:	1d3a      	adds	r2, r7, #4
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_ADC_Init+0x130>)
 800236c:	0011      	movs	r1, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f000 ff50 	bl	8003214 <HAL_ADC_ConfigChannel>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8002378:	f000 fa5c 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000032c 	.word	0x2000032c
 8002388:	40012400 	.word	0x40012400

0800238c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	2308      	movs	r3, #8
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	0018      	movs	r0, r3
 8002398:	2310      	movs	r3, #16
 800239a:	001a      	movs	r2, r3
 800239c:	2100      	movs	r1, #0
 800239e:	f003 faaf 	bl	8005900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a2:	003b      	movs	r3, r7
 80023a4:	0018      	movs	r0, r3
 80023a6:	2308      	movs	r3, #8
 80023a8:	001a      	movs	r2, r3
 80023aa:	2100      	movs	r1, #0
 80023ac:	f003 faa8 	bl	8005900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023b2:	4a21      	ldr	r2, [pc, #132]	; (8002438 <MX_TIM1_Init+0xac>)
 80023b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023b8:	22e0      	movs	r2, #224	; 0xe0
 80023ba:	32ff      	adds	r2, #255	; 0xff
 80023bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023c6:	220e      	movs	r2, #14
 80023c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f002 fa2a 	bl	8004838 <HAL_TIM_Base_Init>
 80023e4:	1e03      	subs	r3, r0, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80023e8:	f000 fa24 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ec:	2108      	movs	r1, #8
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	0152      	lsls	r2, r2, #5
 80023f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023f6:	187a      	adds	r2, r7, r1
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <MX_TIM1_Init+0xa8>)
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f002 fd8b 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002406:	f000 fa15 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800240a:	003b      	movs	r3, r7
 800240c:	2220      	movs	r2, #32
 800240e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002410:	003b      	movs	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002416:	003a      	movs	r2, r7
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <MX_TIM1_Init+0xa8>)
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f003 f979 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002426:	f000 fa05 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b006      	add	sp, #24
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	200002a0 	.word	0x200002a0
 8002438:	40012c00 	.word	0x40012c00

0800243c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b090      	sub	sp, #64	; 0x40
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002442:	2324      	movs	r3, #36	; 0x24
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	0018      	movs	r0, r3
 8002448:	231c      	movs	r3, #28
 800244a:	001a      	movs	r2, r3
 800244c:	2100      	movs	r1, #0
 800244e:	f003 fa57 	bl	8005900 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	0018      	movs	r0, r3
 8002456:	2320      	movs	r3, #32
 8002458:	001a      	movs	r2, r3
 800245a:	2100      	movs	r1, #0
 800245c:	f003 fa50 	bl	8005900 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <MX_TIM16_Init+0x100>)
 8002462:	4a37      	ldr	r2, [pc, #220]	; (8002540 <MX_TIM16_Init+0x104>)
 8002464:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 18;
 8002466:	4b35      	ldr	r3, [pc, #212]	; (800253c <MX_TIM16_Init+0x100>)
 8002468:	2212      	movs	r2, #18
 800246a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <MX_TIM16_Init+0x100>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8002472:	4b32      	ldr	r3, [pc, #200]	; (800253c <MX_TIM16_Init+0x100>)
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b30      	ldr	r3, [pc, #192]	; (800253c <MX_TIM16_Init+0x100>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <MX_TIM16_Init+0x100>)
 8002480:	2200      	movs	r2, #0
 8002482:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <MX_TIM16_Init+0x100>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <MX_TIM16_Init+0x100>)
 800248c:	0018      	movs	r0, r3
 800248e:	f002 f9d3 	bl	8004838 <HAL_TIM_Base_Init>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002496:	f000 f9cd 	bl	8002834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <MX_TIM16_Init+0x100>)
 800249c:	0018      	movs	r0, r3
 800249e:	f002 fa61 	bl	8004964 <HAL_TIM_PWM_Init>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80024a6:	f000 f9c5 	bl	8002834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024aa:	2124      	movs	r1, #36	; 0x24
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	2260      	movs	r2, #96	; 0x60
 80024b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2200      	movs	r2, #0
 80024b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2200      	movs	r2, #0
 80024ce:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	2200      	movs	r2, #0
 80024d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d6:	1879      	adds	r1, r7, r1
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <MX_TIM16_Init+0x100>)
 80024da:	2200      	movs	r2, #0
 80024dc:	0018      	movs	r0, r3
 80024de:	f002 fc55 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80024e6:	f000 f9a5 	bl	8002834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0192      	lsls	r2, r2, #6
 800250e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002516:	1d3a      	adds	r2, r7, #4
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_TIM16_Init+0x100>)
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f003 f94b 	bl	80057b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d001      	beq.n	800252a <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8002526:	f000 f985 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <MX_TIM16_Init+0x100>)
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fa7f 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b010      	add	sp, #64	; 0x40
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	2000036c 	.word	0x2000036c
 8002540:	40014400 	.word	0x40014400

08002544 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b090      	sub	sp, #64	; 0x40
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800254a:	2324      	movs	r3, #36	; 0x24
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	0018      	movs	r0, r3
 8002550:	231c      	movs	r3, #28
 8002552:	001a      	movs	r2, r3
 8002554:	2100      	movs	r1, #0
 8002556:	f003 f9d3 	bl	8005900 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	0018      	movs	r0, r3
 800255e:	2320      	movs	r3, #32
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f003 f9cc 	bl	8005900 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <MX_TIM17_Init+0x100>)
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <MX_TIM17_Init+0x104>)
 800256c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 18;
 800256e:	4b35      	ldr	r3, [pc, #212]	; (8002644 <MX_TIM17_Init+0x100>)
 8002570:	2212      	movs	r2, #18
 8002572:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <MX_TIM17_Init+0x100>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 800257a:	4b32      	ldr	r3, [pc, #200]	; (8002644 <MX_TIM17_Init+0x100>)
 800257c:	22ff      	movs	r2, #255	; 0xff
 800257e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <MX_TIM17_Init+0x100>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <MX_TIM17_Init+0x100>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <MX_TIM17_Init+0x100>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <MX_TIM17_Init+0x100>)
 8002594:	0018      	movs	r0, r3
 8002596:	f002 f94f 	bl	8004838 <HAL_TIM_Base_Init>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800259e:	f000 f949 	bl	8002834 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <MX_TIM17_Init+0x100>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f002 f9dd 	bl	8004964 <HAL_TIM_PWM_Init>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f000 f941 	bl	8002834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b2:	2124      	movs	r1, #36	; 0x24
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2260      	movs	r2, #96	; 0x60
 80025b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025de:	1879      	adds	r1, r7, r1
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_TIM17_Init+0x100>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	0018      	movs	r0, r3
 80025e6:	f002 fbd1 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80025ee:	f000 f921 	bl	8002834 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	0192      	lsls	r2, r2, #6
 8002616:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800261e:	1d3a      	adds	r2, r7, #4
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_TIM17_Init+0x100>)
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f003 f8c7 	bl	80057b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 800262e:	f000 f901 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <MX_TIM17_Init+0x100>)
 8002634:	0018      	movs	r0, r3
 8002636:	f000 f9fb 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b010      	add	sp, #64	; 0x40
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	20000254 	.word	0x20000254
 8002648:	40014800 	.word	0x40014800

0800264c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <MX_DMA_Init+0x38>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_DMA_Init+0x38>)
 8002658:	2101      	movs	r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_DMA_Init+0x38>)
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2009      	movs	r0, #9
 8002670:	f001 f922 	bl	80038b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002674:	2009      	movs	r0, #9
 8002676:	f001 f934 	bl	80038e2 <HAL_NVIC_EnableIRQ>

}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000

08002688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b08b      	sub	sp, #44	; 0x2c
 800268c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	2414      	movs	r4, #20
 8002690:	193b      	adds	r3, r7, r4
 8002692:	0018      	movs	r0, r3
 8002694:	2314      	movs	r3, #20
 8002696:	001a      	movs	r2, r3
 8002698:	2100      	movs	r1, #0
 800269a:	f003 f931 	bl	8005900 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	4b60      	ldr	r3, [pc, #384]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0309      	lsls	r1, r1, #12
 80026a8:	430a      	orrs	r2, r1
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	031b      	lsls	r3, r3, #12
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ba:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	4b59      	ldr	r3, [pc, #356]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	03c9      	lsls	r1, r1, #15
 80026c4:	430a      	orrs	r2, r1
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	03db      	lsls	r3, r3, #15
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	4b52      	ldr	r3, [pc, #328]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0289      	lsls	r1, r1, #10
 80026e0:	430a      	orrs	r2, r1
 80026e2:	615a      	str	r2, [r3, #20]
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <MX_GPIO_Init+0x19c>)
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	02c9      	lsls	r1, r1, #11
 80026fc:	430a      	orrs	r2, r1
 80026fe:	615a      	str	r2, [r3, #20]
 8002700:	4b48      	ldr	r3, [pc, #288]	; (8002824 <MX_GPIO_Init+0x19c>)
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	02db      	lsls	r3, r3, #11
 8002708:	4013      	ands	r3, r2
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN1_Pin|AIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 800270e:	23e0      	movs	r3, #224	; 0xe0
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4845      	ldr	r0, [pc, #276]	; (8002828 <MX_GPIO_Init+0x1a0>)
 8002714:	2200      	movs	r2, #0
 8002716:	0019      	movs	r1, r3
 8002718:	f001 fc08 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin, GPIO_PIN_RESET);
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <MX_GPIO_Init+0x1a4>)
 800271e:	2200      	movs	r2, #0
 8002720:	21c1      	movs	r1, #193	; 0xc1
 8002722:	0018      	movs	r0, r3
 8002724:	f001 fc02 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin, GPIO_PIN_RESET);
 8002728:	4b41      	ldr	r3, [pc, #260]	; (8002830 <MX_GPIO_Init+0x1a8>)
 800272a:	2200      	movs	r2, #0
 800272c:	2107      	movs	r1, #7
 800272e:	0018      	movs	r0, r3
 8002730:	f001 fbfc 	bl	8003f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin;
 8002734:	193b      	adds	r3, r7, r4
 8002736:	22e0      	movs	r2, #224	; 0xe0
 8002738:	0212      	lsls	r2, r2, #8
 800273a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2201      	movs	r2, #1
 8002740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	193b      	adds	r3, r7, r4
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	193b      	adds	r3, r7, r4
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	193b      	adds	r3, r7, r4
 8002750:	4a35      	ldr	r2, [pc, #212]	; (8002828 <MX_GPIO_Init+0x1a0>)
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f001 fa79 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin L_DEBUG2_Pin L_DEBUG1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin;
 800275a:	193b      	adds	r3, r7, r4
 800275c:	22c1      	movs	r2, #193	; 0xc1
 800275e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	193b      	adds	r3, r7, r4
 8002762:	2201      	movs	r2, #1
 8002764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	193b      	adds	r3, r7, r4
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	193b      	adds	r3, r7, r4
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002772:	193b      	adds	r3, r7, r4
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <MX_GPIO_Init+0x1a4>)
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f001 fa67 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MARC_DIR_Pin */
  GPIO_InitStruct.Pin = MARC_DIR_Pin;
 800277e:	0021      	movs	r1, r4
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2202      	movs	r2, #2
 8002784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2288      	movs	r2, #136	; 0x88
 800278a:	0352      	lsls	r2, r2, #13
 800278c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	000c      	movs	r4, r1
 8002790:	193b      	adds	r3, r7, r4
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MARC_DIR_GPIO_Port, &GPIO_InitStruct);
 8002796:	193b      	adds	r3, r7, r4
 8002798:	4a24      	ldr	r2, [pc, #144]	; (800282c <MX_GPIO_Init+0x1a4>)
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f001 fa55 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : L_FESQ_Pin L_FREN_Pin L_FDIR_Pin */
  GPIO_InitStruct.Pin = L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2201      	movs	r2, #1
 80027ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <MX_GPIO_Init+0x1a8>)
 80027be:	0019      	movs	r1, r3
 80027c0:	0010      	movs	r0, r2
 80027c2:	f001 fa43 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MARC_ESQ_Pin BUTTON_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = MARC_ESQ_Pin|BUTTON_Pin|ENC2_Pin;
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	22c8      	movs	r2, #200	; 0xc8
 80027ca:	0152      	lsls	r2, r2, #5
 80027cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	2288      	movs	r2, #136	; 0x88
 80027d2:	0352      	lsls	r2, r2, #13
 80027d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	2390      	movs	r3, #144	; 0x90
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	0011      	movs	r1, r2
 80027e4:	0018      	movs	r0, r3
 80027e6:	f001 fa31 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin;
 80027ea:	0021      	movs	r1, r4
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2288      	movs	r2, #136	; 0x88
 80027f6:	0352      	lsls	r2, r2, #13
 80027f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC1_GPIO_Port, &GPIO_InitStruct);
 8002800:	187b      	adds	r3, r7, r1
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <MX_GPIO_Init+0x1a8>)
 8002804:	0019      	movs	r1, r3
 8002806:	0010      	movs	r0, r2
 8002808:	f001 fa20 	bl	8003c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2007      	movs	r0, #7
 8002812:	f001 f851 	bl	80038b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002816:	2007      	movs	r0, #7
 8002818:	f001 f863 	bl	80038e2 <HAL_NVIC_EnableIRQ>

}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b00b      	add	sp, #44	; 0x2c
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	48000800 	.word	0x48000800
 800282c:	48001400 	.word	0x48001400
 8002830:	48000400 	.word	0x48000400

08002834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800283c:	e7fe      	b.n	800283c <Error_Handler+0x8>
	...

08002840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_MspInit+0x44>)
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_MspInit+0x44>)
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	619a      	str	r2, [r3, #24]
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_MspInit+0x44>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_MspInit+0x44>)
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_MspInit+0x44>)
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	0549      	lsls	r1, r1, #21
 8002868:	430a      	orrs	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_MspInit+0x44>)
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	055b      	lsls	r3, r3, #21
 8002874:	4013      	ands	r3, r2
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08b      	sub	sp, #44	; 0x2c
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	2414      	movs	r4, #20
 8002892:	193b      	adds	r3, r7, r4
 8002894:	0018      	movs	r0, r3
 8002896:	2314      	movs	r3, #20
 8002898:	001a      	movs	r2, r3
 800289a:	2100      	movs	r1, #0
 800289c:	f003 f830 	bl	8005900 <memset>
  if(hadc->Instance==ADC1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_ADC_MspInit+0xe0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d15a      	bne.n	8002960 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	0089      	lsls	r1, r1, #2
 80028b4:	430a      	orrs	r2, r1
 80028b6:	619a      	str	r2, [r3, #24]
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0289      	lsls	r1, r1, #10
 80028d0:	430a      	orrs	r2, r1
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_ADC_MspInit+0xe4>)
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	227e      	movs	r2, #126	; 0x7e
 80028e6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	2203      	movs	r2, #3
 80028ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	193a      	adds	r2, r7, r4
 80028f6:	2390      	movs	r3, #144	; 0x90
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 f9a5 	bl	8003c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_ADC_MspInit+0xec>)
 8002906:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002928:	2220      	movs	r2, #32
 800292a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	0152      	lsls	r2, r2, #5
 8002932:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fff0 	bl	800391c <HAL_DMA_Init>
 800293c:	1e03      	subs	r3, r0, #0
 800293e:	d001      	beq.n	8002944 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002940:	f7ff ff78 	bl	8002834 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_ADC_MspInit+0xe8>)
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	200c      	movs	r0, #12
 8002956:	f000 ffaf 	bl	80038b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800295a:	200c      	movs	r0, #12
 800295c:	f000 ffc1 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b00b      	add	sp, #44	; 0x2c
 8002966:	bd90      	pop	{r4, r7, pc}
 8002968:	40012400 	.word	0x40012400
 800296c:	40021000 	.word	0x40021000
 8002970:	200002e8 	.word	0x200002e8
 8002974:	40020008 	.word	0x40020008

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <HAL_TIM_Base_MspInit+0xa8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d11e      	bne.n	80029c8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0109      	lsls	r1, r1, #4
 8002994:	430a      	orrs	r2, r1
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	200d      	movs	r0, #13
 80029ac:	f000 ff84 	bl	80038b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80029b0:	200d      	movs	r0, #13
 80029b2:	f000 ff96 	bl	80038e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	200e      	movs	r0, #14
 80029bc:	f000 ff7c 	bl	80038b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029c0:	200e      	movs	r0, #14
 80029c2:	f000 ff8e 	bl	80038e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80029c6:	e026      	b.n	8002a16 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIM_Base_MspInit+0xb0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10e      	bne.n	80029f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0289      	lsls	r1, r1, #10
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]
}
 80029ee:	e012      	b.n	8002a16 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <HAL_TIM_Base_MspInit+0xb4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d10d      	bne.n	8002a16 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	02c9      	lsls	r1, r1, #11
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_TIM_Base_MspInit+0xac>)
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	02db      	lsls	r3, r3, #11
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b006      	add	sp, #24
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800

08002a30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b08b      	sub	sp, #44	; 0x2c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	2414      	movs	r4, #20
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2314      	movs	r3, #20
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f002 ff5c 	bl	8005900 <memset>
  if(htim->Instance==TIM16)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2b      	ldr	r2, [pc, #172]	; (8002afc <HAL_TIM_MspPostInit+0xcc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d125      	bne.n	8002a9e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	02c9      	lsls	r1, r1, #11
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	02db      	lsls	r3, r3, #11
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	0052      	lsls	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	0021      	movs	r1, r4
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
 8002a94:	0019      	movs	r1, r3
 8002a96:	0010      	movs	r0, r2
 8002a98:	f001 f8d8 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002a9c:	e029      	b.n	8002af2 <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM17)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_TIM_MspPostInit+0xd8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d124      	bne.n	8002af2 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	02c9      	lsls	r1, r1, #11
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	615a      	str	r2, [r3, #20]
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_TIM_MspPostInit+0xd0>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	02db      	lsls	r3, r3, #11
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ac4:	2114      	movs	r1, #20
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <HAL_TIM_MspPostInit+0xd4>)
 8002aea:	0019      	movs	r1, r3
 8002aec:	0010      	movs	r0, r2
 8002aee:	f001 f8ad 	bl	8003c4c <HAL_GPIO_Init>
}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b00b      	add	sp, #44	; 0x2c
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40014400 	.word	0x40014400
 8002b00:	40021000 	.word	0x40021000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	40014800 	.word	0x40014800

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b30:	f000 f8c2 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b3e:	2080      	movs	r0, #128	; 0x80
 8002b40:	f001 fa12 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f001 fa0d 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	0018      	movs	r0, r3
 8002b54:	f001 fa08 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	015b      	lsls	r3, r3, #5
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f001 fa03 	bl	8003f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <DMA1_Channel1_IRQHandler+0x14>)
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 ff82 	bl	8003a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	200002e8 	.word	0x200002e8

08002b80 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <ADC1_IRQHandler+0x14>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f000 fa74 	bl	8003074 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	2000032c 	.word	0x2000032c

08002b98 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f001 ffde 	bl	8004b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	200002a0 	.word	0x200002a0

08002bb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <TIM1_CC_IRQHandler+0x14>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f001 ffd2 	bl	8004b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	200002a0 	.word	0x200002a0

08002bc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bda:	490e      	ldr	r1, [pc, #56]	; (8002c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <LoopForever+0xe>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be0:	e002      	b.n	8002be8 <LoopCopyDataInit>

08002be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be6:	3304      	adds	r3, #4

08002be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bec:	d3f9      	bcc.n	8002be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	; (8002c20 <LoopForever+0x16>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf4:	e001      	b.n	8002bfa <LoopFillZerobss>

08002bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf8:	3204      	adds	r2, #4

08002bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bfc:	d3fb      	bcc.n	8002bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bfe:	f7ff ffe3 	bl	8002bc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002c02:	f002 fe4f 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c06:	f7ff faa5 	bl	8002154 <main>

08002c0a <LoopForever>:

LoopForever:
    b LoopForever
 8002c0a:	e7fe      	b.n	8002c0a <LoopForever>
  ldr   r0, =_estack
 8002c0c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c18:	08005b70 	.word	0x08005b70
  ldr r2, =_sbss
 8002c1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c20:	200003c4 	.word	0x200003c4

08002c24 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <DMA1_Channel2_3_IRQHandler>
	...

08002c28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_Init+0x24>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_Init+0x24>)
 8002c32:	2110      	movs	r1, #16
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002c38:	2003      	movs	r0, #3
 8002c3a:	f000 f809 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3e:	f7ff fdff 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_InitTick+0x5c>)
 8002c5a:	681c      	ldr	r4, [r3, #0]
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_InitTick+0x60>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0019      	movs	r1, r3
 8002c62:	23fa      	movs	r3, #250	; 0xfa
 8002c64:	0098      	lsls	r0, r3, #2
 8002c66:	f7fd fa4f 	bl	8000108 <__udivsi3>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	0020      	movs	r0, r4
 8002c70:	f7fd fa4a 	bl	8000108 <__udivsi3>
 8002c74:	0003      	movs	r3, r0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 fe43 	bl	8003902 <HAL_SYSTICK_Config>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e00f      	b.n	8002ca4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d80b      	bhi.n	8002ca2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fe10 	bl	80038b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_InitTick+0x64>)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b003      	add	sp, #12
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_IncTick+0x1c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	001a      	movs	r2, r3
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	18d2      	adds	r2, r2, r3
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cca:	601a      	str	r2, [r3, #0]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000008 	.word	0x20000008
 8002cd8:	200003b4 	.word	0x200003b4

08002cdc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_GetTick+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	200003b4 	.word	0x200003b4

08002cf0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e125      	b.n	8002f5a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2234      	movs	r2, #52	; 0x34
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff fdae 	bl	8002888 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_Init+0x48>
 8002d36:	e103      	b.n	8002f40 <HAL_ADC_Init+0x250>
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_Init+0x54>
 8002d42:	e0fd      	b.n	8002f40 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d4e:	d000      	beq.n	8002d52 <HAL_ADC_Init+0x62>
 8002d50:	e0f6      	b.n	8002f40 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4a83      	ldr	r2, [pc, #524]	; (8002f64 <HAL_ADC_Init+0x274>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d112      	bne.n	8002d96 <HAL_ADC_Init+0xa6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d009      	beq.n	8002d92 <HAL_ADC_Init+0xa2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	401a      	ands	r2, r3
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_Init+0xa6>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_ADC_Init+0xa8>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2218      	movs	r2, #24
 8002da4:	4393      	bics	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	0899      	lsrs	r1, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4964      	ldr	r1, [pc, #400]	; (8002f68 <HAL_ADC_Init+0x278>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e1b      	ldrb	r3, [r3, #24]
 8002dde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7e5b      	ldrb	r3, [r3, #25]
 8002de4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002de6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7e9b      	ldrb	r3, [r3, #26]
 8002dec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d002      	beq.n	8002dfe <HAL_ADC_Init+0x10e>
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	015b      	lsls	r3, r3, #5
 8002dfc:	e000      	b.n	8002e00 <HAL_ADC_Init+0x110>
 8002dfe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e00:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e06:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_Init+0x124>
 8002e10:	2304      	movs	r3, #4
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_Init+0x126>
 8002e14:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002e16:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2124      	movs	r1, #36	; 0x24
 8002e1c:	5c5b      	ldrb	r3, [r3, r1]
 8002e1e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e20:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7edb      	ldrb	r3, [r3, #27]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d115      	bne.n	8002e5c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7e9b      	ldrb	r3, [r3, #26]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d105      	bne.n	8002e44 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	0252      	lsls	r2, r2, #9
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	e00b      	b.n	8002e5c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	2220      	movs	r2, #32
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	2201      	movs	r2, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	23c2      	movs	r3, #194	; 0xc2
 8002e62:	33ff      	adds	r3, #255	; 0xff
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d007      	beq.n	8002e78 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	055b      	lsls	r3, r3, #21
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d01b      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d017      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d013      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d00f      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00b      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d007      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d003      	beq.n	8002ecc <HAL_ADC_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b07      	cmp	r3, #7
 8002eca:	d112      	bne.n	8002ef2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2107      	movs	r1, #7
 8002ed8:	438a      	bics	r2, r1
 8002eda:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6959      	ldr	r1, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_ADC_Init+0x27c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10b      	bne.n	8002f1a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4393      	bics	r3, r2
 8002f10:	2201      	movs	r2, #1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f18:	e01c      	b.n	8002f54 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2212      	movs	r2, #18
 8002f20:	4393      	bics	r3, r2
 8002f22:	2210      	movs	r2, #16
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2e:	2201      	movs	r2, #1
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f36:	230f      	movs	r3, #15
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f3e:	e009      	b.n	8002f54 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2210      	movs	r2, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	230f      	movs	r3, #15
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b004      	add	sp, #16
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	fffffefd 	.word	0xfffffefd
 8002f68:	fffe0219 	.word	0xfffe0219
 8002f6c:	833fffe7 	.word	0x833fffe7

08002f70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7c:	2317      	movs	r3, #23
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d15e      	bne.n	800304e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2234      	movs	r2, #52	; 0x34
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Start_DMA+0x2e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e05e      	b.n	800305c <HAL_ADC_Start_DMA+0xec>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2234      	movs	r2, #52	; 0x34
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	7e5b      	ldrb	r3, [r3, #25]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d007      	beq.n	8002fbe <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002fae:	2317      	movs	r3, #23
 8002fb0:	18fc      	adds	r4, r7, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fa23 	bl	8003400 <ADC_Enable>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fbe:	2317      	movs	r3, #23
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d146      	bne.n	8003056 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_ADC_Start_DMA+0xf4>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0052      	lsls	r2, r2, #1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2234      	movs	r2, #52	; 0x34
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_ADC_Start_DMA+0xf8>)
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_ADC_Start_DMA+0xfc>)
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_ADC_Start_DMA+0x100>)
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	221c      	movs	r2, #28
 8003006:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2110      	movs	r1, #16
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	0019      	movs	r1, r3
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f000 fcb8 	bl	80039ac <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2104      	movs	r1, #4
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e003      	b.n	8003056 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800304e:	2317      	movs	r3, #23
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2202      	movs	r2, #2
 8003054:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003056:	2317      	movs	r3, #23
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b007      	add	sp, #28
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	fffff0fe 	.word	0xfffff0fe
 8003068:	08003509 	.word	0x08003509
 800306c:	080035bd 	.word	0x080035bd
 8003070:	080035db 	.word	0x080035db

08003074 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	2b04      	cmp	r3, #4
 8003088:	d106      	bne.n	8003098 <HAL_ADC_IRQHandler+0x24>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	4013      	ands	r3, r2
 8003094:	2b04      	cmp	r3, #4
 8003096:	d00d      	beq.n	80030b4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d14f      	bne.n	8003146 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2208      	movs	r2, #8
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d148      	bne.n	8003146 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	2210      	movs	r2, #16
 80030ba:	4013      	ands	r3, r2
 80030bc:	d106      	bne.n	80030cc <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	0092      	lsls	r2, r2, #2
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4013      	ands	r3, r2
 80030d8:	d12d      	bne.n	8003136 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d129      	bne.n	8003136 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2208      	movs	r2, #8
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d122      	bne.n	8003136 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	d110      	bne.n	800311e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	210c      	movs	r1, #12
 8003108:	438a      	bics	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <HAL_ADC_IRQHandler+0x16c>)
 8003112:	4013      	ands	r3, r2
 8003114:	2201      	movs	r2, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
 800311c:	e00b      	b.n	8003136 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	2220      	movs	r2, #32
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2201      	movs	r2, #1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f7fe ffeb 	bl	8002114 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	4013      	ands	r3, r2
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d115      	bne.n	8003180 <HAL_ADC_IRQHandler+0x10c>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2280      	movs	r2, #128	; 0x80
 800315c:	4013      	ands	r3, r2
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d10e      	bne.n	8003180 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	0252      	lsls	r2, r2, #9
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 f83e 	bl	80031f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2210      	movs	r2, #16
 8003188:	4013      	ands	r3, r2
 800318a:	2b10      	cmp	r3, #16
 800318c:	d123      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x162>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2210      	movs	r2, #16
 8003196:	4013      	ands	r3, r2
 8003198:	2b10      	cmp	r3, #16
 800319a:	d11c      	bne.n	80031d6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d006      	beq.n	80031b2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2202      	movs	r2, #2
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2210      	movs	r2, #16
 80031c4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f81b 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2210      	movs	r2, #16
 80031d4:	601a      	str	r2, [r3, #0]
  }

}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	fffffefe 	.word	0xfffffefe

080031e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b002      	add	sp, #8
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	230f      	movs	r3, #15
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	055b      	lsls	r3, r3, #21
 8003232:	429a      	cmp	r2, r3
 8003234:	d011      	beq.n	800325a <HAL_ADC_ConfigChannel+0x46>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d00d      	beq.n	800325a <HAL_ADC_ConfigChannel+0x46>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	2b02      	cmp	r3, #2
 8003244:	d009      	beq.n	800325a <HAL_ADC_ConfigChannel+0x46>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	2b03      	cmp	r3, #3
 800324c:	d005      	beq.n	800325a <HAL_ADC_ConfigChannel+0x46>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2b04      	cmp	r3, #4
 8003254:	d001      	beq.n	800325a <HAL_ADC_ConfigChannel+0x46>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2234      	movs	r2, #52	; 0x34
 800325e:	5c9b      	ldrb	r3, [r3, r2]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x54>
 8003264:	2302      	movs	r3, #2
 8003266:	e0bb      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1cc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2234      	movs	r2, #52	; 0x34
 800326c:	2101      	movs	r1, #1
 800326e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2204      	movs	r2, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d000      	beq.n	800327e <HAL_ADC_ConfigChannel+0x6a>
 800327c:	e09f      	b.n	80033be <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a59      	ldr	r2, [pc, #356]	; (80033e8 <HAL_ADC_ConfigChannel+0x1d4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <HAL_ADC_ConfigChannel+0x76>
 8003288:	e077      	b.n	800337a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	409a      	lsls	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	055b      	lsls	r3, r3, #21
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d037      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d033      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d02f      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d02b      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d027      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d023      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d01f      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d01b      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2107      	movs	r1, #7
 80032f0:	400b      	ands	r3, r1
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d012      	beq.n	800331c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2107      	movs	r1, #7
 8003302:	438a      	bics	r2, r1
 8003304:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6959      	ldr	r1, [r3, #20]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2207      	movs	r2, #7
 8003312:	401a      	ands	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d003      	beq.n	800332c <HAL_ADC_ConfigChannel+0x118>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b11      	cmp	r3, #17
 800332a:	d152      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_ADC_ConfigChannel+0x1d8>)
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b10      	cmp	r3, #16
 8003336:	d102      	bne.n	800333e <HAL_ADC_ConfigChannel+0x12a>
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	e001      	b.n	8003342 <HAL_ADC_ConfigChannel+0x12e>
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	03db      	lsls	r3, r3, #15
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_ADC_ConfigChannel+0x1d8>)
 8003344:	430b      	orrs	r3, r1
 8003346:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b10      	cmp	r3, #16
 800334e:	d140      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_ADC_ConfigChannel+0x1dc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4927      	ldr	r1, [pc, #156]	; (80033f4 <HAL_ADC_ConfigChannel+0x1e0>)
 8003356:	0018      	movs	r0, r3
 8003358:	f7fc fed6 	bl	8000108 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	001a      	movs	r2, r3
 8003360:	0013      	movs	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	189b      	adds	r3, r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800336a:	e002      	b.n	8003372 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	3b01      	subs	r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f9      	bne.n	800336c <HAL_ADC_ConfigChannel+0x158>
 8003378:	e02b      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	4099      	lsls	r1, r3
 8003388:	000b      	movs	r3, r1
 800338a:	43d9      	mvns	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d003      	beq.n	80033a4 <HAL_ADC_ConfigChannel+0x190>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b11      	cmp	r3, #17
 80033a2:	d116      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <HAL_ADC_ConfigChannel+0x1d8>)
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1a0>
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_ADC_ConfigChannel+0x1e4>)
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x1a2>
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_ADC_ConfigChannel+0x1e8>)
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_ADC_ConfigChannel+0x1d8>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e009      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	2220      	movs	r2, #32
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80033ca:	230f      	movs	r3, #15
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2234      	movs	r2, #52	; 0x34
 80033d6:	2100      	movs	r1, #0
 80033d8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80033da:	230f      	movs	r3, #15
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	781b      	ldrb	r3, [r3, #0]
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	00001001 	.word	0x00001001
 80033ec:	40012708 	.word	0x40012708
 80033f0:	20000000 	.word	0x20000000
 80033f4:	000f4240 	.word	0x000f4240
 80033f8:	ff7fffff 	.word	0xff7fffff
 80033fc:	ffbfffff 	.word	0xffbfffff

08003400 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2203      	movs	r2, #3
 8003418:	4013      	ands	r3, r2
 800341a:	2b01      	cmp	r3, #1
 800341c:	d112      	bne.n	8003444 <ADC_Enable+0x44>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
 8003428:	2b01      	cmp	r3, #1
 800342a:	d009      	beq.n	8003440 <ADC_Enable+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	401a      	ands	r2, r3
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	429a      	cmp	r2, r3
 800343e:	d101      	bne.n	8003444 <ADC_Enable+0x44>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <ADC_Enable+0x46>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d152      	bne.n	80034f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <ADC_Enable+0xfc>)
 8003452:	4013      	ands	r3, r2
 8003454:	d00d      	beq.n	8003472 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	2210      	movs	r2, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	2201      	movs	r2, #1
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e03f      	b.n	80034f2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003482:	4b1f      	ldr	r3, [pc, #124]	; (8003500 <ADC_Enable+0x100>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	491f      	ldr	r1, [pc, #124]	; (8003504 <ADC_Enable+0x104>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7fc fe3d 	bl	8000108 <__udivsi3>
 800348e:	0003      	movs	r3, r0
 8003490:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003492:	e002      	b.n	800349a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	3b01      	subs	r3, #1
 8003498:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f9      	bne.n	8003494 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80034a0:	f7ff fc1c 	bl	8002cdc <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034a8:	e01b      	b.n	80034e2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034aa:	f7ff fc17 	bl	8002cdc <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d914      	bls.n	80034e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00d      	beq.n	80034e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	2210      	movs	r2, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2201      	movs	r2, #1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e007      	b.n	80034f2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1dc      	bne.n	80034aa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	80000017 	.word	0x80000017
 8003500:	20000000 	.word	0x20000000
 8003504:	000f4240 	.word	0x000f4240

08003508 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	2250      	movs	r2, #80	; 0x50
 800351c:	4013      	ands	r3, r2
 800351e:	d140      	bne.n	80035a2 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	23c0      	movs	r3, #192	; 0xc0
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	4013      	ands	r3, r2
 800353a:	d12d      	bne.n	8003598 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003540:	2b00      	cmp	r3, #0
 8003542:	d129      	bne.n	8003598 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2208      	movs	r2, #8
 800354c:	4013      	ands	r3, r2
 800354e:	2b08      	cmp	r3, #8
 8003550:	d122      	bne.n	8003598 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2204      	movs	r2, #4
 800355a:	4013      	ands	r3, r2
 800355c:	d110      	bne.n	8003580 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	210c      	movs	r1, #12
 800356a:	438a      	bics	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4a11      	ldr	r2, [pc, #68]	; (80035b8 <ADC_DMAConvCplt+0xb0>)
 8003574:	4013      	ands	r3, r2
 8003576:	2201      	movs	r2, #1
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
 800357e:	e00b      	b.n	8003598 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2220      	movs	r2, #32
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	2201      	movs	r2, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	0018      	movs	r0, r3
 800359c:	f7fe fdba 	bl	8002114 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80035a0:	e005      	b.n	80035ae <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	0010      	movs	r0, r2
 80035ac:	4798      	blx	r3
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	fffffefe 	.word	0xfffffefe

080035bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff fe09 	bl	80031e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}

080035da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2240      	movs	r2, #64	; 0x40
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	2204      	movs	r2, #4
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff fdfe 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003618:	2317      	movs	r3, #23
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2234      	movs	r2, #52	; 0x34
 800362c:	5c9b      	ldrb	r3, [r3, r2]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_ADCEx_Calibration_Start+0x26>
 8003632:	2302      	movs	r3, #2
 8003634:	e08d      	b.n	8003752 <HAL_ADCEx_Calibration_Start+0x142>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2234      	movs	r2, #52	; 0x34
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2203      	movs	r2, #3
 8003646:	4013      	ands	r3, r2
 8003648:	2b01      	cmp	r3, #1
 800364a:	d112      	bne.n	8003672 <HAL_ADCEx_Calibration_Start+0x62>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	2b01      	cmp	r3, #1
 8003658:	d009      	beq.n	800366e <HAL_ADCEx_Calibration_Start+0x5e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	401a      	ands	r2, r3
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	429a      	cmp	r2, r3
 800366c:	d101      	bne.n	8003672 <HAL_ADCEx_Calibration_Start+0x62>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_ADCEx_Calibration_Start+0x64>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d15b      	bne.n	8003730 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	4a37      	ldr	r2, [pc, #220]	; (800375c <HAL_ADCEx_Calibration_Start+0x14c>)
 800367e:	4013      	ands	r3, r2
 8003680:	2202      	movs	r2, #2
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2203      	movs	r2, #3
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2103      	movs	r1, #3
 80036a0:	438a      	bics	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0609      	lsls	r1, r1, #24
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80036b6:	f7ff fb11 	bl	8002cdc <HAL_GetTick>
 80036ba:	0003      	movs	r3, r0
 80036bc:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036be:	e01d      	b.n	80036fc <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036c0:	f7ff fb0c 	bl	8002cdc <HAL_GetTick>
 80036c4:	0002      	movs	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d916      	bls.n	80036fc <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	0fdb      	lsrs	r3, r3, #31
 80036d6:	07da      	lsls	r2, r3, #31
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10d      	bne.n	80036fc <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2212      	movs	r2, #18
 80036e6:	4393      	bics	r3, r2
 80036e8:	2210      	movs	r2, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2234      	movs	r2, #52	; 0x34
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e02a      	b.n	8003752 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0fdb      	lsrs	r3, r3, #31
 8003704:	07da      	lsls	r2, r3, #31
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	429a      	cmp	r2, r3
 800370c:	d0d8      	beq.n	80036c0 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	430a      	orrs	r2, r1
 800371c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	2203      	movs	r2, #3
 8003724:	4393      	bics	r3, r2
 8003726:	2201      	movs	r2, #1
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
 800372e:	e009      	b.n	8003744 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	2220      	movs	r2, #32
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800373c:	2317      	movs	r3, #23
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2234      	movs	r2, #52	; 0x34
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800374c:	2317      	movs	r3, #23
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	781b      	ldrb	r3, [r3, #0]
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b006      	add	sp, #24
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	fffffefd 	.word	0xfffffefd

08003760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	0002      	movs	r2, r0
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b7f      	cmp	r3, #127	; 0x7f
 8003772:	d809      	bhi.n	8003788 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	001a      	movs	r2, r3
 800377a:	231f      	movs	r3, #31
 800377c:	401a      	ands	r2, r3
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <__NVIC_EnableIRQ+0x30>)
 8003780:	2101      	movs	r1, #1
 8003782:	4091      	lsls	r1, r2
 8003784:	000a      	movs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
  }
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	0002      	movs	r2, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b7f      	cmp	r3, #127	; 0x7f
 80037a8:	d828      	bhi.n	80037fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <__NVIC_SetPriority+0xd4>)
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	33c0      	adds	r3, #192	; 0xc0
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	589b      	ldr	r3, [r3, r2]
 80037ba:	1dfa      	adds	r2, r7, #7
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	0011      	movs	r1, r2
 80037c0:	2203      	movs	r2, #3
 80037c2:	400a      	ands	r2, r1
 80037c4:	00d2      	lsls	r2, r2, #3
 80037c6:	21ff      	movs	r1, #255	; 0xff
 80037c8:	4091      	lsls	r1, r2
 80037ca:	000a      	movs	r2, r1
 80037cc:	43d2      	mvns	r2, r2
 80037ce:	401a      	ands	r2, r3
 80037d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	401a      	ands	r2, r3
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0018      	movs	r0, r3
 80037e0:	2303      	movs	r3, #3
 80037e2:	4003      	ands	r3, r0
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e8:	481f      	ldr	r0, [pc, #124]	; (8003868 <__NVIC_SetPriority+0xd4>)
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b25b      	sxtb	r3, r3
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	430a      	orrs	r2, r1
 80037f4:	33c0      	adds	r3, #192	; 0xc0
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037fa:	e031      	b.n	8003860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <__NVIC_SetPriority+0xd8>)
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	0019      	movs	r1, r3
 8003804:	230f      	movs	r3, #15
 8003806:	400b      	ands	r3, r1
 8003808:	3b08      	subs	r3, #8
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3306      	adds	r3, #6
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	18d3      	adds	r3, r2, r3
 8003812:	3304      	adds	r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1dfa      	adds	r2, r7, #7
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	0011      	movs	r1, r2
 800381c:	2203      	movs	r2, #3
 800381e:	400a      	ands	r2, r1
 8003820:	00d2      	lsls	r2, r2, #3
 8003822:	21ff      	movs	r1, #255	; 0xff
 8003824:	4091      	lsls	r1, r2
 8003826:	000a      	movs	r2, r1
 8003828:	43d2      	mvns	r2, r2
 800382a:	401a      	ands	r2, r3
 800382c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	401a      	ands	r2, r3
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	0018      	movs	r0, r3
 800383c:	2303      	movs	r3, #3
 800383e:	4003      	ands	r3, r0
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003844:	4809      	ldr	r0, [pc, #36]	; (800386c <__NVIC_SetPriority+0xd8>)
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	001c      	movs	r4, r3
 800384c:	230f      	movs	r3, #15
 800384e:	4023      	ands	r3, r4
 8003850:	3b08      	subs	r3, #8
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	430a      	orrs	r2, r1
 8003856:	3306      	adds	r3, #6
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	18c3      	adds	r3, r0, r3
 800385c:	3304      	adds	r3, #4
 800385e:	601a      	str	r2, [r3, #0]
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b003      	add	sp, #12
 8003866:	bd90      	pop	{r4, r7, pc}
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	045b      	lsls	r3, r3, #17
 8003880:	429a      	cmp	r2, r3
 8003882:	d301      	bcc.n	8003888 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003884:	2301      	movs	r3, #1
 8003886:	e010      	b.n	80038aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <SysTick_Config+0x44>)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	3a01      	subs	r2, #1
 800388e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003890:	2301      	movs	r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	2103      	movs	r1, #3
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff ff7c 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x44>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x44>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	210f      	movs	r1, #15
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	1c02      	adds	r2, r0, #0
 80038c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff ff5d 	bl	8003794 <__NVIC_SetPriority>
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	0002      	movs	r2, r0
 80038ea:	1dfb      	adds	r3, r7, #7
 80038ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ee:	1dfb      	adds	r3, r7, #7
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff ff33 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff ffaf 	bl	8003870 <SysTick_Config>
 8003912:	0003      	movs	r3, r0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e036      	b.n	80039a0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2221      	movs	r2, #33	; 0x21
 8003936:	2102      	movs	r1, #2
 8003938:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_DMA_Init+0x8c>)
 8003946:	4013      	ands	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f946 	bl	8003c14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2221      	movs	r2, #33	; 0x21
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}  
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	ffffc00f 	.word	0xffffc00f

080039ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2317      	movs	r3, #23
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	5c9b      	ldrb	r3, [r3, r2]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Start_IT+0x24>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e04f      	b.n	8003a70 <HAL_DMA_Start_IT+0xc4>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2221      	movs	r2, #33	; 0x21
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d13a      	bne.n	8003a5a <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	; 0x21
 80039e8:	2102      	movs	r1, #2
 80039ea:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	438a      	bics	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f8d7 	bl	8003bbc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	210e      	movs	r1, #14
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e00f      	b.n	8003a48 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	210a      	movs	r1, #10
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2104      	movs	r1, #4
 8003a44:	438a      	bics	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e007      	b.n	8003a6a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003a62:	2317      	movs	r3, #23
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003a6a:	2317      	movs	r3, #23
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	781b      	ldrb	r3, [r3, #0]
} 
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b006      	add	sp, #24
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2204      	movs	r2, #4
 8003a96:	409a      	lsls	r2, r3
 8003a98:	0013      	movs	r3, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d024      	beq.n	8003aea <HAL_DMA_IRQHandler+0x72>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d020      	beq.n	8003aea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d107      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2104      	movs	r1, #4
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	2104      	movs	r1, #4
 8003ace:	4091      	lsls	r1, r2
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d100      	bne.n	8003ade <HAL_DMA_IRQHandler+0x66>
 8003adc:	e06a      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	e064      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2202      	movs	r2, #2
 8003af0:	409a      	lsls	r2, r3
 8003af2:	0013      	movs	r3, r2
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xda>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d10b      	bne.n	8003b26 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	210a      	movs	r1, #10
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2221      	movs	r2, #33	; 0x21
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4091      	lsls	r1, r2
 8003b32:	000a      	movs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	0010      	movs	r0, r2
 8003b4e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003b50:	e030      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2208      	movs	r2, #8
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d028      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4013      	ands	r3, r2
 8003b68:	d024      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	210e      	movs	r1, #14
 8003b76:	438a      	bics	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	2101      	movs	r1, #1
 8003b84:	4091      	lsls	r1, r2
 8003b86:	000a      	movs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2221      	movs	r2, #33	; 0x21
 8003b94:	2101      	movs	r1, #1
 8003b96:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	0010      	movs	r0, r2
 8003bb0:	4798      	blx	r3
    }
   }
}  
 8003bb2:	e7ff      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x13c>
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4091      	lsls	r1, r2
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d108      	bne.n	8003bfc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bfa:	e007      	b.n	8003c0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b004      	add	sp, #16
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <DMA_CalcBaseAndBitshift+0x30>)
 8003c22:	4694      	mov	ip, r2
 8003c24:	4463      	add	r3, ip
 8003c26:	2114      	movs	r1, #20
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fc fa6d 	bl	8000108 <__udivsi3>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	009a      	lsls	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <DMA_CalcBaseAndBitshift+0x34>)
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b002      	add	sp, #8
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	bffdfff8 	.word	0xbffdfff8
 8003c48:	40020000 	.word	0x40020000

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5a:	e14f      	b.n	8003efc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4091      	lsls	r1, r2
 8003c66:	000a      	movs	r2, r1
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d100      	bne.n	8003c74 <HAL_GPIO_Init+0x28>
 8003c72:	e140      	b.n	8003ef6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d005      	beq.n	8003c8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2203      	movs	r2, #3
 8003c86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d130      	bne.n	8003cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	409a      	lsls	r2, r3
 8003cae:	0013      	movs	r3, r2
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	2201      	movs	r2, #1
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d017      	beq.n	8003d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	2203      	movs	r2, #3
 8003d06:	409a      	lsls	r2, r3
 8003d08:	0013      	movs	r3, r2
 8003d0a:	43da      	mvns	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d123      	bne.n	8003d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	08da      	lsrs	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3208      	adds	r2, #8
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	58d3      	ldr	r3, [r2, r3]
 8003d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2207      	movs	r2, #7
 8003d48:	4013      	ands	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	0013      	movs	r3, r2
 8003d52:	43da      	mvns	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2107      	movs	r1, #7
 8003d62:	400b      	ands	r3, r1
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	409a      	lsls	r2, r3
 8003d68:	0013      	movs	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	08da      	lsrs	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3208      	adds	r2, #8
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	6939      	ldr	r1, [r7, #16]
 8003d7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	0013      	movs	r3, r2
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	409a      	lsls	r2, r3
 8003da4:	0013      	movs	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	029b      	lsls	r3, r3, #10
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d100      	bne.n	8003dc0 <HAL_GPIO_Init+0x174>
 8003dbe:	e09a      	b.n	8003ef6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc0:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_GPIO_Init+0x2c8>)
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_GPIO_Init+0x2c8>)
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <HAL_GPIO_Init+0x2c8>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd8:	4a4f      	ldr	r2, [pc, #316]	; (8003f18 <HAL_GPIO_Init+0x2cc>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	589b      	ldr	r3, [r3, r2]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2203      	movs	r2, #3
 8003dea:	4013      	ands	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	409a      	lsls	r2, r3
 8003df2:	0013      	movs	r3, r2
 8003df4:	43da      	mvns	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	2390      	movs	r3, #144	; 0x90
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d013      	beq.n	8003e2e <HAL_GPIO_Init+0x1e2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a44      	ldr	r2, [pc, #272]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00d      	beq.n	8003e2a <HAL_GPIO_Init+0x1de>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <HAL_GPIO_Init+0x2d4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <HAL_GPIO_Init+0x1da>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a42      	ldr	r2, [pc, #264]	; (8003f24 <HAL_GPIO_Init+0x2d8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d101      	bne.n	8003e22 <HAL_GPIO_Init+0x1d6>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e006      	b.n	8003e30 <HAL_GPIO_Init+0x1e4>
 8003e22:	2305      	movs	r3, #5
 8003e24:	e004      	b.n	8003e30 <HAL_GPIO_Init+0x1e4>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e002      	b.n	8003e30 <HAL_GPIO_Init+0x1e4>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_GPIO_Init+0x1e4>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	2103      	movs	r1, #3
 8003e34:	400a      	ands	r2, r1
 8003e36:	0092      	lsls	r2, r2, #2
 8003e38:	4093      	lsls	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e40:	4935      	ldr	r1, [pc, #212]	; (8003f18 <HAL_GPIO_Init+0x2cc>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e4e:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	43da      	mvns	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	025b      	lsls	r3, r3, #9
 8003e66:	4013      	ands	r3, r2
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e72:	4b2d      	ldr	r3, [pc, #180]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	43da      	mvns	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	029b      	lsls	r3, r3, #10
 8003e90:	4013      	ands	r3, r2
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	035b      	lsls	r3, r3, #13
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	039b      	lsls	r3, r3, #14
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <HAL_GPIO_Init+0x2dc>)
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	40da      	lsrs	r2, r3
 8003f04:	1e13      	subs	r3, r2, #0
 8003f06:	d000      	beq.n	8003f0a <HAL_GPIO_Init+0x2be>
 8003f08:	e6a8      	b.n	8003c5c <HAL_GPIO_Init+0x10>
  } 
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b006      	add	sp, #24
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000c00 	.word	0x48000c00
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	0008      	movs	r0, r1
 8003f36:	0011      	movs	r1, r2
 8003f38:	1cbb      	adds	r3, r7, #2
 8003f3a:	1c02      	adds	r2, r0, #0
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	1c7b      	adds	r3, r7, #1
 8003f40:	1c0a      	adds	r2, r1, #0
 8003f42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f44:	1c7b      	adds	r3, r7, #1
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f4c:	1cbb      	adds	r3, r7, #2
 8003f4e:	881a      	ldrh	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f54:	e003      	b.n	8003f5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f56:	1cbb      	adds	r3, r7, #2
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b002      	add	sp, #8
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	0002      	movs	r2, r0
 8003f70:	1dbb      	adds	r3, r7, #6
 8003f72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	1dba      	adds	r2, r7, #6
 8003f7a:	8812      	ldrh	r2, [r2, #0]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d008      	beq.n	8003f92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f82:	1dba      	adds	r2, r7, #6
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f88:	1dbb      	adds	r3, r7, #6
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fd fcf3 	bl	8001978 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e301      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d100      	bne.n	8003fbe <HAL_RCC_OscConfig+0x1e>
 8003fbc:	e08d      	b.n	80040da <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fbe:	4bc3      	ldr	r3, [pc, #780]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fca:	4bc0      	ldr	r3, [pc, #768]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	220c      	movs	r2, #12
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x64>
 8003fd6:	4bbd      	ldr	r3, [pc, #756]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	025b      	lsls	r3, r3, #9
 8003fde:	401a      	ands	r2, r3
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4bb8      	ldr	r3, [pc, #736]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x56>
 8003ff4:	e070      	b.n	80040d8 <HAL_RCC_OscConfig+0x138>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d000      	beq.n	8004000 <HAL_RCC_OscConfig+0x60>
 8003ffe:	e06b      	b.n	80040d8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e2d8      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x7c>
 800400c:	4baf      	ldr	r3, [pc, #700]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4bae      	ldr	r3, [pc, #696]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	0249      	lsls	r1, r1, #9
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e02f      	b.n	800407c <HAL_RCC_OscConfig+0xdc>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x9e>
 8004024:	4ba9      	ldr	r3, [pc, #676]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4ba8      	ldr	r3, [pc, #672]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800402a:	49a9      	ldr	r1, [pc, #676]	; (80042d0 <HAL_RCC_OscConfig+0x330>)
 800402c:	400a      	ands	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	4ba6      	ldr	r3, [pc, #664]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4ba5      	ldr	r3, [pc, #660]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004036:	49a7      	ldr	r1, [pc, #668]	; (80042d4 <HAL_RCC_OscConfig+0x334>)
 8004038:	400a      	ands	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e01e      	b.n	800407c <HAL_RCC_OscConfig+0xdc>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b05      	cmp	r3, #5
 8004044:	d10e      	bne.n	8004064 <HAL_RCC_OscConfig+0xc4>
 8004046:	4ba1      	ldr	r3, [pc, #644]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	02c9      	lsls	r1, r1, #11
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	4b9d      	ldr	r3, [pc, #628]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b9c      	ldr	r3, [pc, #624]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	0249      	lsls	r1, r1, #9
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xdc>
 8004064:	4b99      	ldr	r3, [pc, #612]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800406a:	4999      	ldr	r1, [pc, #612]	; (80042d0 <HAL_RCC_OscConfig+0x330>)
 800406c:	400a      	ands	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	4b96      	ldr	r3, [pc, #600]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b95      	ldr	r3, [pc, #596]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004076:	4997      	ldr	r1, [pc, #604]	; (80042d4 <HAL_RCC_OscConfig+0x334>)
 8004078:	400a      	ands	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d014      	beq.n	80040ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fe2a 	bl	8002cdc <HAL_GetTick>
 8004088:	0003      	movs	r3, r0
 800408a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408e:	f7fe fe25 	bl	8002cdc <HAL_GetTick>
 8004092:	0002      	movs	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b64      	cmp	r3, #100	; 0x64
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e28a      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a0:	4b8a      	ldr	r3, [pc, #552]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	029b      	lsls	r3, r3, #10
 80040a8:	4013      	ands	r3, r2
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0xee>
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7fe fe15 	bl	8002cdc <HAL_GetTick>
 80040b2:	0003      	movs	r3, r0
 80040b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fe10 	bl	8002cdc <HAL_GetTick>
 80040bc:	0002      	movs	r2, r0
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e275      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b80      	ldr	r3, [pc, #512]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	4013      	ands	r3, r2
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x118>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	4013      	ands	r3, r2
 80040e2:	d100      	bne.n	80040e6 <HAL_RCC_OscConfig+0x146>
 80040e4:	e069      	b.n	80041ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80040e6:	4b79      	ldr	r3, [pc, #484]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	220c      	movs	r2, #12
 80040ec:	4013      	ands	r3, r2
 80040ee:	d00b      	beq.n	8004108 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040f0:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	220c      	movs	r2, #12
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d11c      	bne.n	8004136 <HAL_RCC_OscConfig+0x196>
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	4013      	ands	r3, r2
 8004106:	d116      	bne.n	8004136 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004108:	4b70      	ldr	r3, [pc, #448]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x17e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e24b      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	22f8      	movs	r2, #248	; 0xf8
 8004124:	4393      	bics	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00da      	lsls	r2, r3, #3
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004134:	e041      	b.n	80041ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d024      	beq.n	8004188 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413e:	4b63      	ldr	r3, [pc, #396]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004144:	2101      	movs	r1, #1
 8004146:	430a      	orrs	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe fdc7 	bl	8002cdc <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fdc2 	bl	8002cdc <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e227      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4b59      	ldr	r3, [pc, #356]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2202      	movs	r2, #2
 800416c:	4013      	ands	r3, r2
 800416e:	d0f1      	beq.n	8004154 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	22f8      	movs	r2, #248	; 0xf8
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	4b52      	ldr	r3, [pc, #328]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	e018      	b.n	80041ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004188:	4b50      	ldr	r3, [pc, #320]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b4f      	ldr	r3, [pc, #316]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800418e:	2101      	movs	r1, #1
 8004190:	438a      	bics	r2, r1
 8004192:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe fda2 	bl	8002cdc <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419e:	f7fe fd9d 	bl	8002cdc <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e202      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2202      	movs	r2, #2
 80041b6:	4013      	ands	r3, r2
 80041b8:	d1f1      	bne.n	800419e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2208      	movs	r2, #8
 80041c0:	4013      	ands	r3, r2
 80041c2:	d036      	beq.n	8004232 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d019      	beq.n	8004200 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041cc:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80041ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d0:	4b3e      	ldr	r3, [pc, #248]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80041d2:	2101      	movs	r1, #1
 80041d4:	430a      	orrs	r2, r1
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d8:	f7fe fd80 	bl	8002cdc <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fe fd7b 	bl	8002cdc <HAL_GetTick>
 80041e6:	0002      	movs	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e1e0      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f4:	4b35      	ldr	r3, [pc, #212]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	2202      	movs	r2, #2
 80041fa:	4013      	ands	r3, r2
 80041fc:	d0f1      	beq.n	80041e2 <HAL_RCC_OscConfig+0x242>
 80041fe:	e018      	b.n	8004232 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004206:	2101      	movs	r1, #1
 8004208:	438a      	bics	r2, r1
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420c:	f7fe fd66 	bl	8002cdc <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004216:	f7fe fd61 	bl	8002cdc <HAL_GetTick>
 800421a:	0002      	movs	r2, r0
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1c6      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2202      	movs	r2, #2
 800422e:	4013      	ands	r3, r2
 8004230:	d1f1      	bne.n	8004216 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2204      	movs	r2, #4
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCC_OscConfig+0x29e>
 800423c:	e0b4      	b.n	80043a8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	201f      	movs	r0, #31
 8004240:	183b      	adds	r3, r7, r0
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	055b      	lsls	r3, r3, #21
 800424e:	4013      	ands	r3, r2
 8004250:	d110      	bne.n	8004274 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0549      	lsls	r1, r1, #21
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	055b      	lsls	r3, r3, #21
 8004268:	4013      	ands	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426e:	183b      	adds	r3, r7, r0
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_RCC_OscConfig+0x338>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d11a      	bne.n	80042b6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_RCC_OscConfig+0x338>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_OscConfig+0x338>)
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	0049      	lsls	r1, r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428e:	f7fe fd25 	bl	8002cdc <HAL_GetTick>
 8004292:	0003      	movs	r3, r0
 8004294:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fe fd20 	bl	8002cdc <HAL_GetTick>
 800429c:	0002      	movs	r2, r0
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e185      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x338>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d10e      	bne.n	80042dc <HAL_RCC_OscConfig+0x33c>
 80042be:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	4b02      	ldr	r3, [pc, #8]	; (80042cc <HAL_RCC_OscConfig+0x32c>)
 80042c4:	2101      	movs	r1, #1
 80042c6:	430a      	orrs	r2, r1
 80042c8:	621a      	str	r2, [r3, #32]
 80042ca:	e035      	b.n	8004338 <HAL_RCC_OscConfig+0x398>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	fffeffff 	.word	0xfffeffff
 80042d4:	fffbffff 	.word	0xfffbffff
 80042d8:	40007000 	.word	0x40007000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10c      	bne.n	80042fe <HAL_RCC_OscConfig+0x35e>
 80042e4:	4bb6      	ldr	r3, [pc, #728]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	4bb5      	ldr	r3, [pc, #724]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	621a      	str	r2, [r3, #32]
 80042f0:	4bb3      	ldr	r3, [pc, #716]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	4bb2      	ldr	r3, [pc, #712]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80042f6:	2104      	movs	r1, #4
 80042f8:	438a      	bics	r2, r1
 80042fa:	621a      	str	r2, [r3, #32]
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x398>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x380>
 8004306:	4bae      	ldr	r3, [pc, #696]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004308:	6a1a      	ldr	r2, [r3, #32]
 800430a:	4bad      	ldr	r3, [pc, #692]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800430c:	2104      	movs	r1, #4
 800430e:	430a      	orrs	r2, r1
 8004310:	621a      	str	r2, [r3, #32]
 8004312:	4bab      	ldr	r3, [pc, #684]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004318:	2101      	movs	r1, #1
 800431a:	430a      	orrs	r2, r1
 800431c:	621a      	str	r2, [r3, #32]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x398>
 8004320:	4ba7      	ldr	r3, [pc, #668]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4ba6      	ldr	r3, [pc, #664]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	4ba4      	ldr	r3, [pc, #656]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	4ba3      	ldr	r3, [pc, #652]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004332:	2104      	movs	r1, #4
 8004334:	438a      	bics	r2, r1
 8004336:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d014      	beq.n	800436a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004340:	f7fe fccc 	bl	8002cdc <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe fcc7 	bl	8002cdc <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	4a9b      	ldr	r2, [pc, #620]	; (80045c4 <HAL_RCC_OscConfig+0x624>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e12b      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b98      	ldr	r3, [pc, #608]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x3aa>
 8004368:	e013      	b.n	8004392 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436a:	f7fe fcb7 	bl	8002cdc <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e009      	b.n	8004388 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fcb2 	bl	8002cdc <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	4a91      	ldr	r2, [pc, #580]	; (80045c4 <HAL_RCC_OscConfig+0x624>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e116      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004388:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004392:	231f      	movs	r3, #31
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	4b87      	ldr	r3, [pc, #540]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043a2:	4989      	ldr	r1, [pc, #548]	; (80045c8 <HAL_RCC_OscConfig+0x628>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2210      	movs	r2, #16
 80043ae:	4013      	ands	r3, r2
 80043b0:	d063      	beq.n	800447a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d12a      	bne.n	8004410 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043ba:	4b81      	ldr	r3, [pc, #516]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	4b80      	ldr	r3, [pc, #512]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043c0:	2104      	movs	r1, #4
 80043c2:	430a      	orrs	r2, r1
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80043c6:	4b7e      	ldr	r3, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ca:	4b7d      	ldr	r3, [pc, #500]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fe fc83 	bl	8002cdc <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80043dc:	f7fe fc7e 	bl	8002cdc <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0e3      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80043ee:	4b74      	ldr	r3, [pc, #464]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	2202      	movs	r2, #2
 80043f4:	4013      	ands	r3, r2
 80043f6:	d0f1      	beq.n	80043dc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043f8:	4b71      	ldr	r3, [pc, #452]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	22f8      	movs	r2, #248	; 0xf8
 80043fe:	4393      	bics	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	00da      	lsls	r2, r3, #3
 8004408:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
 800440e:	e034      	b.n	800447a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	3305      	adds	r3, #5
 8004416:	d111      	bne.n	800443c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004418:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800441a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441c:	4b68      	ldr	r3, [pc, #416]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800441e:	2104      	movs	r1, #4
 8004420:	438a      	bics	r2, r1
 8004422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004424:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	22f8      	movs	r2, #248	; 0xf8
 800442a:	4393      	bics	r3, r2
 800442c:	0019      	movs	r1, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	00da      	lsls	r2, r3, #3
 8004434:	4b62      	ldr	r3, [pc, #392]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004436:	430a      	orrs	r2, r1
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
 800443a:	e01e      	b.n	800447a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800443c:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	4b5f      	ldr	r3, [pc, #380]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004442:	2104      	movs	r1, #4
 8004444:	430a      	orrs	r2, r1
 8004446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004448:	4b5d      	ldr	r3, [pc, #372]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800444a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800444c:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800444e:	2101      	movs	r1, #1
 8004450:	438a      	bics	r2, r1
 8004452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe fc42 	bl	8002cdc <HAL_GetTick>
 8004458:	0003      	movs	r3, r0
 800445a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800445e:	f7fe fc3d 	bl	8002cdc <HAL_GetTick>
 8004462:	0002      	movs	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0a2      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004470:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d1f1      	bne.n	800445e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d100      	bne.n	8004484 <HAL_RCC_OscConfig+0x4e4>
 8004482:	e097      	b.n	80045b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004484:	4b4e      	ldr	r3, [pc, #312]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	220c      	movs	r2, #12
 800448a:	4013      	ands	r3, r2
 800448c:	2b08      	cmp	r3, #8
 800448e:	d100      	bne.n	8004492 <HAL_RCC_OscConfig+0x4f2>
 8004490:	e06b      	b.n	800456a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d14c      	bne.n	8004534 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b48      	ldr	r3, [pc, #288]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044a0:	494a      	ldr	r1, [pc, #296]	; (80045cc <HAL_RCC_OscConfig+0x62c>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fc19 	bl	8002cdc <HAL_GetTick>
 80044aa:	0003      	movs	r3, r0
 80044ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fe fc14 	bl	8002cdc <HAL_GetTick>
 80044b4:	0002      	movs	r2, r0
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e079      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c2:	4b3f      	ldr	r3, [pc, #252]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	049b      	lsls	r3, r3, #18
 80044ca:	4013      	ands	r3, r2
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ce:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	220f      	movs	r2, #15
 80044d4:	4393      	bics	r3, r2
 80044d6:	0019      	movs	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044de:	430a      	orrs	r2, r1
 80044e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80044e2:	4b37      	ldr	r3, [pc, #220]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4a3a      	ldr	r2, [pc, #232]	; (80045d0 <HAL_RCC_OscConfig+0x630>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	0449      	lsls	r1, r1, #17
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fe fbe7 	bl	8002cdc <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fe fbe2 	bl	8002cdc <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e047      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004526:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	049b      	lsls	r3, r3, #18
 800452e:	4013      	ands	r3, r2
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x574>
 8004532:	e03f      	b.n	80045b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800453a:	4924      	ldr	r1, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x62c>)
 800453c:	400a      	ands	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004540:	f7fe fbcc 	bl	8002cdc <HAL_GetTick>
 8004544:	0003      	movs	r3, r0
 8004546:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe fbc7 	bl	8002cdc <HAL_GetTick>
 800454e:	0002      	movs	r2, r0
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e02c      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	049b      	lsls	r3, r3, #18
 8004564:	4013      	ands	r3, r2
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x5aa>
 8004568:	e024      	b.n	80045b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e01f      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_OscConfig+0x620>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	025b      	lsls	r3, r3, #9
 8004588:	401a      	ands	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	429a      	cmp	r2, r3
 8004590:	d10e      	bne.n	80045b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	220f      	movs	r2, #15
 8004596:	401a      	ands	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	23f0      	movs	r3, #240	; 0xf0
 80045a4:	039b      	lsls	r3, r3, #14
 80045a6:	401a      	ands	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	0018      	movs	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b008      	add	sp, #32
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	40021000 	.word	0x40021000
 80045c4:	00001388 	.word	0x00001388
 80045c8:	efffffff 	.word	0xefffffff
 80045cc:	feffffff 	.word	0xfeffffff
 80045d0:	ffc2ffff 	.word	0xffc2ffff

080045d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0b3      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d911      	bls.n	800461a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b58      	ldr	r3, [pc, #352]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	4393      	bics	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	4b55      	ldr	r3, [pc, #340]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2201      	movs	r2, #1
 800460e:	4013      	ands	r3, r2
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e09a      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2202      	movs	r2, #2
 8004620:	4013      	ands	r3, r2
 8004622:	d015      	beq.n	8004650 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2204      	movs	r2, #4
 800462a:	4013      	ands	r3, r2
 800462c:	d006      	beq.n	800463c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800462e:	4b4b      	ldr	r3, [pc, #300]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4b4a      	ldr	r3, [pc, #296]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 8004634:	21e0      	movs	r1, #224	; 0xe0
 8004636:	00c9      	lsls	r1, r1, #3
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463c:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	22f0      	movs	r2, #240	; 0xf0
 8004642:	4393      	bics	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	4b44      	ldr	r3, [pc, #272]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2201      	movs	r2, #1
 8004656:	4013      	ands	r3, r2
 8004658:	d040      	beq.n	80046dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b3e      	ldr	r3, [pc, #248]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	2380      	movs	r3, #128	; 0x80
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	4013      	ands	r3, r2
 800466c:	d114      	bne.n	8004698 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e06e      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	049b      	lsls	r3, r3, #18
 8004682:	4013      	ands	r3, r2
 8004684:	d108      	bne.n	8004698 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e062      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b34      	ldr	r3, [pc, #208]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2202      	movs	r2, #2
 8004690:	4013      	ands	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e05b      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004698:	4b30      	ldr	r3, [pc, #192]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2203      	movs	r2, #3
 800469e:	4393      	bics	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fe fb16 	bl	8002cdc <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b4:	e009      	b.n	80046ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b6:	f7fe fb11 	bl	8002cdc <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	4a27      	ldr	r2, [pc, #156]	; (8004760 <HAL_RCC_ClockConfig+0x18c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e042      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	220c      	movs	r2, #12
 80046d0:	401a      	ands	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1ec      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2201      	movs	r2, #1
 80046e2:	4013      	ands	r3, r2
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d211      	bcs.n	800470e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	4393      	bics	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fc:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_RCC_ClockConfig+0x184>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	4013      	ands	r3, r2
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e020      	b.n	8004750 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2204      	movs	r2, #4
 8004714:	4013      	ands	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <HAL_RCC_ClockConfig+0x190>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800472c:	f000 f820 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 8004730:	0001      	movs	r1, r0
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCC_ClockConfig+0x188>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	220f      	movs	r2, #15
 800473a:	4013      	ands	r3, r2
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x194>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	000a      	movs	r2, r1
 8004742:	40da      	lsrs	r2, r3
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_ClockConfig+0x198>)
 8004746:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004748:	2003      	movs	r0, #3
 800474a:	f7fe fa81 	bl	8002c50 <HAL_InitTick>
  
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b004      	add	sp, #16
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40022000 	.word	0x40022000
 800475c:	40021000 	.word	0x40021000
 8004760:	00001388 	.word	0x00001388
 8004764:	fffff8ff 	.word	0xfffff8ff
 8004768:	08005b50 	.word	0x08005b50
 800476c:	20000000 	.word	0x20000000

08004770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b08f      	sub	sp, #60	; 0x3c
 8004774:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004776:	2314      	movs	r3, #20
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800477c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800477e:	c313      	stmia	r3!, {r0, r1, r4}
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	4a29      	ldr	r2, [pc, #164]	; (800482c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004788:	ca13      	ldmia	r2!, {r0, r1, r4}
 800478a:	c313      	stmia	r3!, {r0, r1, r4}
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	2300      	movs	r3, #0
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
 8004798:	2300      	movs	r3, #0
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	220c      	movs	r2, #12
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d002      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x4a>
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d003      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x50>
 80047b8:	e02d      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047be:	e02d      	b.n	800481c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	0c9b      	lsrs	r3, r3, #18
 80047c4:	220f      	movs	r2, #15
 80047c6:	4013      	ands	r3, r2
 80047c8:	2214      	movs	r2, #20
 80047ca:	18ba      	adds	r2, r7, r2
 80047cc:	5cd3      	ldrb	r3, [r2, r3]
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	220f      	movs	r2, #15
 80047d6:	4013      	ands	r3, r2
 80047d8:	1d3a      	adds	r2, r7, #4
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	4013      	ands	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047ea:	4812      	ldr	r0, [pc, #72]	; (8004834 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ec:	f7fb fc8c 	bl	8000108 <__udivsi3>
 80047f0:	0003      	movs	r3, r0
 80047f2:	001a      	movs	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	4353      	muls	r3, r2
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	e009      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047fe:	000a      	movs	r2, r1
 8004800:	0152      	lsls	r2, r2, #5
 8004802:	1a52      	subs	r2, r2, r1
 8004804:	0193      	lsls	r3, r2, #6
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	185b      	adds	r3, r3, r1
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004814:	e002      	b.n	800481c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800481a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b00f      	add	sp, #60	; 0x3c
 8004824:	bd90      	pop	{r4, r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	080059e0 	.word	0x080059e0
 800482c:	080059f0 	.word	0x080059f0
 8004830:	40021000 	.word	0x40021000
 8004834:	007a1200 	.word	0x007a1200

08004838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e042      	b.n	80048d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	223d      	movs	r2, #61	; 0x3d
 800484e:	5c9b      	ldrb	r3, [r3, r2]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	223c      	movs	r2, #60	; 0x3c
 800485a:	2100      	movs	r1, #0
 800485c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7fe f889 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223d      	movs	r2, #61	; 0x3d
 800486a:	2102      	movs	r1, #2
 800486c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3304      	adds	r3, #4
 8004876:	0019      	movs	r1, r3
 8004878:	0010      	movs	r0, r2
 800487a:	f000 fc41 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2246      	movs	r2, #70	; 0x46
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	223e      	movs	r2, #62	; 0x3e
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	223f      	movs	r2, #63	; 0x3f
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2241      	movs	r2, #65	; 0x41
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2242      	movs	r2, #66	; 0x42
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2243      	movs	r2, #67	; 0x43
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2244      	movs	r2, #68	; 0x44
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2245      	movs	r2, #69	; 0x45
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	223d      	movs	r2, #61	; 0x3d
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	223d      	movs	r2, #61	; 0x3d
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e030      	b.n	8004952 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223d      	movs	r2, #61	; 0x3d
 80048f4:	2102      	movs	r1, #2
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2101      	movs	r1, #1
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <HAL_TIM_Base_Start_IT+0x84>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x44>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <HAL_TIM_Base_Start_IT+0x88>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2207      	movs	r2, #7
 8004924:	4013      	ands	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d010      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	430a      	orrs	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493e:	e007      	b.n	8004950 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2101      	movs	r1, #1
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	40012c00 	.word	0x40012c00
 8004960:	40000400 	.word	0x40000400

08004964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e042      	b.n	80049fc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	223d      	movs	r2, #61	; 0x3d
 800497a:	5c9b      	ldrb	r3, [r3, r2]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	223c      	movs	r2, #60	; 0x3c
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0018      	movs	r0, r3
 800498e:	f000 f839 	bl	8004a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	223d      	movs	r2, #61	; 0x3d
 8004996:	2102      	movs	r1, #2
 8004998:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3304      	adds	r3, #4
 80049a2:	0019      	movs	r1, r3
 80049a4:	0010      	movs	r0, r2
 80049a6:	f000 fbab 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2246      	movs	r2, #70	; 0x46
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	223e      	movs	r2, #62	; 0x3e
 80049b6:	2101      	movs	r1, #1
 80049b8:	5499      	strb	r1, [r3, r2]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223f      	movs	r2, #63	; 0x3f
 80049be:	2101      	movs	r1, #1
 80049c0:	5499      	strb	r1, [r3, r2]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2240      	movs	r2, #64	; 0x40
 80049c6:	2101      	movs	r1, #1
 80049c8:	5499      	strb	r1, [r3, r2]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2241      	movs	r2, #65	; 0x41
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2242      	movs	r2, #66	; 0x42
 80049d6:	2101      	movs	r1, #1
 80049d8:	5499      	strb	r1, [r3, r2]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2243      	movs	r2, #67	; 0x43
 80049de:	2101      	movs	r1, #1
 80049e0:	5499      	strb	r1, [r3, r2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2244      	movs	r2, #68	; 0x44
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2245      	movs	r2, #69	; 0x45
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	223d      	movs	r2, #61	; 0x3d
 80049f6:	2101      	movs	r1, #1
 80049f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b002      	add	sp, #8
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d108      	bne.n	8004a36 <HAL_TIM_PWM_Start+0x22>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	223e      	movs	r2, #62	; 0x3e
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	1e5a      	subs	r2, r3, #1
 8004a30:	4193      	sbcs	r3, r2
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	e01f      	b.n	8004a76 <HAL_TIM_PWM_Start+0x62>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d108      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x3a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	223f      	movs	r2, #63	; 0x3f
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	4193      	sbcs	r3, r2
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e013      	b.n	8004a76 <HAL_TIM_PWM_Start+0x62>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d108      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x52>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	1e5a      	subs	r2, r3, #1
 8004a60:	4193      	sbcs	r3, r2
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e007      	b.n	8004a76 <HAL_TIM_PWM_Start+0x62>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2241      	movs	r2, #65	; 0x41
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	4193      	sbcs	r3, r2
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e064      	b.n	8004b48 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0x7a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223e      	movs	r2, #62	; 0x3e
 8004a88:	2102      	movs	r1, #2
 8004a8a:	5499      	strb	r1, [r3, r2]
 8004a8c:	e013      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xa2>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x8a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	223f      	movs	r2, #63	; 0x3f
 8004a98:	2102      	movs	r1, #2
 8004a9a:	5499      	strb	r1, [r3, r2]
 8004a9c:	e00b      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xa2>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0x9a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	5499      	strb	r1, [r3, r2]
 8004aac:	e003      	b.n	8004ab6 <HAL_TIM_PWM_Start+0xa2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2241      	movs	r2, #65	; 0x41
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fe04 	bl	80056cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <HAL_TIM_PWM_Start+0x13c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xce>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_TIM_PWM_Start+0x140>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xce>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_PWM_Start+0x144>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0xd2>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_TIM_PWM_Start+0xd4>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	0209      	lsls	r1, r1, #8
 8004afa:	430a      	orrs	r2, r1
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <HAL_TIM_PWM_Start+0x13c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_PWM_Start+0xfe>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <HAL_TIM_PWM_Start+0x148>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2207      	movs	r2, #7
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d010      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2101      	movs	r1, #1
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e007      	b.n	8004b46 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2101      	movs	r1, #1
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b004      	add	sp, #16
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800
 8004b5c:	40000400 	.word	0x40000400

08004b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d124      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d11d      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4252      	negs	r2, r2
 8004b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 fa94 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e007      	b.n	8004bba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 fa87 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f000 fa93 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d125      	bne.n	8004c1a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11e      	bne.n	8004c1a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2205      	movs	r2, #5
 8004be2:	4252      	negs	r2, r2
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	23c0      	movs	r3, #192	; 0xc0
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fa67 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004c02:	e007      	b.n	8004c14 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f000 fa5a 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 fa66 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d124      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d11d      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2209      	movs	r2, #9
 8004c3c:	4252      	negs	r2, r2
 8004c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2204      	movs	r2, #4
 8004c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 fa3b 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004c5a:	e007      	b.n	8004c6c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fa2e 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f000 fa3a 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d125      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2210      	movs	r2, #16
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d11e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2211      	movs	r2, #17
 8004c94:	4252      	negs	r2, r2
 8004c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	23c0      	movs	r3, #192	; 0xc0
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 fa0e 	bl	80050d0 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e007      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fa01 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 fa0d 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10f      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	4252      	negs	r2, r2
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fd fa1d 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2280      	movs	r2, #128	; 0x80
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d10f      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d108      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2281      	movs	r2, #129	; 0x81
 8004d1c:	4252      	negs	r2, r2
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f000 fdae 	bl	8005884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d10f      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d108      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2241      	movs	r2, #65	; 0x41
 8004d4a:	4252      	negs	r2, r2
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 f9cd 	bl	80050f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d10f      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b20      	cmp	r3, #32
 8004d70:	d108      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	4252      	negs	r2, r2
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fd78 	bl	8005874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2317      	movs	r3, #23
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	223c      	movs	r2, #60	; 0x3c
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x22>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0ad      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	223c      	movs	r2, #60	; 0x3c
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	d100      	bne.n	8004dbe <HAL_TIM_PWM_ConfigChannel+0x32>
 8004dbc:	e076      	b.n	8004eac <HAL_TIM_PWM_ConfigChannel+0x120>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b0c      	cmp	r3, #12
 8004dc2:	d900      	bls.n	8004dc6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004dc4:	e095      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d04e      	beq.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0xde>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d900      	bls.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004dd2:	e08e      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d021      	beq.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004de0:	e087      	b.n	8004ef2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f9f4 	bl	80051d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2108      	movs	r1, #8
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2104      	movs	r1, #4
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e06b      	b.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 fa51 	bl	80052d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	0109      	lsls	r1, r1, #4
 8004e40:	430a      	orrs	r2, r1
 8004e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4931      	ldr	r1, [pc, #196]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004e50:	400a      	ands	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6999      	ldr	r1, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	021a      	lsls	r2, r3, #8
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	619a      	str	r2, [r3, #24]
      break;
 8004e68:	e048      	b.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	0011      	movs	r1, r2
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 faac 	bl	80053d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2108      	movs	r1, #8
 8004e84:	430a      	orrs	r2, r1
 8004e86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2104      	movs	r1, #4
 8004e94:	438a      	bics	r2, r1
 8004e96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69d9      	ldr	r1, [r3, #28]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	61da      	str	r2, [r3, #28]
      break;
 8004eaa:	e027      	b.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fb0b 	bl	80054d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	0109      	lsls	r1, r1, #4
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	490f      	ldr	r1, [pc, #60]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69d9      	ldr	r1, [r3, #28]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	61da      	str	r2, [r3, #28]
      break;
 8004ef0:	e004      	b.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004ef2:	2317      	movs	r3, #23
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
      break;
 8004efa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	223c      	movs	r2, #60	; 0x3c
 8004f00:	2100      	movs	r1, #0
 8004f02:	5499      	strb	r1, [r3, r2]

  return status;
 8004f04:	2317      	movs	r3, #23
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b006      	add	sp, #24
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	fffffbff 	.word	0xfffffbff

08004f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	230f      	movs	r3, #15
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	223c      	movs	r2, #60	; 0x3c
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x20>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0bc      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x19a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	223c      	movs	r2, #60	; 0x3c
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	223d      	movs	r2, #61	; 0x3d
 8004f44:	2102      	movs	r1, #2
 8004f46:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2277      	movs	r2, #119	; 0x77
 8004f54:	4393      	bics	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a58      	ldr	r2, [pc, #352]	; (80050bc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	0192      	lsls	r2, r2, #6
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d040      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0xde>
 8004f74:	2280      	movs	r2, #128	; 0x80
 8004f76:	0192      	lsls	r2, r2, #6
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d900      	bls.n	8004f7e <HAL_TIM_ConfigClockSource+0x66>
 8004f7c:	e088      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	0152      	lsls	r2, r2, #5
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d100      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0x70>
 8004f86:	e088      	b.n	800509a <HAL_TIM_ConfigClockSource+0x182>
 8004f88:	2280      	movs	r2, #128	; 0x80
 8004f8a:	0152      	lsls	r2, r2, #5
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d900      	bls.n	8004f92 <HAL_TIM_ConfigClockSource+0x7a>
 8004f90:	e07e      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004f92:	2b70      	cmp	r3, #112	; 0x70
 8004f94:	d018      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xb0>
 8004f96:	d900      	bls.n	8004f9a <HAL_TIM_ConfigClockSource+0x82>
 8004f98:	e07a      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004f9a:	2b60      	cmp	r3, #96	; 0x60
 8004f9c:	d04f      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x126>
 8004f9e:	d900      	bls.n	8004fa2 <HAL_TIM_ConfigClockSource+0x8a>
 8004fa0:	e076      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004fa2:	2b50      	cmp	r3, #80	; 0x50
 8004fa4:	d03b      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x106>
 8004fa6:	d900      	bls.n	8004faa <HAL_TIM_ConfigClockSource+0x92>
 8004fa8:	e072      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004faa:	2b40      	cmp	r3, #64	; 0x40
 8004fac:	d057      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x146>
 8004fae:	d900      	bls.n	8004fb2 <HAL_TIM_ConfigClockSource+0x9a>
 8004fb0:	e06e      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d063      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x166>
 8004fb6:	d86b      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d060      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x166>
 8004fbc:	d868      	bhi.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d05d      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x166>
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d05b      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x166>
 8004fc6:	e063      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 fb58 	bl	800568c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2277      	movs	r2, #119	; 0x77
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	609a      	str	r2, [r3, #8]
      break;
 8004ff4:	e052      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6899      	ldr	r1, [r3, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f000 fb41 	bl	800568c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	01c9      	lsls	r1, r1, #7
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
      break;
 800501c:	e03e      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	001a      	movs	r2, r3
 800502c:	f000 fab4 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2150      	movs	r1, #80	; 0x50
 8005036:	0018      	movs	r0, r3
 8005038:	f000 fb0e 	bl	8005658 <TIM_ITRx_SetConfig>
      break;
 800503c:	e02e      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	001a      	movs	r2, r3
 800504c:	f000 fad2 	bl	80055f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2160      	movs	r1, #96	; 0x60
 8005056:	0018      	movs	r0, r3
 8005058:	f000 fafe 	bl	8005658 <TIM_ITRx_SetConfig>
      break;
 800505c:	e01e      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	001a      	movs	r2, r3
 800506c:	f000 fa94 	bl	8005598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	0018      	movs	r0, r3
 8005078:	f000 faee 	bl	8005658 <TIM_ITRx_SetConfig>
      break;
 800507c:	e00e      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0019      	movs	r1, r3
 8005088:	0010      	movs	r0, r2
 800508a:	f000 fae5 	bl	8005658 <TIM_ITRx_SetConfig>
      break;
 800508e:	e005      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
      break;
 8005098:	e000      	b.n	800509c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800509a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	223d      	movs	r2, #61	; 0x3d
 80050a0:	2101      	movs	r1, #1
 80050a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	223c      	movs	r2, #60	; 0x3c
 80050a8:	2100      	movs	r1, #0
 80050aa:	5499      	strb	r1, [r3, r2]

  return status;
 80050ac:	230f      	movs	r3, #15
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	781b      	ldrb	r3, [r3, #0]
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b004      	add	sp, #16
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	ffff00ff 	.word	0xffff00ff

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b002      	add	sp, #8
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b002      	add	sp, #8
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b002      	add	sp, #8
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2b      	ldr	r2, [pc, #172]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0x20>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2a      	ldr	r2, [pc, #168]	; (80051c4 <TIM_Base_SetConfig+0xc4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d108      	bne.n	8005132 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2270      	movs	r2, #112	; 0x70
 8005124:	4393      	bics	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00f      	beq.n	800515a <TIM_Base_SetConfig+0x5a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <TIM_Base_SetConfig+0xc4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00b      	beq.n	800515a <TIM_Base_SetConfig+0x5a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_Base_SetConfig+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d007      	beq.n	800515a <TIM_Base_SetConfig+0x5a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <TIM_Base_SetConfig+0xcc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d003      	beq.n	800515a <TIM_Base_SetConfig+0x5a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <TIM_Base_SetConfig+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d108      	bne.n	800516c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_Base_SetConfig+0xd4>)
 800515e:	4013      	ands	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	4393      	bics	r3, r2
 8005172:	001a      	movs	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0xaa>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a0b      	ldr	r2, [pc, #44]	; (80051cc <TIM_Base_SetConfig+0xcc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0xaa>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <TIM_Base_SetConfig+0xd0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d103      	bne.n	80051b2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	615a      	str	r2, [r3, #20]
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b004      	add	sp, #16
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40002000 	.word	0x40002000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	fffffcff 	.word	0xfffffcff

080051d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4393      	bics	r3, r2
 80051ea:	001a      	movs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2270      	movs	r2, #112	; 0x70
 8005206:	4393      	bics	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2203      	movs	r2, #3
 800520e:	4393      	bics	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2202      	movs	r2, #2
 8005220:	4393      	bics	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <TIM_OC1_SetConfig+0xe8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_OC1_SetConfig+0x6e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <TIM_OC1_SetConfig+0xec>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_OC1_SetConfig+0x6e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a21      	ldr	r2, [pc, #132]	; (80052c8 <TIM_OC1_SetConfig+0xf0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d10c      	bne.n	8005260 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2208      	movs	r2, #8
 800524a:	4393      	bics	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2204      	movs	r2, #4
 800525c:	4393      	bics	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC1_SetConfig+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC1_SetConfig+0xa0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC1_SetConfig+0xec>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC1_SetConfig+0xa0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <TIM_OC1_SetConfig+0xf0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d111      	bne.n	800529c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	4a14      	ldr	r2, [pc, #80]	; (80052cc <TIM_OC1_SetConfig+0xf4>)
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <TIM_OC1_SetConfig+0xf8>)
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b006      	add	sp, #24
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	fffffeff 	.word	0xfffffeff
 80052d0:	fffffdff 	.word	0xfffffdff

080052d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	2210      	movs	r2, #16
 80052e4:	4393      	bics	r3, r2
 80052e6:	001a      	movs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a2c      	ldr	r2, [pc, #176]	; (80053b4 <TIM_OC2_SetConfig+0xe0>)
 8005302:	4013      	ands	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a2b      	ldr	r2, [pc, #172]	; (80053b8 <TIM_OC2_SetConfig+0xe4>)
 800530a:	4013      	ands	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2220      	movs	r2, #32
 800531e:	4393      	bics	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <TIM_OC2_SetConfig+0xe8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d10d      	bne.n	8005352 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	4393      	bics	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	4393      	bics	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <TIM_OC2_SetConfig+0xe8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC2_SetConfig+0x96>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <TIM_OC2_SetConfig+0xec>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC2_SetConfig+0x96>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <TIM_OC2_SetConfig+0xf0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d113      	bne.n	8005392 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <TIM_OC2_SetConfig+0xf4>)
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <TIM_OC2_SetConfig+0xf8>)
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	46c0      	nop			; (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b006      	add	sp, #24
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	ffff8fff 	.word	0xffff8fff
 80053b8:	fffffcff 	.word	0xfffffcff
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800
 80053c8:	fffffbff 	.word	0xfffffbff
 80053cc:	fffff7ff 	.word	0xfffff7ff

080053d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4a33      	ldr	r2, [pc, #204]	; (80054ac <TIM_OC3_SetConfig+0xdc>)
 80053e0:	401a      	ands	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2270      	movs	r2, #112	; 0x70
 80053fc:	4393      	bics	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2203      	movs	r2, #3
 8005404:	4393      	bics	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <TIM_OC3_SetConfig+0xe0>)
 8005416:	4013      	ands	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a22      	ldr	r2, [pc, #136]	; (80054b4 <TIM_OC3_SetConfig+0xe4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10d      	bne.n	800544a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <TIM_OC3_SetConfig+0xe8>)
 8005432:	4013      	ands	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <TIM_OC3_SetConfig+0xec>)
 8005446:	4013      	ands	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <TIM_OC3_SetConfig+0xe4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_OC3_SetConfig+0x92>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1a      	ldr	r2, [pc, #104]	; (80054c0 <TIM_OC3_SetConfig+0xf0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC3_SetConfig+0x92>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <TIM_OC3_SetConfig+0xf4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d113      	bne.n	800548a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <TIM_OC3_SetConfig+0xf8>)
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC3_SetConfig+0xfc>)
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b006      	add	sp, #24
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	fffffeff 	.word	0xfffffeff
 80054b0:	fffffdff 	.word	0xfffffdff
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	fffff7ff 	.word	0xfffff7ff
 80054bc:	fffffbff 	.word	0xfffffbff
 80054c0:	40014400 	.word	0x40014400
 80054c4:	40014800 	.word	0x40014800
 80054c8:	ffffefff 	.word	0xffffefff
 80054cc:	ffffdfff 	.word	0xffffdfff

080054d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <TIM_OC4_SetConfig+0xa8>)
 80054e0:	401a      	ands	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a20      	ldr	r2, [pc, #128]	; (800557c <TIM_OC4_SetConfig+0xac>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <TIM_OC4_SetConfig+0xb0>)
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <TIM_OC4_SetConfig+0xb4>)
 8005518:	4013      	ands	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	031b      	lsls	r3, r3, #12
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <TIM_OC4_SetConfig+0xb8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_OC4_SetConfig+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a16      	ldr	r2, [pc, #88]	; (800558c <TIM_OC4_SetConfig+0xbc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x70>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <TIM_OC4_SetConfig+0xc0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC4_SetConfig+0xc4>)
 8005544:	4013      	ands	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b006      	add	sp, #24
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	ffffefff 	.word	0xffffefff
 800557c:	ffff8fff 	.word	0xffff8fff
 8005580:	fffffcff 	.word	0xfffffcff
 8005584:	ffffdfff 	.word	0xffffdfff
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800
 8005594:	ffffbfff 	.word	0xffffbfff

08005598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	2201      	movs	r2, #1
 80055b0:	4393      	bics	r3, r2
 80055b2:	001a      	movs	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	22f0      	movs	r2, #240	; 0xf0
 80055c2:	4393      	bics	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	220a      	movs	r2, #10
 80055d4:	4393      	bics	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b006      	add	sp, #24
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	2210      	movs	r2, #16
 8005606:	4393      	bics	r3, r2
 8005608:	001a      	movs	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <TIM_TI2_ConfigInputStage+0x60>)
 800561e:	4013      	ands	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	22a0      	movs	r2, #160	; 0xa0
 8005630:	4393      	bics	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	b006      	add	sp, #24
 8005650:	bd80      	pop	{r7, pc}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	ffff0fff 	.word	0xffff0fff

08005658 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2270      	movs	r2, #112	; 0x70
 800566c:	4393      	bics	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	2207      	movs	r2, #7
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b004      	add	sp, #16
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <TIM_ETR_SetConfig+0x3c>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b006      	add	sp, #24
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	ffff00ff 	.word	0xffff00ff

080056cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	221f      	movs	r2, #31
 80056dc:	4013      	ands	r3, r2
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	0013      	movs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	43d2      	mvns	r2, r2
 80056ee:	401a      	ands	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	211f      	movs	r1, #31
 80056fc:	400b      	ands	r3, r1
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4099      	lsls	r1, r3
 8005702:	000b      	movs	r3, r1
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	46bd      	mov	sp, r7
 800570e:	b006      	add	sp, #24
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	223c      	movs	r2, #60	; 0x3c
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e03c      	b.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	223c      	movs	r2, #60	; 0x3c
 8005730:	2101      	movs	r1, #1
 8005732:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	223d      	movs	r2, #61	; 0x3d
 8005738:	2102      	movs	r1, #2
 800573a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2270      	movs	r2, #112	; 0x70
 8005750:	4393      	bics	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0f      	ldr	r2, [pc, #60]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10c      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	4393      	bics	r3, r2
 8005780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4313      	orrs	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	223d      	movs	r2, #61	; 0x3d
 8005798:	2101      	movs	r1, #1
 800579a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223c      	movs	r2, #60	; 0x3c
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b004      	add	sp, #16
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400

080057b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	223c      	movs	r2, #60	; 0x3c
 80057ca:	5c9b      	ldrb	r3, [r3, r2]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e03e      	b.n	8005852 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	223c      	movs	r2, #60	; 0x3c
 80057d8:	2101      	movs	r1, #1
 80057da:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	22ff      	movs	r2, #255	; 0xff
 80057e0:	4393      	bics	r3, r2
 80057e2:	001a      	movs	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80057f0:	401a      	ands	r2, r3
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80057fe:	401a      	ands	r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800580c:	401a      	ands	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800581a:	401a      	ands	r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a11      	ldr	r2, [pc, #68]	; (800586c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005828:	401a      	ands	r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a0e      	ldr	r2, [pc, #56]	; (8005870 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8005836:	401a      	ands	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	223c      	movs	r2, #60	; 0x3c
 800584c:	2100      	movs	r1, #0
 800584e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b004      	add	sp, #16
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	fffffcff 	.word	0xfffffcff
 8005860:	fffffbff 	.word	0xfffffbff
 8005864:	fffff7ff 	.word	0xfffff7ff
 8005868:	ffffefff 	.word	0xffffefff
 800586c:	ffffdfff 	.word	0xffffdfff
 8005870:	ffffbfff 	.word	0xffffbfff

08005874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZdlPvj>:
 8005894:	b510      	push	{r4, lr}
 8005896:	f000 f801 	bl	800589c <_ZdlPv>
 800589a:	bd10      	pop	{r4, pc}

0800589c <_ZdlPv>:
 800589c:	b510      	push	{r4, lr}
 800589e:	f000 f825 	bl	80058ec <free>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	2600      	movs	r6, #0
 80058a8:	4d0c      	ldr	r5, [pc, #48]	; (80058dc <__libc_init_array+0x38>)
 80058aa:	4c0d      	ldr	r4, [pc, #52]	; (80058e0 <__libc_init_array+0x3c>)
 80058ac:	1b64      	subs	r4, r4, r5
 80058ae:	10a4      	asrs	r4, r4, #2
 80058b0:	42a6      	cmp	r6, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	2600      	movs	r6, #0
 80058b6:	f000 f887 	bl	80059c8 <_init>
 80058ba:	4d0a      	ldr	r5, [pc, #40]	; (80058e4 <__libc_init_array+0x40>)
 80058bc:	4c0a      	ldr	r4, [pc, #40]	; (80058e8 <__libc_init_array+0x44>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	42a6      	cmp	r6, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	00b3      	lsls	r3, r6, #2
 80058ca:	58eb      	ldr	r3, [r5, r3]
 80058cc:	4798      	blx	r3
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	00b3      	lsls	r3, r6, #2
 80058d4:	58eb      	ldr	r3, [r5, r3]
 80058d6:	4798      	blx	r3
 80058d8:	3601      	adds	r6, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08005b60 	.word	0x08005b60
 80058e0:	08005b60 	.word	0x08005b60
 80058e4:	08005b60 	.word	0x08005b60
 80058e8:	08005b68 	.word	0x08005b68

080058ec <free>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4b03      	ldr	r3, [pc, #12]	; (80058fc <free+0x10>)
 80058f0:	0001      	movs	r1, r0
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	f000 f80c 	bl	8005910 <_free_r>
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	2000000c 	.word	0x2000000c

08005900 <memset>:
 8005900:	0003      	movs	r3, r0
 8005902:	1882      	adds	r2, r0, r2
 8005904:	4293      	cmp	r3, r2
 8005906:	d100      	bne.n	800590a <memset+0xa>
 8005908:	4770      	bx	lr
 800590a:	7019      	strb	r1, [r3, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	e7f9      	b.n	8005904 <memset+0x4>

08005910 <_free_r>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	0005      	movs	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d010      	beq.n	800593a <_free_r+0x2a>
 8005918:	1f0c      	subs	r4, r1, #4
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	da00      	bge.n	8005922 <_free_r+0x12>
 8005920:	18e4      	adds	r4, r4, r3
 8005922:	0028      	movs	r0, r5
 8005924:	f000 f83e 	bl	80059a4 <__malloc_lock>
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <_free_r+0x90>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d105      	bne.n	800593c <_free_r+0x2c>
 8005930:	6063      	str	r3, [r4, #4]
 8005932:	6014      	str	r4, [r2, #0]
 8005934:	0028      	movs	r0, r5
 8005936:	f000 f83d 	bl	80059b4 <__malloc_unlock>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6821      	ldr	r1, [r4, #0]
 8005942:	1860      	adds	r0, r4, r1
 8005944:	4283      	cmp	r3, r0
 8005946:	d1f3      	bne.n	8005930 <_free_r+0x20>
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	1841      	adds	r1, r0, r1
 800594e:	6021      	str	r1, [r4, #0]
 8005950:	e7ee      	b.n	8005930 <_free_r+0x20>
 8005952:	001a      	movs	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <_free_r+0x4e>
 800595a:	42a3      	cmp	r3, r4
 800595c:	d9f9      	bls.n	8005952 <_free_r+0x42>
 800595e:	6811      	ldr	r1, [r2, #0]
 8005960:	1850      	adds	r0, r2, r1
 8005962:	42a0      	cmp	r0, r4
 8005964:	d10b      	bne.n	800597e <_free_r+0x6e>
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	1809      	adds	r1, r1, r0
 800596a:	1850      	adds	r0, r2, r1
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	4283      	cmp	r3, r0
 8005970:	d1e0      	bne.n	8005934 <_free_r+0x24>
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	1841      	adds	r1, r0, r1
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	6053      	str	r3, [r2, #4]
 800597c:	e7da      	b.n	8005934 <_free_r+0x24>
 800597e:	42a0      	cmp	r0, r4
 8005980:	d902      	bls.n	8005988 <_free_r+0x78>
 8005982:	230c      	movs	r3, #12
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	e7d5      	b.n	8005934 <_free_r+0x24>
 8005988:	6821      	ldr	r1, [r4, #0]
 800598a:	1860      	adds	r0, r4, r1
 800598c:	4283      	cmp	r3, r0
 800598e:	d103      	bne.n	8005998 <_free_r+0x88>
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	1841      	adds	r1, r0, r1
 8005996:	6021      	str	r1, [r4, #0]
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	6054      	str	r4, [r2, #4]
 800599c:	e7ca      	b.n	8005934 <_free_r+0x24>
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	20000224 	.word	0x20000224

080059a4 <__malloc_lock>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	4802      	ldr	r0, [pc, #8]	; (80059b0 <__malloc_lock+0xc>)
 80059a8:	f000 f80c 	bl	80059c4 <__retarget_lock_acquire_recursive>
 80059ac:	bd10      	pop	{r4, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	200003bc 	.word	0x200003bc

080059b4 <__malloc_unlock>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4802      	ldr	r0, [pc, #8]	; (80059c0 <__malloc_unlock+0xc>)
 80059b8:	f000 f805 	bl	80059c6 <__retarget_lock_release_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	200003bc 	.word	0x200003bc

080059c4 <__retarget_lock_acquire_recursive>:
 80059c4:	4770      	bx	lr

080059c6 <__retarget_lock_release_recursive>:
 80059c6:	4770      	bx	lr

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
