
Rufus_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007808  08007808  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007808  08007808  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007808  08007808  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000070  08007888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08007888  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee4c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cb  00000000  00000000  0002eee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000324b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00033340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c86  00000000  00000000  00034048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001201c  00000000  00000000  00045cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060360  00000000  00000000  00057cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b804a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  000b80a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007230 	.word	0x08007230

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007230 	.word	0x08007230

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb4f 	bl	8000aa0 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fad3 	bl	80009b8 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb41 	bl	8000aa0 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb37 	bl	8000aa0 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fae1 	bl	8000a08 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fad7 	bl	8000a08 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4646      	mov	r6, r8
 800046c:	46d6      	mov	lr, sl
 800046e:	464f      	mov	r7, r9
 8000470:	024d      	lsls	r5, r1, #9
 8000472:	0242      	lsls	r2, r0, #9
 8000474:	b5c0      	push	{r6, r7, lr}
 8000476:	0a52      	lsrs	r2, r2, #9
 8000478:	0a6e      	lsrs	r6, r5, #9
 800047a:	0047      	lsls	r7, r0, #1
 800047c:	46b0      	mov	r8, r6
 800047e:	0e3f      	lsrs	r7, r7, #24
 8000480:	004e      	lsls	r6, r1, #1
 8000482:	0fc4      	lsrs	r4, r0, #31
 8000484:	00d0      	lsls	r0, r2, #3
 8000486:	4694      	mov	ip, r2
 8000488:	003b      	movs	r3, r7
 800048a:	4682      	mov	sl, r0
 800048c:	0e36      	lsrs	r6, r6, #24
 800048e:	0fc9      	lsrs	r1, r1, #31
 8000490:	09ad      	lsrs	r5, r5, #6
 8000492:	428c      	cmp	r4, r1
 8000494:	d06d      	beq.n	8000572 <__aeabi_fadd+0x10a>
 8000496:	1bb8      	subs	r0, r7, r6
 8000498:	4681      	mov	r9, r0
 800049a:	2800      	cmp	r0, #0
 800049c:	dd4d      	ble.n	800053a <__aeabi_fadd+0xd2>
 800049e:	2e00      	cmp	r6, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fadd+0x3c>
 80004a2:	e088      	b.n	80005b6 <__aeabi_fadd+0x14e>
 80004a4:	2fff      	cmp	r7, #255	; 0xff
 80004a6:	d05a      	beq.n	800055e <__aeabi_fadd+0xf6>
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	04db      	lsls	r3, r3, #19
 80004ac:	431d      	orrs	r5, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2201      	movs	r2, #1
 80004b2:	2b1b      	cmp	r3, #27
 80004b4:	dc0a      	bgt.n	80004cc <__aeabi_fadd+0x64>
 80004b6:	002b      	movs	r3, r5
 80004b8:	464a      	mov	r2, r9
 80004ba:	4649      	mov	r1, r9
 80004bc:	40d3      	lsrs	r3, r2
 80004be:	2220      	movs	r2, #32
 80004c0:	1a52      	subs	r2, r2, r1
 80004c2:	4095      	lsls	r5, r2
 80004c4:	002a      	movs	r2, r5
 80004c6:	1e55      	subs	r5, r2, #1
 80004c8:	41aa      	sbcs	r2, r5
 80004ca:	431a      	orrs	r2, r3
 80004cc:	4653      	mov	r3, sl
 80004ce:	1a9a      	subs	r2, r3, r2
 80004d0:	0153      	lsls	r3, r2, #5
 80004d2:	d400      	bmi.n	80004d6 <__aeabi_fadd+0x6e>
 80004d4:	e0b9      	b.n	800064a <__aeabi_fadd+0x1e2>
 80004d6:	0192      	lsls	r2, r2, #6
 80004d8:	0996      	lsrs	r6, r2, #6
 80004da:	0030      	movs	r0, r6
 80004dc:	f001 fc68 	bl	8001db0 <__clzsi2>
 80004e0:	3805      	subs	r0, #5
 80004e2:	4086      	lsls	r6, r0
 80004e4:	4287      	cmp	r7, r0
 80004e6:	dd00      	ble.n	80004ea <__aeabi_fadd+0x82>
 80004e8:	e0d4      	b.n	8000694 <__aeabi_fadd+0x22c>
 80004ea:	0033      	movs	r3, r6
 80004ec:	1bc7      	subs	r7, r0, r7
 80004ee:	2020      	movs	r0, #32
 80004f0:	3701      	adds	r7, #1
 80004f2:	40fb      	lsrs	r3, r7
 80004f4:	1bc7      	subs	r7, r0, r7
 80004f6:	40be      	lsls	r6, r7
 80004f8:	0032      	movs	r2, r6
 80004fa:	1e56      	subs	r6, r2, #1
 80004fc:	41b2      	sbcs	r2, r6
 80004fe:	2700      	movs	r7, #0
 8000500:	431a      	orrs	r2, r3
 8000502:	0753      	lsls	r3, r2, #29
 8000504:	d004      	beq.n	8000510 <__aeabi_fadd+0xa8>
 8000506:	230f      	movs	r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	2b04      	cmp	r3, #4
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0xa8>
 800050e:	3204      	adds	r2, #4
 8000510:	0153      	lsls	r3, r2, #5
 8000512:	d400      	bmi.n	8000516 <__aeabi_fadd+0xae>
 8000514:	e09c      	b.n	8000650 <__aeabi_fadd+0x1e8>
 8000516:	1c7b      	adds	r3, r7, #1
 8000518:	2ffe      	cmp	r7, #254	; 0xfe
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0xb6>
 800051c:	e09a      	b.n	8000654 <__aeabi_fadd+0x1ec>
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	0a52      	lsrs	r2, r2, #9
 8000522:	4694      	mov	ip, r2
 8000524:	b2db      	uxtb	r3, r3
 8000526:	05d8      	lsls	r0, r3, #23
 8000528:	4663      	mov	r3, ip
 800052a:	07e4      	lsls	r4, r4, #31
 800052c:	4318      	orrs	r0, r3
 800052e:	4320      	orrs	r0, r4
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	2800      	cmp	r0, #0
 800053c:	d049      	beq.n	80005d2 <__aeabi_fadd+0x16a>
 800053e:	1bf3      	subs	r3, r6, r7
 8000540:	2f00      	cmp	r7, #0
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0xde>
 8000544:	e0b6      	b.n	80006b4 <__aeabi_fadd+0x24c>
 8000546:	4652      	mov	r2, sl
 8000548:	2a00      	cmp	r2, #0
 800054a:	d060      	beq.n	800060e <__aeabi_fadd+0x1a6>
 800054c:	3b01      	subs	r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0xec>
 8000552:	e0fc      	b.n	800074e <__aeabi_fadd+0x2e6>
 8000554:	2eff      	cmp	r6, #255	; 0xff
 8000556:	d000      	beq.n	800055a <__aeabi_fadd+0xf2>
 8000558:	e0b4      	b.n	80006c4 <__aeabi_fadd+0x25c>
 800055a:	000c      	movs	r4, r1
 800055c:	4642      	mov	r2, r8
 800055e:	2a00      	cmp	r2, #0
 8000560:	d078      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 8000562:	2080      	movs	r0, #128	; 0x80
 8000564:	03c0      	lsls	r0, r0, #15
 8000566:	4310      	orrs	r0, r2
 8000568:	0242      	lsls	r2, r0, #9
 800056a:	0a53      	lsrs	r3, r2, #9
 800056c:	469c      	mov	ip, r3
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	e7d9      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000572:	1bb9      	subs	r1, r7, r6
 8000574:	2900      	cmp	r1, #0
 8000576:	dd71      	ble.n	800065c <__aeabi_fadd+0x1f4>
 8000578:	2e00      	cmp	r6, #0
 800057a:	d03f      	beq.n	80005fc <__aeabi_fadd+0x194>
 800057c:	2fff      	cmp	r7, #255	; 0xff
 800057e:	d0ee      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	04db      	lsls	r3, r3, #19
 8000584:	431d      	orrs	r5, r3
 8000586:	2201      	movs	r2, #1
 8000588:	291b      	cmp	r1, #27
 800058a:	dc07      	bgt.n	800059c <__aeabi_fadd+0x134>
 800058c:	002a      	movs	r2, r5
 800058e:	2320      	movs	r3, #32
 8000590:	40ca      	lsrs	r2, r1
 8000592:	1a59      	subs	r1, r3, r1
 8000594:	408d      	lsls	r5, r1
 8000596:	1e6b      	subs	r3, r5, #1
 8000598:	419d      	sbcs	r5, r3
 800059a:	432a      	orrs	r2, r5
 800059c:	4452      	add	r2, sl
 800059e:	0153      	lsls	r3, r2, #5
 80005a0:	d553      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 80005a2:	3701      	adds	r7, #1
 80005a4:	2fff      	cmp	r7, #255	; 0xff
 80005a6:	d055      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80005a8:	2301      	movs	r3, #1
 80005aa:	497b      	ldr	r1, [pc, #492]	; (8000798 <__aeabi_fadd+0x330>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	0852      	lsrs	r2, r2, #1
 80005b0:	400a      	ands	r2, r1
 80005b2:	431a      	orrs	r2, r3
 80005b4:	e7a5      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d02c      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 80005ba:	2301      	movs	r3, #1
 80005bc:	425b      	negs	r3, r3
 80005be:	469c      	mov	ip, r3
 80005c0:	44e1      	add	r9, ip
 80005c2:	464b      	mov	r3, r9
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x162>
 80005c8:	e0ad      	b.n	8000726 <__aeabi_fadd+0x2be>
 80005ca:	2fff      	cmp	r7, #255	; 0xff
 80005cc:	d000      	beq.n	80005d0 <__aeabi_fadd+0x168>
 80005ce:	e76e      	b.n	80004ae <__aeabi_fadd+0x46>
 80005d0:	e7c5      	b.n	800055e <__aeabi_fadd+0xf6>
 80005d2:	20fe      	movs	r0, #254	; 0xfe
 80005d4:	1c7e      	adds	r6, r7, #1
 80005d6:	4230      	tst	r0, r6
 80005d8:	d160      	bne.n	800069c <__aeabi_fadd+0x234>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fadd+0x178>
 80005de:	e093      	b.n	8000708 <__aeabi_fadd+0x2a0>
 80005e0:	4652      	mov	r2, sl
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x180>
 80005e6:	e0b6      	b.n	8000756 <__aeabi_fadd+0x2ee>
 80005e8:	2d00      	cmp	r5, #0
 80005ea:	d09c      	beq.n	8000526 <__aeabi_fadd+0xbe>
 80005ec:	1b52      	subs	r2, r2, r5
 80005ee:	0150      	lsls	r0, r2, #5
 80005f0:	d400      	bmi.n	80005f4 <__aeabi_fadd+0x18c>
 80005f2:	e0c3      	b.n	800077c <__aeabi_fadd+0x314>
 80005f4:	4653      	mov	r3, sl
 80005f6:	000c      	movs	r4, r1
 80005f8:	1aea      	subs	r2, r5, r3
 80005fa:	e782      	b.n	8000502 <__aeabi_fadd+0x9a>
 80005fc:	2d00      	cmp	r5, #0
 80005fe:	d009      	beq.n	8000614 <__aeabi_fadd+0x1ac>
 8000600:	3901      	subs	r1, #1
 8000602:	2900      	cmp	r1, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_fadd+0x1a0>
 8000606:	e08b      	b.n	8000720 <__aeabi_fadd+0x2b8>
 8000608:	2fff      	cmp	r7, #255	; 0xff
 800060a:	d1bc      	bne.n	8000586 <__aeabi_fadd+0x11e>
 800060c:	e7a7      	b.n	800055e <__aeabi_fadd+0xf6>
 800060e:	000c      	movs	r4, r1
 8000610:	4642      	mov	r2, r8
 8000612:	0037      	movs	r7, r6
 8000614:	2fff      	cmp	r7, #255	; 0xff
 8000616:	d0a2      	beq.n	800055e <__aeabi_fadd+0xf6>
 8000618:	0252      	lsls	r2, r2, #9
 800061a:	0a53      	lsrs	r3, r2, #9
 800061c:	469c      	mov	ip, r3
 800061e:	b2fb      	uxtb	r3, r7
 8000620:	e781      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000622:	21fe      	movs	r1, #254	; 0xfe
 8000624:	3701      	adds	r7, #1
 8000626:	4239      	tst	r1, r7
 8000628:	d165      	bne.n	80006f6 <__aeabi_fadd+0x28e>
 800062a:	2b00      	cmp	r3, #0
 800062c:	d17e      	bne.n	800072c <__aeabi_fadd+0x2c4>
 800062e:	2800      	cmp	r0, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fadd+0x1cc>
 8000632:	e0aa      	b.n	800078a <__aeabi_fadd+0x322>
 8000634:	2d00      	cmp	r5, #0
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0x1d2>
 8000638:	e775      	b.n	8000526 <__aeabi_fadd+0xbe>
 800063a:	002a      	movs	r2, r5
 800063c:	4452      	add	r2, sl
 800063e:	2700      	movs	r7, #0
 8000640:	0153      	lsls	r3, r2, #5
 8000642:	d502      	bpl.n	800064a <__aeabi_fadd+0x1e2>
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <__aeabi_fadd+0x334>)
 8000646:	3701      	adds	r7, #1
 8000648:	401a      	ands	r2, r3
 800064a:	0753      	lsls	r3, r2, #29
 800064c:	d000      	beq.n	8000650 <__aeabi_fadd+0x1e8>
 800064e:	e75a      	b.n	8000506 <__aeabi_fadd+0x9e>
 8000650:	08d2      	lsrs	r2, r2, #3
 8000652:	e7df      	b.n	8000614 <__aeabi_fadd+0x1ac>
 8000654:	2200      	movs	r2, #0
 8000656:	23ff      	movs	r3, #255	; 0xff
 8000658:	4694      	mov	ip, r2
 800065a:	e764      	b.n	8000526 <__aeabi_fadd+0xbe>
 800065c:	2900      	cmp	r1, #0
 800065e:	d0e0      	beq.n	8000622 <__aeabi_fadd+0x1ba>
 8000660:	1bf3      	subs	r3, r6, r7
 8000662:	2f00      	cmp	r7, #0
 8000664:	d03e      	beq.n	80006e4 <__aeabi_fadd+0x27c>
 8000666:	2eff      	cmp	r6, #255	; 0xff
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x204>
 800066a:	e777      	b.n	800055c <__aeabi_fadd+0xf4>
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0001      	movs	r1, r0
 8000670:	04d2      	lsls	r2, r2, #19
 8000672:	4311      	orrs	r1, r2
 8000674:	468a      	mov	sl, r1
 8000676:	2201      	movs	r2, #1
 8000678:	2b1b      	cmp	r3, #27
 800067a:	dc08      	bgt.n	800068e <__aeabi_fadd+0x226>
 800067c:	4652      	mov	r2, sl
 800067e:	2120      	movs	r1, #32
 8000680:	4650      	mov	r0, sl
 8000682:	40da      	lsrs	r2, r3
 8000684:	1acb      	subs	r3, r1, r3
 8000686:	4098      	lsls	r0, r3
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	4302      	orrs	r2, r0
 800068e:	0037      	movs	r7, r6
 8000690:	1952      	adds	r2, r2, r5
 8000692:	e784      	b.n	800059e <__aeabi_fadd+0x136>
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <__aeabi_fadd+0x334>)
 8000696:	1a3f      	subs	r7, r7, r0
 8000698:	4032      	ands	r2, r6
 800069a:	e732      	b.n	8000502 <__aeabi_fadd+0x9a>
 800069c:	4653      	mov	r3, sl
 800069e:	1b5e      	subs	r6, r3, r5
 80006a0:	0173      	lsls	r3, r6, #5
 80006a2:	d42d      	bmi.n	8000700 <__aeabi_fadd+0x298>
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x242>
 80006a8:	e717      	b.n	80004da <__aeabi_fadd+0x72>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2400      	movs	r4, #0
 80006ae:	2300      	movs	r3, #0
 80006b0:	4694      	mov	ip, r2
 80006b2:	e738      	b.n	8000526 <__aeabi_fadd+0xbe>
 80006b4:	2eff      	cmp	r6, #255	; 0xff
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x252>
 80006b8:	e74f      	b.n	800055a <__aeabi_fadd+0xf2>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	4650      	mov	r0, sl
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4310      	orrs	r0, r2
 80006c2:	4682      	mov	sl, r0
 80006c4:	2201      	movs	r2, #1
 80006c6:	2b1b      	cmp	r3, #27
 80006c8:	dc08      	bgt.n	80006dc <__aeabi_fadd+0x274>
 80006ca:	4652      	mov	r2, sl
 80006cc:	2420      	movs	r4, #32
 80006ce:	4650      	mov	r0, sl
 80006d0:	40da      	lsrs	r2, r3
 80006d2:	1ae3      	subs	r3, r4, r3
 80006d4:	4098      	lsls	r0, r3
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	4302      	orrs	r2, r0
 80006dc:	000c      	movs	r4, r1
 80006de:	0037      	movs	r7, r6
 80006e0:	1aaa      	subs	r2, r5, r2
 80006e2:	e6f5      	b.n	80004d0 <__aeabi_fadd+0x68>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d093      	beq.n	8000610 <__aeabi_fadd+0x1a8>
 80006e8:	3b01      	subs	r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d04f      	beq.n	800078e <__aeabi_fadd+0x326>
 80006ee:	2eff      	cmp	r6, #255	; 0xff
 80006f0:	d1c1      	bne.n	8000676 <__aeabi_fadd+0x20e>
 80006f2:	4642      	mov	r2, r8
 80006f4:	e733      	b.n	800055e <__aeabi_fadd+0xf6>
 80006f6:	2fff      	cmp	r7, #255	; 0xff
 80006f8:	d0ac      	beq.n	8000654 <__aeabi_fadd+0x1ec>
 80006fa:	4455      	add	r5, sl
 80006fc:	086a      	lsrs	r2, r5, #1
 80006fe:	e7a4      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000700:	4653      	mov	r3, sl
 8000702:	000c      	movs	r4, r1
 8000704:	1aee      	subs	r6, r5, r3
 8000706:	e6e8      	b.n	80004da <__aeabi_fadd+0x72>
 8000708:	4653      	mov	r3, sl
 800070a:	2b00      	cmp	r3, #0
 800070c:	d128      	bne.n	8000760 <__aeabi_fadd+0x2f8>
 800070e:	2d00      	cmp	r5, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fadd+0x2ac>
 8000712:	e722      	b.n	800055a <__aeabi_fadd+0xf2>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	03db      	lsls	r3, r3, #15
 8000718:	469c      	mov	ip, r3
 800071a:	2400      	movs	r4, #0
 800071c:	23ff      	movs	r3, #255	; 0xff
 800071e:	e702      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000720:	002a      	movs	r2, r5
 8000722:	4452      	add	r2, sl
 8000724:	e73b      	b.n	800059e <__aeabi_fadd+0x136>
 8000726:	4653      	mov	r3, sl
 8000728:	1b5a      	subs	r2, r3, r5
 800072a:	e6d1      	b.n	80004d0 <__aeabi_fadd+0x68>
 800072c:	2800      	cmp	r0, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0x2ca>
 8000730:	e714      	b.n	800055c <__aeabi_fadd+0xf4>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x2d0>
 8000736:	e712      	b.n	800055e <__aeabi_fadd+0xf6>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	421a      	tst	r2, r3
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x2da>
 8000740:	e70d      	b.n	800055e <__aeabi_fadd+0xf6>
 8000742:	4641      	mov	r1, r8
 8000744:	4219      	tst	r1, r3
 8000746:	d000      	beq.n	800074a <__aeabi_fadd+0x2e2>
 8000748:	e709      	b.n	800055e <__aeabi_fadd+0xf6>
 800074a:	4642      	mov	r2, r8
 800074c:	e707      	b.n	800055e <__aeabi_fadd+0xf6>
 800074e:	000c      	movs	r4, r1
 8000750:	0037      	movs	r7, r6
 8000752:	1aaa      	subs	r2, r5, r2
 8000754:	e6bc      	b.n	80004d0 <__aeabi_fadd+0x68>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d013      	beq.n	8000782 <__aeabi_fadd+0x31a>
 800075a:	000c      	movs	r4, r1
 800075c:	46c4      	mov	ip, r8
 800075e:	e6e2      	b.n	8000526 <__aeabi_fadd+0xbe>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2fe>
 8000764:	e6fb      	b.n	800055e <__aeabi_fadd+0xf6>
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	03db      	lsls	r3, r3, #15
 800076a:	421a      	tst	r2, r3
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x308>
 800076e:	e6f6      	b.n	800055e <__aeabi_fadd+0xf6>
 8000770:	4640      	mov	r0, r8
 8000772:	4218      	tst	r0, r3
 8000774:	d000      	beq.n	8000778 <__aeabi_fadd+0x310>
 8000776:	e6f2      	b.n	800055e <__aeabi_fadd+0xf6>
 8000778:	000c      	movs	r4, r1
 800077a:	e6ef      	b.n	800055c <__aeabi_fadd+0xf4>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0x31a>
 8000780:	e763      	b.n	800064a <__aeabi_fadd+0x1e2>
 8000782:	2200      	movs	r2, #0
 8000784:	2400      	movs	r4, #0
 8000786:	4694      	mov	ip, r2
 8000788:	e6cd      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078a:	46c4      	mov	ip, r8
 800078c:	e6cb      	b.n	8000526 <__aeabi_fadd+0xbe>
 800078e:	002a      	movs	r2, r5
 8000790:	0037      	movs	r7, r6
 8000792:	4452      	add	r2, sl
 8000794:	e703      	b.n	800059e <__aeabi_fadd+0x136>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	7dffffff 	.word	0x7dffffff
 800079c:	fbffffff 	.word	0xfbffffff

080007a0 <__aeabi_fdiv>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	464f      	mov	r7, r9
 80007a4:	4646      	mov	r6, r8
 80007a6:	46d6      	mov	lr, sl
 80007a8:	0245      	lsls	r5, r0, #9
 80007aa:	b5c0      	push	{r6, r7, lr}
 80007ac:	0047      	lsls	r7, r0, #1
 80007ae:	1c0c      	adds	r4, r1, #0
 80007b0:	0a6d      	lsrs	r5, r5, #9
 80007b2:	0e3f      	lsrs	r7, r7, #24
 80007b4:	0fc6      	lsrs	r6, r0, #31
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d066      	beq.n	8000888 <__aeabi_fdiv+0xe8>
 80007ba:	2fff      	cmp	r7, #255	; 0xff
 80007bc:	d06c      	beq.n	8000898 <__aeabi_fdiv+0xf8>
 80007be:	2300      	movs	r3, #0
 80007c0:	00ea      	lsls	r2, r5, #3
 80007c2:	2580      	movs	r5, #128	; 0x80
 80007c4:	4699      	mov	r9, r3
 80007c6:	469a      	mov	sl, r3
 80007c8:	04ed      	lsls	r5, r5, #19
 80007ca:	4315      	orrs	r5, r2
 80007cc:	3f7f      	subs	r7, #127	; 0x7f
 80007ce:	0260      	lsls	r0, r4, #9
 80007d0:	0061      	lsls	r1, r4, #1
 80007d2:	0a43      	lsrs	r3, r0, #9
 80007d4:	4698      	mov	r8, r3
 80007d6:	0e09      	lsrs	r1, r1, #24
 80007d8:	0fe4      	lsrs	r4, r4, #31
 80007da:	2900      	cmp	r1, #0
 80007dc:	d048      	beq.n	8000870 <__aeabi_fdiv+0xd0>
 80007de:	29ff      	cmp	r1, #255	; 0xff
 80007e0:	d010      	beq.n	8000804 <__aeabi_fdiv+0x64>
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	00d8      	lsls	r0, r3, #3
 80007e6:	04d2      	lsls	r2, r2, #19
 80007e8:	4302      	orrs	r2, r0
 80007ea:	4690      	mov	r8, r2
 80007ec:	2000      	movs	r0, #0
 80007ee:	397f      	subs	r1, #127	; 0x7f
 80007f0:	464a      	mov	r2, r9
 80007f2:	0033      	movs	r3, r6
 80007f4:	1a7f      	subs	r7, r7, r1
 80007f6:	4302      	orrs	r2, r0
 80007f8:	496c      	ldr	r1, [pc, #432]	; (80009ac <__aeabi_fdiv+0x20c>)
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	588a      	ldr	r2, [r1, r2]
 80007fe:	4063      	eors	r3, r4
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4697      	mov	pc, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d16d      	bne.n	80008e4 <__aeabi_fdiv+0x144>
 8000808:	2002      	movs	r0, #2
 800080a:	3fff      	subs	r7, #255	; 0xff
 800080c:	e033      	b.n	8000876 <__aeabi_fdiv+0xd6>
 800080e:	2300      	movs	r3, #0
 8000810:	4698      	mov	r8, r3
 8000812:	0026      	movs	r6, r4
 8000814:	4645      	mov	r5, r8
 8000816:	4682      	mov	sl, r0
 8000818:	4653      	mov	r3, sl
 800081a:	2b02      	cmp	r3, #2
 800081c:	d100      	bne.n	8000820 <__aeabi_fdiv+0x80>
 800081e:	e07f      	b.n	8000920 <__aeabi_fdiv+0x180>
 8000820:	2b03      	cmp	r3, #3
 8000822:	d100      	bne.n	8000826 <__aeabi_fdiv+0x86>
 8000824:	e094      	b.n	8000950 <__aeabi_fdiv+0x1b0>
 8000826:	2b01      	cmp	r3, #1
 8000828:	d017      	beq.n	800085a <__aeabi_fdiv+0xba>
 800082a:	0038      	movs	r0, r7
 800082c:	307f      	adds	r0, #127	; 0x7f
 800082e:	2800      	cmp	r0, #0
 8000830:	dd5f      	ble.n	80008f2 <__aeabi_fdiv+0x152>
 8000832:	076b      	lsls	r3, r5, #29
 8000834:	d004      	beq.n	8000840 <__aeabi_fdiv+0xa0>
 8000836:	230f      	movs	r3, #15
 8000838:	402b      	ands	r3, r5
 800083a:	2b04      	cmp	r3, #4
 800083c:	d000      	beq.n	8000840 <__aeabi_fdiv+0xa0>
 800083e:	3504      	adds	r5, #4
 8000840:	012b      	lsls	r3, r5, #4
 8000842:	d503      	bpl.n	800084c <__aeabi_fdiv+0xac>
 8000844:	0038      	movs	r0, r7
 8000846:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <__aeabi_fdiv+0x210>)
 8000848:	3080      	adds	r0, #128	; 0x80
 800084a:	401d      	ands	r5, r3
 800084c:	28fe      	cmp	r0, #254	; 0xfe
 800084e:	dc67      	bgt.n	8000920 <__aeabi_fdiv+0x180>
 8000850:	01ad      	lsls	r5, r5, #6
 8000852:	0a6d      	lsrs	r5, r5, #9
 8000854:	b2c0      	uxtb	r0, r0
 8000856:	e002      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000858:	001e      	movs	r6, r3
 800085a:	2000      	movs	r0, #0
 800085c:	2500      	movs	r5, #0
 800085e:	05c0      	lsls	r0, r0, #23
 8000860:	4328      	orrs	r0, r5
 8000862:	07f6      	lsls	r6, r6, #31
 8000864:	4330      	orrs	r0, r6
 8000866:	bce0      	pop	{r5, r6, r7}
 8000868:	46ba      	mov	sl, r7
 800086a:	46b1      	mov	r9, r6
 800086c:	46a8      	mov	r8, r5
 800086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000870:	2b00      	cmp	r3, #0
 8000872:	d12b      	bne.n	80008cc <__aeabi_fdiv+0x12c>
 8000874:	2001      	movs	r0, #1
 8000876:	464a      	mov	r2, r9
 8000878:	0033      	movs	r3, r6
 800087a:	494e      	ldr	r1, [pc, #312]	; (80009b4 <__aeabi_fdiv+0x214>)
 800087c:	4302      	orrs	r2, r0
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	588a      	ldr	r2, [r1, r2]
 8000882:	4063      	eors	r3, r4
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4697      	mov	pc, r2
 8000888:	2d00      	cmp	r5, #0
 800088a:	d113      	bne.n	80008b4 <__aeabi_fdiv+0x114>
 800088c:	2304      	movs	r3, #4
 800088e:	4699      	mov	r9, r3
 8000890:	3b03      	subs	r3, #3
 8000892:	2700      	movs	r7, #0
 8000894:	469a      	mov	sl, r3
 8000896:	e79a      	b.n	80007ce <__aeabi_fdiv+0x2e>
 8000898:	2d00      	cmp	r5, #0
 800089a:	d105      	bne.n	80008a8 <__aeabi_fdiv+0x108>
 800089c:	2308      	movs	r3, #8
 800089e:	4699      	mov	r9, r3
 80008a0:	3b06      	subs	r3, #6
 80008a2:	27ff      	movs	r7, #255	; 0xff
 80008a4:	469a      	mov	sl, r3
 80008a6:	e792      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008a8:	230c      	movs	r3, #12
 80008aa:	4699      	mov	r9, r3
 80008ac:	3b09      	subs	r3, #9
 80008ae:	27ff      	movs	r7, #255	; 0xff
 80008b0:	469a      	mov	sl, r3
 80008b2:	e78c      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008b4:	0028      	movs	r0, r5
 80008b6:	f001 fa7b 	bl	8001db0 <__clzsi2>
 80008ba:	2776      	movs	r7, #118	; 0x76
 80008bc:	1f43      	subs	r3, r0, #5
 80008be:	409d      	lsls	r5, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	427f      	negs	r7, r7
 80008c4:	4699      	mov	r9, r3
 80008c6:	469a      	mov	sl, r3
 80008c8:	1a3f      	subs	r7, r7, r0
 80008ca:	e780      	b.n	80007ce <__aeabi_fdiv+0x2e>
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fa6f 	bl	8001db0 <__clzsi2>
 80008d2:	4642      	mov	r2, r8
 80008d4:	1f43      	subs	r3, r0, #5
 80008d6:	2176      	movs	r1, #118	; 0x76
 80008d8:	409a      	lsls	r2, r3
 80008da:	4249      	negs	r1, r1
 80008dc:	1a09      	subs	r1, r1, r0
 80008de:	4690      	mov	r8, r2
 80008e0:	2000      	movs	r0, #0
 80008e2:	e785      	b.n	80007f0 <__aeabi_fdiv+0x50>
 80008e4:	21ff      	movs	r1, #255	; 0xff
 80008e6:	2003      	movs	r0, #3
 80008e8:	e782      	b.n	80007f0 <__aeabi_fdiv+0x50>
 80008ea:	001e      	movs	r6, r3
 80008ec:	20ff      	movs	r0, #255	; 0xff
 80008ee:	2500      	movs	r5, #0
 80008f0:	e7b5      	b.n	800085e <__aeabi_fdiv+0xbe>
 80008f2:	2301      	movs	r3, #1
 80008f4:	1a1b      	subs	r3, r3, r0
 80008f6:	2b1b      	cmp	r3, #27
 80008f8:	dcaf      	bgt.n	800085a <__aeabi_fdiv+0xba>
 80008fa:	379e      	adds	r7, #158	; 0x9e
 80008fc:	0029      	movs	r1, r5
 80008fe:	40bd      	lsls	r5, r7
 8000900:	40d9      	lsrs	r1, r3
 8000902:	1e6a      	subs	r2, r5, #1
 8000904:	4195      	sbcs	r5, r2
 8000906:	430d      	orrs	r5, r1
 8000908:	076b      	lsls	r3, r5, #29
 800090a:	d004      	beq.n	8000916 <__aeabi_fdiv+0x176>
 800090c:	230f      	movs	r3, #15
 800090e:	402b      	ands	r3, r5
 8000910:	2b04      	cmp	r3, #4
 8000912:	d000      	beq.n	8000916 <__aeabi_fdiv+0x176>
 8000914:	3504      	adds	r5, #4
 8000916:	016b      	lsls	r3, r5, #5
 8000918:	d544      	bpl.n	80009a4 <__aeabi_fdiv+0x204>
 800091a:	2001      	movs	r0, #1
 800091c:	2500      	movs	r5, #0
 800091e:	e79e      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000920:	20ff      	movs	r0, #255	; 0xff
 8000922:	2500      	movs	r5, #0
 8000924:	e79b      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000926:	2580      	movs	r5, #128	; 0x80
 8000928:	2600      	movs	r6, #0
 800092a:	20ff      	movs	r0, #255	; 0xff
 800092c:	03ed      	lsls	r5, r5, #15
 800092e:	e796      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000930:	2300      	movs	r3, #0
 8000932:	4698      	mov	r8, r3
 8000934:	2080      	movs	r0, #128	; 0x80
 8000936:	03c0      	lsls	r0, r0, #15
 8000938:	4205      	tst	r5, r0
 800093a:	d009      	beq.n	8000950 <__aeabi_fdiv+0x1b0>
 800093c:	4643      	mov	r3, r8
 800093e:	4203      	tst	r3, r0
 8000940:	d106      	bne.n	8000950 <__aeabi_fdiv+0x1b0>
 8000942:	4645      	mov	r5, r8
 8000944:	4305      	orrs	r5, r0
 8000946:	026d      	lsls	r5, r5, #9
 8000948:	0026      	movs	r6, r4
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	e786      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000950:	2080      	movs	r0, #128	; 0x80
 8000952:	03c0      	lsls	r0, r0, #15
 8000954:	4305      	orrs	r5, r0
 8000956:	026d      	lsls	r5, r5, #9
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	0a6d      	lsrs	r5, r5, #9
 800095c:	e77f      	b.n	800085e <__aeabi_fdiv+0xbe>
 800095e:	4641      	mov	r1, r8
 8000960:	016a      	lsls	r2, r5, #5
 8000962:	0148      	lsls	r0, r1, #5
 8000964:	4282      	cmp	r2, r0
 8000966:	d219      	bcs.n	800099c <__aeabi_fdiv+0x1fc>
 8000968:	211b      	movs	r1, #27
 800096a:	2500      	movs	r5, #0
 800096c:	3f01      	subs	r7, #1
 800096e:	2601      	movs	r6, #1
 8000970:	0014      	movs	r4, r2
 8000972:	006d      	lsls	r5, r5, #1
 8000974:	0052      	lsls	r2, r2, #1
 8000976:	2c00      	cmp	r4, #0
 8000978:	db01      	blt.n	800097e <__aeabi_fdiv+0x1de>
 800097a:	4290      	cmp	r0, r2
 800097c:	d801      	bhi.n	8000982 <__aeabi_fdiv+0x1e2>
 800097e:	1a12      	subs	r2, r2, r0
 8000980:	4335      	orrs	r5, r6
 8000982:	3901      	subs	r1, #1
 8000984:	2900      	cmp	r1, #0
 8000986:	d1f3      	bne.n	8000970 <__aeabi_fdiv+0x1d0>
 8000988:	1e50      	subs	r0, r2, #1
 800098a:	4182      	sbcs	r2, r0
 800098c:	0038      	movs	r0, r7
 800098e:	307f      	adds	r0, #127	; 0x7f
 8000990:	001e      	movs	r6, r3
 8000992:	4315      	orrs	r5, r2
 8000994:	2800      	cmp	r0, #0
 8000996:	dd00      	ble.n	800099a <__aeabi_fdiv+0x1fa>
 8000998:	e74b      	b.n	8000832 <__aeabi_fdiv+0x92>
 800099a:	e7aa      	b.n	80008f2 <__aeabi_fdiv+0x152>
 800099c:	211a      	movs	r1, #26
 800099e:	2501      	movs	r5, #1
 80009a0:	1a12      	subs	r2, r2, r0
 80009a2:	e7e4      	b.n	800096e <__aeabi_fdiv+0x1ce>
 80009a4:	01ad      	lsls	r5, r5, #6
 80009a6:	2000      	movs	r0, #0
 80009a8:	0a6d      	lsrs	r5, r5, #9
 80009aa:	e758      	b.n	800085e <__aeabi_fdiv+0xbe>
 80009ac:	08007604 	.word	0x08007604
 80009b0:	f7ffffff 	.word	0xf7ffffff
 80009b4:	08007644 	.word	0x08007644

080009b8 <__eqsf2>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	0042      	lsls	r2, r0, #1
 80009bc:	024e      	lsls	r6, r1, #9
 80009be:	004c      	lsls	r4, r1, #1
 80009c0:	0245      	lsls	r5, r0, #9
 80009c2:	0a6d      	lsrs	r5, r5, #9
 80009c4:	0e12      	lsrs	r2, r2, #24
 80009c6:	0fc3      	lsrs	r3, r0, #31
 80009c8:	0a76      	lsrs	r6, r6, #9
 80009ca:	0e24      	lsrs	r4, r4, #24
 80009cc:	0fc9      	lsrs	r1, r1, #31
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d00f      	beq.n	80009f2 <__eqsf2+0x3a>
 80009d2:	2cff      	cmp	r4, #255	; 0xff
 80009d4:	d011      	beq.n	80009fa <__eqsf2+0x42>
 80009d6:	2001      	movs	r0, #1
 80009d8:	42a2      	cmp	r2, r4
 80009da:	d000      	beq.n	80009de <__eqsf2+0x26>
 80009dc:	bd70      	pop	{r4, r5, r6, pc}
 80009de:	42b5      	cmp	r5, r6
 80009e0:	d1fc      	bne.n	80009dc <__eqsf2+0x24>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d00d      	beq.n	8000a02 <__eqsf2+0x4a>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d1f8      	bne.n	80009dc <__eqsf2+0x24>
 80009ea:	0028      	movs	r0, r5
 80009ec:	1e45      	subs	r5, r0, #1
 80009ee:	41a8      	sbcs	r0, r5
 80009f0:	e7f4      	b.n	80009dc <__eqsf2+0x24>
 80009f2:	2001      	movs	r0, #1
 80009f4:	2d00      	cmp	r5, #0
 80009f6:	d1f1      	bne.n	80009dc <__eqsf2+0x24>
 80009f8:	e7eb      	b.n	80009d2 <__eqsf2+0x1a>
 80009fa:	2001      	movs	r0, #1
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	d1ed      	bne.n	80009dc <__eqsf2+0x24>
 8000a00:	e7e9      	b.n	80009d6 <__eqsf2+0x1e>
 8000a02:	2000      	movs	r0, #0
 8000a04:	e7ea      	b.n	80009dc <__eqsf2+0x24>
 8000a06:	46c0      	nop			; (mov r8, r8)

08000a08 <__gesf2>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	0042      	lsls	r2, r0, #1
 8000a0c:	0246      	lsls	r6, r0, #9
 8000a0e:	024d      	lsls	r5, r1, #9
 8000a10:	004c      	lsls	r4, r1, #1
 8000a12:	0fc3      	lsrs	r3, r0, #31
 8000a14:	0a76      	lsrs	r6, r6, #9
 8000a16:	0e12      	lsrs	r2, r2, #24
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e24      	lsrs	r4, r4, #24
 8000a1c:	0fc8      	lsrs	r0, r1, #31
 8000a1e:	2aff      	cmp	r2, #255	; 0xff
 8000a20:	d01f      	beq.n	8000a62 <__gesf2+0x5a>
 8000a22:	2cff      	cmp	r4, #255	; 0xff
 8000a24:	d010      	beq.n	8000a48 <__gesf2+0x40>
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d11f      	bne.n	8000a6a <__gesf2+0x62>
 8000a2a:	4271      	negs	r1, r6
 8000a2c:	4171      	adcs	r1, r6
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d101      	bne.n	8000a36 <__gesf2+0x2e>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d01e      	beq.n	8000a74 <__gesf2+0x6c>
 8000a36:	2900      	cmp	r1, #0
 8000a38:	d10e      	bne.n	8000a58 <__gesf2+0x50>
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	d01e      	beq.n	8000a7c <__gesf2+0x74>
 8000a3e:	2102      	movs	r1, #2
 8000a40:	1e58      	subs	r0, r3, #1
 8000a42:	4008      	ands	r0, r1
 8000a44:	3801      	subs	r0, #1
 8000a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d126      	bne.n	8000a9a <__gesf2+0x92>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f4      	bne.n	8000a3a <__gesf2+0x32>
 8000a50:	4271      	negs	r1, r6
 8000a52:	4171      	adcs	r1, r6
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d0f0      	beq.n	8000a3a <__gesf2+0x32>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d1f4      	bne.n	8000a46 <__gesf2+0x3e>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	4240      	negs	r0, r0
 8000a60:	e7f1      	b.n	8000a46 <__gesf2+0x3e>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d119      	bne.n	8000a9a <__gesf2+0x92>
 8000a66:	2cff      	cmp	r4, #255	; 0xff
 8000a68:	d0ee      	beq.n	8000a48 <__gesf2+0x40>
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d1e5      	bne.n	8000a3a <__gesf2+0x32>
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d1e3      	bne.n	8000a3a <__gesf2+0x32>
 8000a72:	e7e4      	b.n	8000a3e <__gesf2+0x36>
 8000a74:	2000      	movs	r0, #0
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d0e5      	beq.n	8000a46 <__gesf2+0x3e>
 8000a7a:	e7e0      	b.n	8000a3e <__gesf2+0x36>
 8000a7c:	42a2      	cmp	r2, r4
 8000a7e:	dc05      	bgt.n	8000a8c <__gesf2+0x84>
 8000a80:	dbea      	blt.n	8000a58 <__gesf2+0x50>
 8000a82:	42ae      	cmp	r6, r5
 8000a84:	d802      	bhi.n	8000a8c <__gesf2+0x84>
 8000a86:	d3e7      	bcc.n	8000a58 <__gesf2+0x50>
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e7dc      	b.n	8000a46 <__gesf2+0x3e>
 8000a8c:	4241      	negs	r1, r0
 8000a8e:	4141      	adcs	r1, r0
 8000a90:	4248      	negs	r0, r1
 8000a92:	2102      	movs	r1, #2
 8000a94:	4008      	ands	r0, r1
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7d5      	b.n	8000a46 <__gesf2+0x3e>
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	4240      	negs	r0, r0
 8000a9e:	e7d2      	b.n	8000a46 <__gesf2+0x3e>

08000aa0 <__lesf2>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	0042      	lsls	r2, r0, #1
 8000aa4:	0246      	lsls	r6, r0, #9
 8000aa6:	024d      	lsls	r5, r1, #9
 8000aa8:	004c      	lsls	r4, r1, #1
 8000aaa:	0fc3      	lsrs	r3, r0, #31
 8000aac:	0a76      	lsrs	r6, r6, #9
 8000aae:	0e12      	lsrs	r2, r2, #24
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e24      	lsrs	r4, r4, #24
 8000ab4:	0fc8      	lsrs	r0, r1, #31
 8000ab6:	2aff      	cmp	r2, #255	; 0xff
 8000ab8:	d00d      	beq.n	8000ad6 <__lesf2+0x36>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d00f      	beq.n	8000ade <__lesf2+0x3e>
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d123      	bne.n	8000b0a <__lesf2+0x6a>
 8000ac2:	4271      	negs	r1, r6
 8000ac4:	4171      	adcs	r1, r6
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d10f      	bne.n	8000aea <__lesf2+0x4a>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d10d      	bne.n	8000aea <__lesf2+0x4a>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	d014      	beq.n	8000afe <__lesf2+0x5e>
 8000ad4:	e00d      	b.n	8000af2 <__lesf2+0x52>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d110      	bne.n	8000afc <__lesf2+0x5c>
 8000ada:	2cff      	cmp	r4, #255	; 0xff
 8000adc:	d115      	bne.n	8000b0a <__lesf2+0x6a>
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	d10c      	bne.n	8000afc <__lesf2+0x5c>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d103      	bne.n	8000aee <__lesf2+0x4e>
 8000ae6:	4271      	negs	r1, r6
 8000ae8:	4171      	adcs	r1, r6
 8000aea:	2900      	cmp	r1, #0
 8000aec:	d108      	bne.n	8000b00 <__lesf2+0x60>
 8000aee:	4283      	cmp	r3, r0
 8000af0:	d010      	beq.n	8000b14 <__lesf2+0x74>
 8000af2:	2102      	movs	r1, #2
 8000af4:	1e58      	subs	r0, r3, #1
 8000af6:	4008      	ands	r0, r1
 8000af8:	3801      	subs	r0, #1
 8000afa:	e000      	b.n	8000afe <__lesf2+0x5e>
 8000afc:	2002      	movs	r0, #2
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1fc      	bne.n	8000afe <__lesf2+0x5e>
 8000b04:	2001      	movs	r0, #1
 8000b06:	4240      	negs	r0, r0
 8000b08:	e7f9      	b.n	8000afe <__lesf2+0x5e>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d1ef      	bne.n	8000aee <__lesf2+0x4e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d1ed      	bne.n	8000aee <__lesf2+0x4e>
 8000b12:	e7ee      	b.n	8000af2 <__lesf2+0x52>
 8000b14:	42a2      	cmp	r2, r4
 8000b16:	dc05      	bgt.n	8000b24 <__lesf2+0x84>
 8000b18:	dbf2      	blt.n	8000b00 <__lesf2+0x60>
 8000b1a:	42ae      	cmp	r6, r5
 8000b1c:	d802      	bhi.n	8000b24 <__lesf2+0x84>
 8000b1e:	d3ef      	bcc.n	8000b00 <__lesf2+0x60>
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ec      	b.n	8000afe <__lesf2+0x5e>
 8000b24:	4241      	negs	r1, r0
 8000b26:	4141      	adcs	r1, r0
 8000b28:	4248      	negs	r0, r1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4008      	ands	r0, r1
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7e5      	b.n	8000afe <__lesf2+0x5e>
 8000b32:	46c0      	nop			; (mov r8, r8)

08000b34 <__aeabi_fmul>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	4657      	mov	r7, sl
 8000b38:	464e      	mov	r6, r9
 8000b3a:	4645      	mov	r5, r8
 8000b3c:	46de      	mov	lr, fp
 8000b3e:	0244      	lsls	r4, r0, #9
 8000b40:	b5e0      	push	{r5, r6, r7, lr}
 8000b42:	0045      	lsls	r5, r0, #1
 8000b44:	1c0f      	adds	r7, r1, #0
 8000b46:	0a64      	lsrs	r4, r4, #9
 8000b48:	0e2d      	lsrs	r5, r5, #24
 8000b4a:	0fc6      	lsrs	r6, r0, #31
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d047      	beq.n	8000be0 <__aeabi_fmul+0xac>
 8000b50:	2dff      	cmp	r5, #255	; 0xff
 8000b52:	d04d      	beq.n	8000bf0 <__aeabi_fmul+0xbc>
 8000b54:	2300      	movs	r3, #0
 8000b56:	2080      	movs	r0, #128	; 0x80
 8000b58:	469a      	mov	sl, r3
 8000b5a:	469b      	mov	fp, r3
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	04c0      	lsls	r0, r0, #19
 8000b60:	4304      	orrs	r4, r0
 8000b62:	3d7f      	subs	r5, #127	; 0x7f
 8000b64:	0278      	lsls	r0, r7, #9
 8000b66:	0a43      	lsrs	r3, r0, #9
 8000b68:	4699      	mov	r9, r3
 8000b6a:	007a      	lsls	r2, r7, #1
 8000b6c:	0ffb      	lsrs	r3, r7, #31
 8000b6e:	4698      	mov	r8, r3
 8000b70:	0e12      	lsrs	r2, r2, #24
 8000b72:	464b      	mov	r3, r9
 8000b74:	d044      	beq.n	8000c00 <__aeabi_fmul+0xcc>
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d011      	beq.n	8000b9e <__aeabi_fmul+0x6a>
 8000b7a:	00d8      	lsls	r0, r3, #3
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	04db      	lsls	r3, r3, #19
 8000b80:	4303      	orrs	r3, r0
 8000b82:	4699      	mov	r9, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	3a7f      	subs	r2, #127	; 0x7f
 8000b88:	18ad      	adds	r5, r5, r2
 8000b8a:	4647      	mov	r7, r8
 8000b8c:	4653      	mov	r3, sl
 8000b8e:	4077      	eors	r7, r6
 8000b90:	1c69      	adds	r1, r5, #1
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d83f      	bhi.n	8000c16 <__aeabi_fmul+0xe2>
 8000b96:	4a72      	ldr	r2, [pc, #456]	; (8000d60 <__aeabi_fmul+0x22c>)
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	58d3      	ldr	r3, [r2, r3]
 8000b9c:	469f      	mov	pc, r3
 8000b9e:	35ff      	adds	r5, #255	; 0xff
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fmul+0x72>
 8000ba4:	e079      	b.n	8000c9a <__aeabi_fmul+0x166>
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	2302      	movs	r3, #2
 8000baa:	431a      	orrs	r2, r3
 8000bac:	4692      	mov	sl, r2
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e7eb      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000bb2:	4647      	mov	r7, r8
 8000bb4:	464c      	mov	r4, r9
 8000bb6:	4683      	mov	fp, r0
 8000bb8:	465b      	mov	r3, fp
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d028      	beq.n	8000c10 <__aeabi_fmul+0xdc>
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fmul+0x90>
 8000bc2:	e0c6      	b.n	8000d52 <__aeabi_fmul+0x21e>
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d14f      	bne.n	8000c68 <__aeabi_fmul+0x134>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	05c0      	lsls	r0, r0, #23
 8000bce:	07ff      	lsls	r7, r7, #31
 8000bd0:	4320      	orrs	r0, r4
 8000bd2:	4338      	orrs	r0, r7
 8000bd4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd6:	46bb      	mov	fp, r7
 8000bd8:	46b2      	mov	sl, r6
 8000bda:	46a9      	mov	r9, r5
 8000bdc:	46a0      	mov	r8, r4
 8000bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d171      	bne.n	8000cc8 <__aeabi_fmul+0x194>
 8000be4:	2304      	movs	r3, #4
 8000be6:	469a      	mov	sl, r3
 8000be8:	3b03      	subs	r3, #3
 8000bea:	2500      	movs	r5, #0
 8000bec:	469b      	mov	fp, r3
 8000bee:	e7b9      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d163      	bne.n	8000cbc <__aeabi_fmul+0x188>
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	3b06      	subs	r3, #6
 8000bfa:	25ff      	movs	r5, #255	; 0xff
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	e7b1      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d150      	bne.n	8000ca6 <__aeabi_fmul+0x172>
 8000c04:	4652      	mov	r2, sl
 8000c06:	3301      	adds	r3, #1
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	4692      	mov	sl, r2
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	e7bc      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000c10:	20ff      	movs	r0, #255	; 0xff
 8000c12:	2400      	movs	r4, #0
 8000c14:	e7da      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000c16:	4648      	mov	r0, r9
 8000c18:	0c26      	lsrs	r6, r4, #16
 8000c1a:	0424      	lsls	r4, r4, #16
 8000c1c:	0c22      	lsrs	r2, r4, #16
 8000c1e:	0404      	lsls	r4, r0, #16
 8000c20:	0c24      	lsrs	r4, r4, #16
 8000c22:	464b      	mov	r3, r9
 8000c24:	0020      	movs	r0, r4
 8000c26:	0c1b      	lsrs	r3, r3, #16
 8000c28:	4350      	muls	r0, r2
 8000c2a:	4374      	muls	r4, r6
 8000c2c:	435a      	muls	r2, r3
 8000c2e:	435e      	muls	r6, r3
 8000c30:	1912      	adds	r2, r2, r4
 8000c32:	0c03      	lsrs	r3, r0, #16
 8000c34:	189b      	adds	r3, r3, r2
 8000c36:	429c      	cmp	r4, r3
 8000c38:	d903      	bls.n	8000c42 <__aeabi_fmul+0x10e>
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0252      	lsls	r2, r2, #9
 8000c3e:	4694      	mov	ip, r2
 8000c40:	4466      	add	r6, ip
 8000c42:	0400      	lsls	r0, r0, #16
 8000c44:	041a      	lsls	r2, r3, #16
 8000c46:	0c00      	lsrs	r0, r0, #16
 8000c48:	1812      	adds	r2, r2, r0
 8000c4a:	0194      	lsls	r4, r2, #6
 8000c4c:	1e60      	subs	r0, r4, #1
 8000c4e:	4184      	sbcs	r4, r0
 8000c50:	0c1b      	lsrs	r3, r3, #16
 8000c52:	0e92      	lsrs	r2, r2, #26
 8000c54:	199b      	adds	r3, r3, r6
 8000c56:	4314      	orrs	r4, r2
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	d572      	bpl.n	8000d46 <__aeabi_fmul+0x212>
 8000c60:	2001      	movs	r0, #1
 8000c62:	0863      	lsrs	r3, r4, #1
 8000c64:	4004      	ands	r4, r0
 8000c66:	431c      	orrs	r4, r3
 8000c68:	0008      	movs	r0, r1
 8000c6a:	307f      	adds	r0, #127	; 0x7f
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	dd3c      	ble.n	8000cea <__aeabi_fmul+0x1b6>
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fmul+0x14a>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fmul+0x14a>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0123      	lsls	r3, r4, #4
 8000c80:	d503      	bpl.n	8000c8a <__aeabi_fmul+0x156>
 8000c82:	3180      	adds	r1, #128	; 0x80
 8000c84:	0008      	movs	r0, r1
 8000c86:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <__aeabi_fmul+0x230>)
 8000c88:	401c      	ands	r4, r3
 8000c8a:	28fe      	cmp	r0, #254	; 0xfe
 8000c8c:	dcc0      	bgt.n	8000c10 <__aeabi_fmul+0xdc>
 8000c8e:	01a4      	lsls	r4, r4, #6
 8000c90:	0a64      	lsrs	r4, r4, #9
 8000c92:	b2c0      	uxtb	r0, r0
 8000c94:	e79a      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000c96:	0037      	movs	r7, r6
 8000c98:	e78e      	b.n	8000bb8 <__aeabi_fmul+0x84>
 8000c9a:	4652      	mov	r2, sl
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	4692      	mov	sl, r2
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	e771      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	f001 f882 	bl	8001db0 <__clzsi2>
 8000cac:	464a      	mov	r2, r9
 8000cae:	1f43      	subs	r3, r0, #5
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	1a2d      	subs	r5, r5, r0
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	3d76      	subs	r5, #118	; 0x76
 8000cba:	e766      	b.n	8000b8a <__aeabi_fmul+0x56>
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	3b09      	subs	r3, #9
 8000cc2:	25ff      	movs	r5, #255	; 0xff
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	e74d      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000cc8:	0020      	movs	r0, r4
 8000cca:	f001 f871 	bl	8001db0 <__clzsi2>
 8000cce:	2576      	movs	r5, #118	; 0x76
 8000cd0:	1f43      	subs	r3, r0, #5
 8000cd2:	409c      	lsls	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	426d      	negs	r5, r5
 8000cd8:	469a      	mov	sl, r3
 8000cda:	469b      	mov	fp, r3
 8000cdc:	1a2d      	subs	r5, r5, r0
 8000cde:	e741      	b.n	8000b64 <__aeabi_fmul+0x30>
 8000ce0:	2480      	movs	r4, #128	; 0x80
 8000ce2:	2700      	movs	r7, #0
 8000ce4:	20ff      	movs	r0, #255	; 0xff
 8000ce6:	03e4      	lsls	r4, r4, #15
 8000ce8:	e770      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000cea:	2301      	movs	r3, #1
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	2b1b      	cmp	r3, #27
 8000cf0:	dd00      	ble.n	8000cf4 <__aeabi_fmul+0x1c0>
 8000cf2:	e769      	b.n	8000bc8 <__aeabi_fmul+0x94>
 8000cf4:	319e      	adds	r1, #158	; 0x9e
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	408c      	lsls	r4, r1
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	4304      	orrs	r4, r0
 8000d02:	0763      	lsls	r3, r4, #29
 8000d04:	d004      	beq.n	8000d10 <__aeabi_fmul+0x1dc>
 8000d06:	230f      	movs	r3, #15
 8000d08:	4023      	ands	r3, r4
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fmul+0x1dc>
 8000d0e:	3404      	adds	r4, #4
 8000d10:	0163      	lsls	r3, r4, #5
 8000d12:	d51a      	bpl.n	8000d4a <__aeabi_fmul+0x216>
 8000d14:	2001      	movs	r0, #1
 8000d16:	2400      	movs	r4, #0
 8000d18:	e758      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d1a:	2080      	movs	r0, #128	; 0x80
 8000d1c:	03c0      	lsls	r0, r0, #15
 8000d1e:	4204      	tst	r4, r0
 8000d20:	d009      	beq.n	8000d36 <__aeabi_fmul+0x202>
 8000d22:	464b      	mov	r3, r9
 8000d24:	4203      	tst	r3, r0
 8000d26:	d106      	bne.n	8000d36 <__aeabi_fmul+0x202>
 8000d28:	464c      	mov	r4, r9
 8000d2a:	4304      	orrs	r4, r0
 8000d2c:	0264      	lsls	r4, r4, #9
 8000d2e:	4647      	mov	r7, r8
 8000d30:	20ff      	movs	r0, #255	; 0xff
 8000d32:	0a64      	lsrs	r4, r4, #9
 8000d34:	e74a      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d36:	2080      	movs	r0, #128	; 0x80
 8000d38:	03c0      	lsls	r0, r0, #15
 8000d3a:	4304      	orrs	r4, r0
 8000d3c:	0264      	lsls	r4, r4, #9
 8000d3e:	0037      	movs	r7, r6
 8000d40:	20ff      	movs	r0, #255	; 0xff
 8000d42:	0a64      	lsrs	r4, r4, #9
 8000d44:	e742      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d46:	0029      	movs	r1, r5
 8000d48:	e78e      	b.n	8000c68 <__aeabi_fmul+0x134>
 8000d4a:	01a4      	lsls	r4, r4, #6
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	e73c      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	03c0      	lsls	r0, r0, #15
 8000d56:	4304      	orrs	r4, r0
 8000d58:	0264      	lsls	r4, r4, #9
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	0a64      	lsrs	r4, r4, #9
 8000d5e:	e735      	b.n	8000bcc <__aeabi_fmul+0x98>
 8000d60:	08007684 	.word	0x08007684
 8000d64:	f7ffffff 	.word	0xf7ffffff

08000d68 <__aeabi_fsub>:
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	4646      	mov	r6, r8
 8000d6c:	46d6      	mov	lr, sl
 8000d6e:	464f      	mov	r7, r9
 8000d70:	0243      	lsls	r3, r0, #9
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	00da      	lsls	r2, r3, #3
 8000d76:	4694      	mov	ip, r2
 8000d78:	024a      	lsls	r2, r1, #9
 8000d7a:	b5c0      	push	{r6, r7, lr}
 8000d7c:	0044      	lsls	r4, r0, #1
 8000d7e:	0a56      	lsrs	r6, r2, #9
 8000d80:	1c05      	adds	r5, r0, #0
 8000d82:	46b0      	mov	r8, r6
 8000d84:	0e24      	lsrs	r4, r4, #24
 8000d86:	004e      	lsls	r6, r1, #1
 8000d88:	0992      	lsrs	r2, r2, #6
 8000d8a:	001f      	movs	r7, r3
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	4692      	mov	sl, r2
 8000d90:	0fed      	lsrs	r5, r5, #31
 8000d92:	0e36      	lsrs	r6, r6, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2eff      	cmp	r6, #255	; 0xff
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x34>
 8000d9a:	e07f      	b.n	8000e9c <__aeabi_fsub+0x134>
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4051      	eors	r1, r2
 8000da0:	428d      	cmp	r5, r1
 8000da2:	d051      	beq.n	8000e48 <__aeabi_fsub+0xe0>
 8000da4:	1ba2      	subs	r2, r4, r6
 8000da6:	4691      	mov	r9, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	dc00      	bgt.n	8000dae <__aeabi_fsub+0x46>
 8000dac:	e07e      	b.n	8000eac <__aeabi_fsub+0x144>
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x4c>
 8000db2:	e099      	b.n	8000ee8 <__aeabi_fsub+0x180>
 8000db4:	2cff      	cmp	r4, #255	; 0xff
 8000db6:	d100      	bne.n	8000dba <__aeabi_fsub+0x52>
 8000db8:	e08c      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	04db      	lsls	r3, r3, #19
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	4692      	mov	sl, r2
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2a1b      	cmp	r2, #27
 8000dca:	dc08      	bgt.n	8000dde <__aeabi_fsub+0x76>
 8000dcc:	4653      	mov	r3, sl
 8000dce:	2120      	movs	r1, #32
 8000dd0:	40d3      	lsrs	r3, r2
 8000dd2:	1a89      	subs	r1, r1, r2
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	408a      	lsls	r2, r1
 8000dd8:	1e51      	subs	r1, r2, #1
 8000dda:	418a      	sbcs	r2, r1
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	4662      	mov	r2, ip
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	015a      	lsls	r2, r3, #5
 8000de4:	d400      	bmi.n	8000de8 <__aeabi_fsub+0x80>
 8000de6:	e0f3      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	099e      	lsrs	r6, r3, #6
 8000dec:	0030      	movs	r0, r6
 8000dee:	f000 ffdf 	bl	8001db0 <__clzsi2>
 8000df2:	3805      	subs	r0, #5
 8000df4:	4086      	lsls	r6, r0
 8000df6:	4284      	cmp	r4, r0
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_fsub+0x94>
 8000dfa:	e0f7      	b.n	8000fec <__aeabi_fsub+0x284>
 8000dfc:	0032      	movs	r2, r6
 8000dfe:	1b04      	subs	r4, r0, r4
 8000e00:	2020      	movs	r0, #32
 8000e02:	3401      	adds	r4, #1
 8000e04:	40e2      	lsrs	r2, r4
 8000e06:	1b04      	subs	r4, r0, r4
 8000e08:	40a6      	lsls	r6, r4
 8000e0a:	0033      	movs	r3, r6
 8000e0c:	1e5e      	subs	r6, r3, #1
 8000e0e:	41b3      	sbcs	r3, r6
 8000e10:	2400      	movs	r4, #0
 8000e12:	4313      	orrs	r3, r2
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	d004      	beq.n	8000e22 <__aeabi_fsub+0xba>
 8000e18:	220f      	movs	r2, #15
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	2a04      	cmp	r2, #4
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0xba>
 8000e20:	3304      	adds	r3, #4
 8000e22:	015a      	lsls	r2, r3, #5
 8000e24:	d400      	bmi.n	8000e28 <__aeabi_fsub+0xc0>
 8000e26:	e0d6      	b.n	8000fd6 <__aeabi_fsub+0x26e>
 8000e28:	1c62      	adds	r2, r4, #1
 8000e2a:	2cfe      	cmp	r4, #254	; 0xfe
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0xc8>
 8000e2e:	e0da      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	0a5f      	lsrs	r7, r3, #9
 8000e34:	b2d0      	uxtb	r0, r2
 8000e36:	05c0      	lsls	r0, r0, #23
 8000e38:	4338      	orrs	r0, r7
 8000e3a:	07ed      	lsls	r5, r5, #31
 8000e3c:	4328      	orrs	r0, r5
 8000e3e:	bce0      	pop	{r5, r6, r7}
 8000e40:	46ba      	mov	sl, r7
 8000e42:	46b1      	mov	r9, r6
 8000e44:	46a8      	mov	r8, r5
 8000e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e48:	1ba2      	subs	r2, r4, r6
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	dd63      	ble.n	8000f18 <__aeabi_fsub+0x1b0>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0xee>
 8000e54:	e099      	b.n	8000f8a <__aeabi_fsub+0x222>
 8000e56:	2cff      	cmp	r4, #255	; 0xff
 8000e58:	d03c      	beq.n	8000ed4 <__aeabi_fsub+0x16c>
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	04db      	lsls	r3, r3, #19
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4692      	mov	sl, r2
 8000e64:	464a      	mov	r2, r9
 8000e66:	2301      	movs	r3, #1
 8000e68:	2a1b      	cmp	r2, #27
 8000e6a:	dc08      	bgt.n	8000e7e <__aeabi_fsub+0x116>
 8000e6c:	4653      	mov	r3, sl
 8000e6e:	2120      	movs	r1, #32
 8000e70:	40d3      	lsrs	r3, r2
 8000e72:	1a89      	subs	r1, r1, r2
 8000e74:	4652      	mov	r2, sl
 8000e76:	408a      	lsls	r2, r1
 8000e78:	1e51      	subs	r1, r2, #1
 8000e7a:	418a      	sbcs	r2, r1
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	4463      	add	r3, ip
 8000e80:	015a      	lsls	r2, r3, #5
 8000e82:	d400      	bmi.n	8000e86 <__aeabi_fsub+0x11e>
 8000e84:	e0a4      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8000e86:	3401      	adds	r4, #1
 8000e88:	2cff      	cmp	r4, #255	; 0xff
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0x126>
 8000e8c:	e0ab      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4997      	ldr	r1, [pc, #604]	; (80010f0 <__aeabi_fsub+0x388>)
 8000e92:	401a      	ands	r2, r3
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	400b      	ands	r3, r1
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	e7bb      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d032      	beq.n	8000f06 <__aeabi_fsub+0x19e>
 8000ea0:	428d      	cmp	r5, r1
 8000ea2:	d035      	beq.n	8000f10 <__aeabi_fsub+0x1a8>
 8000ea4:	22ff      	movs	r2, #255	; 0xff
 8000ea6:	4252      	negs	r2, r2
 8000ea8:	4691      	mov	r9, r2
 8000eaa:	44a1      	add	r9, r4
 8000eac:	464a      	mov	r2, r9
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d051      	beq.n	8000f56 <__aeabi_fsub+0x1ee>
 8000eb2:	1b30      	subs	r0, r6, r4
 8000eb4:	2c00      	cmp	r4, #0
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fsub+0x152>
 8000eb8:	e09c      	b.n	8000ff4 <__aeabi_fsub+0x28c>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x15a>
 8000ec0:	e0df      	b.n	8001082 <__aeabi_fsub+0x31a>
 8000ec2:	3801      	subs	r0, #1
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x162>
 8000ec8:	e0f7      	b.n	80010ba <__aeabi_fsub+0x352>
 8000eca:	2eff      	cmp	r6, #255	; 0xff
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0x168>
 8000ece:	e099      	b.n	8001004 <__aeabi_fsub+0x29c>
 8000ed0:	000d      	movs	r5, r1
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_fsub+0x172>
 8000ed8:	e085      	b.n	8000fe6 <__aeabi_fsub+0x27e>
 8000eda:	2780      	movs	r7, #128	; 0x80
 8000edc:	03ff      	lsls	r7, r7, #15
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	027f      	lsls	r7, r7, #9
 8000ee2:	20ff      	movs	r0, #255	; 0xff
 8000ee4:	0a7f      	lsrs	r7, r7, #9
 8000ee6:	e7a6      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000ee8:	4652      	mov	r2, sl
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d074      	beq.n	8000fd8 <__aeabi_fsub+0x270>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4252      	negs	r2, r2
 8000ef2:	4690      	mov	r8, r2
 8000ef4:	44c1      	add	r9, r8
 8000ef6:	464a      	mov	r2, r9
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x196>
 8000efc:	e0c8      	b.n	8001090 <__aeabi_fsub+0x328>
 8000efe:	2cff      	cmp	r4, #255	; 0xff
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x19c>
 8000f02:	e75f      	b.n	8000dc4 <__aeabi_fsub+0x5c>
 8000f04:	e7e6      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000f06:	2201      	movs	r2, #1
 8000f08:	4051      	eors	r1, r2
 8000f0a:	42a9      	cmp	r1, r5
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x1a8>
 8000f0e:	e749      	b.n	8000da4 <__aeabi_fsub+0x3c>
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	4252      	negs	r2, r2
 8000f14:	4691      	mov	r9, r2
 8000f16:	44a1      	add	r9, r4
 8000f18:	464a      	mov	r2, r9
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d043      	beq.n	8000fa6 <__aeabi_fsub+0x23e>
 8000f1e:	1b31      	subs	r1, r6, r4
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x1be>
 8000f24:	e08c      	b.n	8001040 <__aeabi_fsub+0x2d8>
 8000f26:	2eff      	cmp	r6, #255	; 0xff
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x1c4>
 8000f2a:	e092      	b.n	8001052 <__aeabi_fsub+0x2ea>
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	4662      	mov	r2, ip
 8000f30:	04db      	lsls	r3, r3, #19
 8000f32:	431a      	orrs	r2, r3
 8000f34:	4694      	mov	ip, r2
 8000f36:	2301      	movs	r3, #1
 8000f38:	291b      	cmp	r1, #27
 8000f3a:	dc09      	bgt.n	8000f50 <__aeabi_fsub+0x1e8>
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	4663      	mov	r3, ip
 8000f40:	4662      	mov	r2, ip
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	1a41      	subs	r1, r0, r1
 8000f46:	408a      	lsls	r2, r1
 8000f48:	0011      	movs	r1, r2
 8000f4a:	1e48      	subs	r0, r1, #1
 8000f4c:	4181      	sbcs	r1, r0
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	0034      	movs	r4, r6
 8000f52:	4453      	add	r3, sl
 8000f54:	e794      	b.n	8000e80 <__aeabi_fsub+0x118>
 8000f56:	22fe      	movs	r2, #254	; 0xfe
 8000f58:	1c66      	adds	r6, r4, #1
 8000f5a:	4232      	tst	r2, r6
 8000f5c:	d164      	bne.n	8001028 <__aeabi_fsub+0x2c0>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d000      	beq.n	8000f64 <__aeabi_fsub+0x1fc>
 8000f62:	e082      	b.n	800106a <__aeabi_fsub+0x302>
 8000f64:	4663      	mov	r3, ip
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x204>
 8000f6a:	e0ab      	b.n	80010c4 <__aeabi_fsub+0x35c>
 8000f6c:	4653      	mov	r3, sl
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_fsub+0x20c>
 8000f72:	e760      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000f74:	4663      	mov	r3, ip
 8000f76:	4652      	mov	r2, sl
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d400      	bmi.n	8000f80 <__aeabi_fsub+0x218>
 8000f7e:	e0aa      	b.n	80010d6 <__aeabi_fsub+0x36e>
 8000f80:	4663      	mov	r3, ip
 8000f82:	4652      	mov	r2, sl
 8000f84:	000d      	movs	r5, r1
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	e744      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000f8a:	4652      	mov	r2, sl
 8000f8c:	2a00      	cmp	r2, #0
 8000f8e:	d023      	beq.n	8000fd8 <__aeabi_fsub+0x270>
 8000f90:	2201      	movs	r2, #1
 8000f92:	4252      	negs	r2, r2
 8000f94:	4690      	mov	r8, r2
 8000f96:	44c1      	add	r9, r8
 8000f98:	464a      	mov	r2, r9
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d075      	beq.n	800108a <__aeabi_fsub+0x322>
 8000f9e:	2cff      	cmp	r4, #255	; 0xff
 8000fa0:	d000      	beq.n	8000fa4 <__aeabi_fsub+0x23c>
 8000fa2:	e75f      	b.n	8000e64 <__aeabi_fsub+0xfc>
 8000fa4:	e796      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000fa6:	26fe      	movs	r6, #254	; 0xfe
 8000fa8:	3401      	adds	r4, #1
 8000faa:	4226      	tst	r6, r4
 8000fac:	d153      	bne.n	8001056 <__aeabi_fsub+0x2ee>
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	d172      	bne.n	8001098 <__aeabi_fsub+0x330>
 8000fb2:	4663      	mov	r3, ip
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x252>
 8000fb8:	e093      	b.n	80010e2 <__aeabi_fsub+0x37a>
 8000fba:	4653      	mov	r3, sl
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x25a>
 8000fc0:	e739      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fc2:	4463      	add	r3, ip
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	015a      	lsls	r2, r3, #5
 8000fc8:	d502      	bpl.n	8000fd0 <__aeabi_fsub+0x268>
 8000fca:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <__aeabi_fsub+0x38c>)
 8000fcc:	3401      	adds	r4, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	075a      	lsls	r2, r3, #29
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_fsub+0x26e>
 8000fd4:	e720      	b.n	8000e18 <__aeabi_fsub+0xb0>
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	2cff      	cmp	r4, #255	; 0xff
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x276>
 8000fdc:	e77a      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	0a5f      	lsrs	r7, r3, #9
 8000fe2:	b2e0      	uxtb	r0, r4
 8000fe4:	e727      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fe6:	20ff      	movs	r0, #255	; 0xff
 8000fe8:	2700      	movs	r7, #0
 8000fea:	e724      	b.n	8000e36 <__aeabi_fsub+0xce>
 8000fec:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <__aeabi_fsub+0x38c>)
 8000fee:	1a24      	subs	r4, r4, r0
 8000ff0:	4033      	ands	r3, r6
 8000ff2:	e70f      	b.n	8000e14 <__aeabi_fsub+0xac>
 8000ff4:	2eff      	cmp	r6, #255	; 0xff
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x292>
 8000ff8:	e76a      	b.n	8000ed0 <__aeabi_fsub+0x168>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4662      	mov	r2, ip
 8000ffe:	04db      	lsls	r3, r3, #19
 8001000:	431a      	orrs	r2, r3
 8001002:	4694      	mov	ip, r2
 8001004:	2301      	movs	r3, #1
 8001006:	281b      	cmp	r0, #27
 8001008:	dc09      	bgt.n	800101e <__aeabi_fsub+0x2b6>
 800100a:	2420      	movs	r4, #32
 800100c:	4663      	mov	r3, ip
 800100e:	4662      	mov	r2, ip
 8001010:	40c3      	lsrs	r3, r0
 8001012:	1a20      	subs	r0, r4, r0
 8001014:	4082      	lsls	r2, r0
 8001016:	0010      	movs	r0, r2
 8001018:	1e44      	subs	r4, r0, #1
 800101a:	41a0      	sbcs	r0, r4
 800101c:	4303      	orrs	r3, r0
 800101e:	4652      	mov	r2, sl
 8001020:	000d      	movs	r5, r1
 8001022:	0034      	movs	r4, r6
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	e6dc      	b.n	8000de2 <__aeabi_fsub+0x7a>
 8001028:	4663      	mov	r3, ip
 800102a:	4652      	mov	r2, sl
 800102c:	1a9e      	subs	r6, r3, r2
 800102e:	0173      	lsls	r3, r6, #5
 8001030:	d417      	bmi.n	8001062 <__aeabi_fsub+0x2fa>
 8001032:	2e00      	cmp	r6, #0
 8001034:	d000      	beq.n	8001038 <__aeabi_fsub+0x2d0>
 8001036:	e6d9      	b.n	8000dec <__aeabi_fsub+0x84>
 8001038:	2500      	movs	r5, #0
 800103a:	2000      	movs	r0, #0
 800103c:	2700      	movs	r7, #0
 800103e:	e6fa      	b.n	8000e36 <__aeabi_fsub+0xce>
 8001040:	4663      	mov	r3, ip
 8001042:	2b00      	cmp	r3, #0
 8001044:	d044      	beq.n	80010d0 <__aeabi_fsub+0x368>
 8001046:	3901      	subs	r1, #1
 8001048:	2900      	cmp	r1, #0
 800104a:	d04c      	beq.n	80010e6 <__aeabi_fsub+0x37e>
 800104c:	2eff      	cmp	r6, #255	; 0xff
 800104e:	d000      	beq.n	8001052 <__aeabi_fsub+0x2ea>
 8001050:	e771      	b.n	8000f36 <__aeabi_fsub+0x1ce>
 8001052:	4643      	mov	r3, r8
 8001054:	e73e      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 8001056:	2cff      	cmp	r4, #255	; 0xff
 8001058:	d0c5      	beq.n	8000fe6 <__aeabi_fsub+0x27e>
 800105a:	4652      	mov	r2, sl
 800105c:	4462      	add	r2, ip
 800105e:	0853      	lsrs	r3, r2, #1
 8001060:	e7b6      	b.n	8000fd0 <__aeabi_fsub+0x268>
 8001062:	4663      	mov	r3, ip
 8001064:	000d      	movs	r5, r1
 8001066:	1ad6      	subs	r6, r2, r3
 8001068:	e6c0      	b.n	8000dec <__aeabi_fsub+0x84>
 800106a:	4662      	mov	r2, ip
 800106c:	2a00      	cmp	r2, #0
 800106e:	d116      	bne.n	800109e <__aeabi_fsub+0x336>
 8001070:	4653      	mov	r3, sl
 8001072:	2b00      	cmp	r3, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_fsub+0x310>
 8001076:	e72b      	b.n	8000ed0 <__aeabi_fsub+0x168>
 8001078:	2780      	movs	r7, #128	; 0x80
 800107a:	2500      	movs	r5, #0
 800107c:	20ff      	movs	r0, #255	; 0xff
 800107e:	03ff      	lsls	r7, r7, #15
 8001080:	e6d9      	b.n	8000e36 <__aeabi_fsub+0xce>
 8001082:	000d      	movs	r5, r1
 8001084:	4643      	mov	r3, r8
 8001086:	0034      	movs	r4, r6
 8001088:	e7a6      	b.n	8000fd8 <__aeabi_fsub+0x270>
 800108a:	4653      	mov	r3, sl
 800108c:	4463      	add	r3, ip
 800108e:	e6f7      	b.n	8000e80 <__aeabi_fsub+0x118>
 8001090:	4663      	mov	r3, ip
 8001092:	4652      	mov	r2, sl
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	e6a4      	b.n	8000de2 <__aeabi_fsub+0x7a>
 8001098:	4662      	mov	r2, ip
 800109a:	2a00      	cmp	r2, #0
 800109c:	d0d9      	beq.n	8001052 <__aeabi_fsub+0x2ea>
 800109e:	4652      	mov	r2, sl
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x33e>
 80010a4:	e716      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	4213      	tst	r3, r2
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x348>
 80010ae:	e711      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010b0:	4640      	mov	r0, r8
 80010b2:	4210      	tst	r0, r2
 80010b4:	d000      	beq.n	80010b8 <__aeabi_fsub+0x350>
 80010b6:	e70d      	b.n	8000ed4 <__aeabi_fsub+0x16c>
 80010b8:	e70a      	b.n	8000ed0 <__aeabi_fsub+0x168>
 80010ba:	4652      	mov	r2, sl
 80010bc:	000d      	movs	r5, r1
 80010be:	0034      	movs	r4, r6
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	e68e      	b.n	8000de2 <__aeabi_fsub+0x7a>
 80010c4:	4653      	mov	r3, sl
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d008      	beq.n	80010dc <__aeabi_fsub+0x374>
 80010ca:	000d      	movs	r5, r1
 80010cc:	4647      	mov	r7, r8
 80010ce:	e6b2      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010d0:	4643      	mov	r3, r8
 80010d2:	0034      	movs	r4, r6
 80010d4:	e780      	b.n	8000fd8 <__aeabi_fsub+0x270>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x374>
 80010da:	e779      	b.n	8000fd0 <__aeabi_fsub+0x268>
 80010dc:	2500      	movs	r5, #0
 80010de:	2700      	movs	r7, #0
 80010e0:	e6a9      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010e2:	4647      	mov	r7, r8
 80010e4:	e6a7      	b.n	8000e36 <__aeabi_fsub+0xce>
 80010e6:	4653      	mov	r3, sl
 80010e8:	0034      	movs	r4, r6
 80010ea:	4463      	add	r3, ip
 80010ec:	e6c8      	b.n	8000e80 <__aeabi_fsub+0x118>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	7dffffff 	.word	0x7dffffff
 80010f4:	fbffffff 	.word	0xfbffffff

080010f8 <__aeabi_f2iz>:
 80010f8:	0241      	lsls	r1, r0, #9
 80010fa:	0042      	lsls	r2, r0, #1
 80010fc:	0fc3      	lsrs	r3, r0, #31
 80010fe:	0a49      	lsrs	r1, r1, #9
 8001100:	2000      	movs	r0, #0
 8001102:	0e12      	lsrs	r2, r2, #24
 8001104:	2a7e      	cmp	r2, #126	; 0x7e
 8001106:	d903      	bls.n	8001110 <__aeabi_f2iz+0x18>
 8001108:	2a9d      	cmp	r2, #157	; 0x9d
 800110a:	d902      	bls.n	8001112 <__aeabi_f2iz+0x1a>
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <__aeabi_f2iz+0x3c>)
 800110e:	1898      	adds	r0, r3, r2
 8001110:	4770      	bx	lr
 8001112:	2080      	movs	r0, #128	; 0x80
 8001114:	0400      	lsls	r0, r0, #16
 8001116:	4301      	orrs	r1, r0
 8001118:	2a95      	cmp	r2, #149	; 0x95
 800111a:	dc07      	bgt.n	800112c <__aeabi_f2iz+0x34>
 800111c:	2096      	movs	r0, #150	; 0x96
 800111e:	1a82      	subs	r2, r0, r2
 8001120:	40d1      	lsrs	r1, r2
 8001122:	4248      	negs	r0, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f3      	bne.n	8001110 <__aeabi_f2iz+0x18>
 8001128:	0008      	movs	r0, r1
 800112a:	e7f1      	b.n	8001110 <__aeabi_f2iz+0x18>
 800112c:	3a96      	subs	r2, #150	; 0x96
 800112e:	4091      	lsls	r1, r2
 8001130:	e7f7      	b.n	8001122 <__aeabi_f2iz+0x2a>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	7fffffff 	.word	0x7fffffff

08001138 <__aeabi_i2f>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	2800      	cmp	r0, #0
 800113c:	d013      	beq.n	8001166 <__aeabi_i2f+0x2e>
 800113e:	17c3      	asrs	r3, r0, #31
 8001140:	18c5      	adds	r5, r0, r3
 8001142:	405d      	eors	r5, r3
 8001144:	0fc4      	lsrs	r4, r0, #31
 8001146:	0028      	movs	r0, r5
 8001148:	f000 fe32 	bl	8001db0 <__clzsi2>
 800114c:	239e      	movs	r3, #158	; 0x9e
 800114e:	0001      	movs	r1, r0
 8001150:	1a1b      	subs	r3, r3, r0
 8001152:	2b96      	cmp	r3, #150	; 0x96
 8001154:	dc0f      	bgt.n	8001176 <__aeabi_i2f+0x3e>
 8001156:	2808      	cmp	r0, #8
 8001158:	dd01      	ble.n	800115e <__aeabi_i2f+0x26>
 800115a:	3908      	subs	r1, #8
 800115c:	408d      	lsls	r5, r1
 800115e:	026d      	lsls	r5, r5, #9
 8001160:	0a6d      	lsrs	r5, r5, #9
 8001162:	b2d8      	uxtb	r0, r3
 8001164:	e002      	b.n	800116c <__aeabi_i2f+0x34>
 8001166:	2400      	movs	r4, #0
 8001168:	2000      	movs	r0, #0
 800116a:	2500      	movs	r5, #0
 800116c:	05c0      	lsls	r0, r0, #23
 800116e:	4328      	orrs	r0, r5
 8001170:	07e4      	lsls	r4, r4, #31
 8001172:	4320      	orrs	r0, r4
 8001174:	bd70      	pop	{r4, r5, r6, pc}
 8001176:	2b99      	cmp	r3, #153	; 0x99
 8001178:	dd0b      	ble.n	8001192 <__aeabi_i2f+0x5a>
 800117a:	2205      	movs	r2, #5
 800117c:	002e      	movs	r6, r5
 800117e:	1a12      	subs	r2, r2, r0
 8001180:	40d6      	lsrs	r6, r2
 8001182:	0002      	movs	r2, r0
 8001184:	321b      	adds	r2, #27
 8001186:	4095      	lsls	r5, r2
 8001188:	0028      	movs	r0, r5
 800118a:	1e45      	subs	r5, r0, #1
 800118c:	41a8      	sbcs	r0, r5
 800118e:	0035      	movs	r5, r6
 8001190:	4305      	orrs	r5, r0
 8001192:	2905      	cmp	r1, #5
 8001194:	dd01      	ble.n	800119a <__aeabi_i2f+0x62>
 8001196:	1f4a      	subs	r2, r1, #5
 8001198:	4095      	lsls	r5, r2
 800119a:	002a      	movs	r2, r5
 800119c:	4e08      	ldr	r6, [pc, #32]	; (80011c0 <__aeabi_i2f+0x88>)
 800119e:	4032      	ands	r2, r6
 80011a0:	0768      	lsls	r0, r5, #29
 80011a2:	d009      	beq.n	80011b8 <__aeabi_i2f+0x80>
 80011a4:	200f      	movs	r0, #15
 80011a6:	4028      	ands	r0, r5
 80011a8:	2804      	cmp	r0, #4
 80011aa:	d005      	beq.n	80011b8 <__aeabi_i2f+0x80>
 80011ac:	3204      	adds	r2, #4
 80011ae:	0150      	lsls	r0, r2, #5
 80011b0:	d502      	bpl.n	80011b8 <__aeabi_i2f+0x80>
 80011b2:	239f      	movs	r3, #159	; 0x9f
 80011b4:	4032      	ands	r2, r6
 80011b6:	1a5b      	subs	r3, r3, r1
 80011b8:	0192      	lsls	r2, r2, #6
 80011ba:	0a55      	lsrs	r5, r2, #9
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	e7d5      	b.n	800116c <__aeabi_i2f+0x34>
 80011c0:	fbffffff 	.word	0xfbffffff

080011c4 <__aeabi_ui2f>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	1e05      	subs	r5, r0, #0
 80011c8:	d00e      	beq.n	80011e8 <__aeabi_ui2f+0x24>
 80011ca:	f000 fdf1 	bl	8001db0 <__clzsi2>
 80011ce:	239e      	movs	r3, #158	; 0x9e
 80011d0:	0004      	movs	r4, r0
 80011d2:	1a1b      	subs	r3, r3, r0
 80011d4:	2b96      	cmp	r3, #150	; 0x96
 80011d6:	dc0c      	bgt.n	80011f2 <__aeabi_ui2f+0x2e>
 80011d8:	2808      	cmp	r0, #8
 80011da:	dd01      	ble.n	80011e0 <__aeabi_ui2f+0x1c>
 80011dc:	3c08      	subs	r4, #8
 80011de:	40a5      	lsls	r5, r4
 80011e0:	026d      	lsls	r5, r5, #9
 80011e2:	0a6d      	lsrs	r5, r5, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e001      	b.n	80011ec <__aeabi_ui2f+0x28>
 80011e8:	2000      	movs	r0, #0
 80011ea:	2500      	movs	r5, #0
 80011ec:	05c0      	lsls	r0, r0, #23
 80011ee:	4328      	orrs	r0, r5
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	2b99      	cmp	r3, #153	; 0x99
 80011f4:	dd09      	ble.n	800120a <__aeabi_ui2f+0x46>
 80011f6:	0002      	movs	r2, r0
 80011f8:	0029      	movs	r1, r5
 80011fa:	321b      	adds	r2, #27
 80011fc:	4091      	lsls	r1, r2
 80011fe:	1e4a      	subs	r2, r1, #1
 8001200:	4191      	sbcs	r1, r2
 8001202:	2205      	movs	r2, #5
 8001204:	1a12      	subs	r2, r2, r0
 8001206:	40d5      	lsrs	r5, r2
 8001208:	430d      	orrs	r5, r1
 800120a:	2c05      	cmp	r4, #5
 800120c:	dd01      	ble.n	8001212 <__aeabi_ui2f+0x4e>
 800120e:	1f62      	subs	r2, r4, #5
 8001210:	4095      	lsls	r5, r2
 8001212:	0029      	movs	r1, r5
 8001214:	4e08      	ldr	r6, [pc, #32]	; (8001238 <__aeabi_ui2f+0x74>)
 8001216:	4031      	ands	r1, r6
 8001218:	076a      	lsls	r2, r5, #29
 800121a:	d009      	beq.n	8001230 <__aeabi_ui2f+0x6c>
 800121c:	200f      	movs	r0, #15
 800121e:	4028      	ands	r0, r5
 8001220:	2804      	cmp	r0, #4
 8001222:	d005      	beq.n	8001230 <__aeabi_ui2f+0x6c>
 8001224:	3104      	adds	r1, #4
 8001226:	014a      	lsls	r2, r1, #5
 8001228:	d502      	bpl.n	8001230 <__aeabi_ui2f+0x6c>
 800122a:	239f      	movs	r3, #159	; 0x9f
 800122c:	4031      	ands	r1, r6
 800122e:	1b1b      	subs	r3, r3, r4
 8001230:	0189      	lsls	r1, r1, #6
 8001232:	0a4d      	lsrs	r5, r1, #9
 8001234:	b2d8      	uxtb	r0, r3
 8001236:	e7d9      	b.n	80011ec <__aeabi_ui2f+0x28>
 8001238:	fbffffff 	.word	0xfbffffff

0800123c <__aeabi_ddiv>:
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	4657      	mov	r7, sl
 8001240:	464e      	mov	r6, r9
 8001242:	4645      	mov	r5, r8
 8001244:	46de      	mov	lr, fp
 8001246:	b5e0      	push	{r5, r6, r7, lr}
 8001248:	4681      	mov	r9, r0
 800124a:	0005      	movs	r5, r0
 800124c:	030c      	lsls	r4, r1, #12
 800124e:	0048      	lsls	r0, r1, #1
 8001250:	4692      	mov	sl, r2
 8001252:	001f      	movs	r7, r3
 8001254:	b085      	sub	sp, #20
 8001256:	0b24      	lsrs	r4, r4, #12
 8001258:	0d40      	lsrs	r0, r0, #21
 800125a:	0fce      	lsrs	r6, r1, #31
 800125c:	2800      	cmp	r0, #0
 800125e:	d059      	beq.n	8001314 <__aeabi_ddiv+0xd8>
 8001260:	4b87      	ldr	r3, [pc, #540]	; (8001480 <__aeabi_ddiv+0x244>)
 8001262:	4298      	cmp	r0, r3
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x2c>
 8001266:	e098      	b.n	800139a <__aeabi_ddiv+0x15e>
 8001268:	0f6b      	lsrs	r3, r5, #29
 800126a:	00e4      	lsls	r4, r4, #3
 800126c:	431c      	orrs	r4, r3
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	4323      	orrs	r3, r4
 8001274:	4698      	mov	r8, r3
 8001276:	4b83      	ldr	r3, [pc, #524]	; (8001484 <__aeabi_ddiv+0x248>)
 8001278:	00ed      	lsls	r5, r5, #3
 800127a:	469b      	mov	fp, r3
 800127c:	2300      	movs	r3, #0
 800127e:	4699      	mov	r9, r3
 8001280:	4483      	add	fp, r0
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	033c      	lsls	r4, r7, #12
 8001286:	007b      	lsls	r3, r7, #1
 8001288:	4650      	mov	r0, sl
 800128a:	0b24      	lsrs	r4, r4, #12
 800128c:	0d5b      	lsrs	r3, r3, #21
 800128e:	0fff      	lsrs	r7, r7, #31
 8001290:	2b00      	cmp	r3, #0
 8001292:	d067      	beq.n	8001364 <__aeabi_ddiv+0x128>
 8001294:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <__aeabi_ddiv+0x244>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d018      	beq.n	80012cc <__aeabi_ddiv+0x90>
 800129a:	497a      	ldr	r1, [pc, #488]	; (8001484 <__aeabi_ddiv+0x248>)
 800129c:	0f42      	lsrs	r2, r0, #29
 800129e:	468c      	mov	ip, r1
 80012a0:	00e4      	lsls	r4, r4, #3
 80012a2:	4659      	mov	r1, fp
 80012a4:	4314      	orrs	r4, r2
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	4463      	add	r3, ip
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	4314      	orrs	r4, r2
 80012b0:	469b      	mov	fp, r3
 80012b2:	00c2      	lsls	r2, r0, #3
 80012b4:	2000      	movs	r0, #0
 80012b6:	0033      	movs	r3, r6
 80012b8:	407b      	eors	r3, r7
 80012ba:	469a      	mov	sl, r3
 80012bc:	464b      	mov	r3, r9
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d900      	bls.n	80012c4 <__aeabi_ddiv+0x88>
 80012c2:	e0ef      	b.n	80014a4 <__aeabi_ddiv+0x268>
 80012c4:	4970      	ldr	r1, [pc, #448]	; (8001488 <__aeabi_ddiv+0x24c>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	58cb      	ldr	r3, [r1, r3]
 80012ca:	469f      	mov	pc, r3
 80012cc:	4b6f      	ldr	r3, [pc, #444]	; (800148c <__aeabi_ddiv+0x250>)
 80012ce:	4652      	mov	r2, sl
 80012d0:	469c      	mov	ip, r3
 80012d2:	4322      	orrs	r2, r4
 80012d4:	44e3      	add	fp, ip
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_ddiv+0xa0>
 80012da:	e095      	b.n	8001408 <__aeabi_ddiv+0x1cc>
 80012dc:	4649      	mov	r1, r9
 80012de:	2302      	movs	r3, #2
 80012e0:	4319      	orrs	r1, r3
 80012e2:	4689      	mov	r9, r1
 80012e4:	2400      	movs	r4, #0
 80012e6:	2002      	movs	r0, #2
 80012e8:	e7e5      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 80012ea:	2300      	movs	r3, #0
 80012ec:	2400      	movs	r4, #0
 80012ee:	2500      	movs	r5, #0
 80012f0:	4652      	mov	r2, sl
 80012f2:	051b      	lsls	r3, r3, #20
 80012f4:	4323      	orrs	r3, r4
 80012f6:	07d2      	lsls	r2, r2, #31
 80012f8:	4313      	orrs	r3, r2
 80012fa:	0028      	movs	r0, r5
 80012fc:	0019      	movs	r1, r3
 80012fe:	b005      	add	sp, #20
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	2400      	movs	r4, #0
 800130e:	2500      	movs	r5, #0
 8001310:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <__aeabi_ddiv+0x244>)
 8001312:	e7ed      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 8001314:	464b      	mov	r3, r9
 8001316:	4323      	orrs	r3, r4
 8001318:	4698      	mov	r8, r3
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0xe2>
 800131c:	e089      	b.n	8001432 <__aeabi_ddiv+0x1f6>
 800131e:	2c00      	cmp	r4, #0
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0xe8>
 8001322:	e1e0      	b.n	80016e6 <__aeabi_ddiv+0x4aa>
 8001324:	0020      	movs	r0, r4
 8001326:	f000 fd43 	bl	8001db0 <__clzsi2>
 800132a:	0001      	movs	r1, r0
 800132c:	0002      	movs	r2, r0
 800132e:	390b      	subs	r1, #11
 8001330:	231d      	movs	r3, #29
 8001332:	1a5b      	subs	r3, r3, r1
 8001334:	4649      	mov	r1, r9
 8001336:	0010      	movs	r0, r2
 8001338:	40d9      	lsrs	r1, r3
 800133a:	3808      	subs	r0, #8
 800133c:	4084      	lsls	r4, r0
 800133e:	000b      	movs	r3, r1
 8001340:	464d      	mov	r5, r9
 8001342:	4323      	orrs	r3, r4
 8001344:	4698      	mov	r8, r3
 8001346:	4085      	lsls	r5, r0
 8001348:	4851      	ldr	r0, [pc, #324]	; (8001490 <__aeabi_ddiv+0x254>)
 800134a:	033c      	lsls	r4, r7, #12
 800134c:	1a83      	subs	r3, r0, r2
 800134e:	469b      	mov	fp, r3
 8001350:	2300      	movs	r3, #0
 8001352:	4699      	mov	r9, r3
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	007b      	lsls	r3, r7, #1
 8001358:	4650      	mov	r0, sl
 800135a:	0b24      	lsrs	r4, r4, #12
 800135c:	0d5b      	lsrs	r3, r3, #21
 800135e:	0fff      	lsrs	r7, r7, #31
 8001360:	2b00      	cmp	r3, #0
 8001362:	d197      	bne.n	8001294 <__aeabi_ddiv+0x58>
 8001364:	4652      	mov	r2, sl
 8001366:	4322      	orrs	r2, r4
 8001368:	d055      	beq.n	8001416 <__aeabi_ddiv+0x1da>
 800136a:	2c00      	cmp	r4, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x134>
 800136e:	e1ca      	b.n	8001706 <__aeabi_ddiv+0x4ca>
 8001370:	0020      	movs	r0, r4
 8001372:	f000 fd1d 	bl	8001db0 <__clzsi2>
 8001376:	0002      	movs	r2, r0
 8001378:	3a0b      	subs	r2, #11
 800137a:	231d      	movs	r3, #29
 800137c:	0001      	movs	r1, r0
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	4652      	mov	r2, sl
 8001382:	3908      	subs	r1, #8
 8001384:	40da      	lsrs	r2, r3
 8001386:	408c      	lsls	r4, r1
 8001388:	4314      	orrs	r4, r2
 800138a:	4652      	mov	r2, sl
 800138c:	408a      	lsls	r2, r1
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <__aeabi_ddiv+0x258>)
 8001390:	4458      	add	r0, fp
 8001392:	469b      	mov	fp, r3
 8001394:	4483      	add	fp, r0
 8001396:	2000      	movs	r0, #0
 8001398:	e78d      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 800139a:	464b      	mov	r3, r9
 800139c:	4323      	orrs	r3, r4
 800139e:	4698      	mov	r8, r3
 80013a0:	d140      	bne.n	8001424 <__aeabi_ddiv+0x1e8>
 80013a2:	2308      	movs	r3, #8
 80013a4:	4699      	mov	r9, r3
 80013a6:	3b06      	subs	r3, #6
 80013a8:	2500      	movs	r5, #0
 80013aa:	4683      	mov	fp, r0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	e769      	b.n	8001284 <__aeabi_ddiv+0x48>
 80013b0:	46b2      	mov	sl, r6
 80013b2:	9b00      	ldr	r3, [sp, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d0a9      	beq.n	800130c <__aeabi_ddiv+0xd0>
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x182>
 80013bc:	e211      	b.n	80017e2 <__aeabi_ddiv+0x5a6>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d093      	beq.n	80012ea <__aeabi_ddiv+0xae>
 80013c2:	4a35      	ldr	r2, [pc, #212]	; (8001498 <__aeabi_ddiv+0x25c>)
 80013c4:	445a      	add	r2, fp
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	dc00      	bgt.n	80013cc <__aeabi_ddiv+0x190>
 80013ca:	e13c      	b.n	8001646 <__aeabi_ddiv+0x40a>
 80013cc:	076b      	lsls	r3, r5, #29
 80013ce:	d000      	beq.n	80013d2 <__aeabi_ddiv+0x196>
 80013d0:	e1a7      	b.n	8001722 <__aeabi_ddiv+0x4e6>
 80013d2:	08ed      	lsrs	r5, r5, #3
 80013d4:	4643      	mov	r3, r8
 80013d6:	01db      	lsls	r3, r3, #7
 80013d8:	d506      	bpl.n	80013e8 <__aeabi_ddiv+0x1ac>
 80013da:	4642      	mov	r2, r8
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <__aeabi_ddiv+0x260>)
 80013de:	401a      	ands	r2, r3
 80013e0:	4690      	mov	r8, r2
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	00d2      	lsls	r2, r2, #3
 80013e6:	445a      	add	r2, fp
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <__aeabi_ddiv+0x264>)
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dc8e      	bgt.n	800130c <__aeabi_ddiv+0xd0>
 80013ee:	4643      	mov	r3, r8
 80013f0:	0552      	lsls	r2, r2, #21
 80013f2:	0758      	lsls	r0, r3, #29
 80013f4:	025c      	lsls	r4, r3, #9
 80013f6:	4305      	orrs	r5, r0
 80013f8:	0b24      	lsrs	r4, r4, #12
 80013fa:	0d53      	lsrs	r3, r2, #21
 80013fc:	e778      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80013fe:	46ba      	mov	sl, r7
 8001400:	46a0      	mov	r8, r4
 8001402:	0015      	movs	r5, r2
 8001404:	9000      	str	r0, [sp, #0]
 8001406:	e7d4      	b.n	80013b2 <__aeabi_ddiv+0x176>
 8001408:	464a      	mov	r2, r9
 800140a:	2303      	movs	r3, #3
 800140c:	431a      	orrs	r2, r3
 800140e:	4691      	mov	r9, r2
 8001410:	2003      	movs	r0, #3
 8001412:	4652      	mov	r2, sl
 8001414:	e74f      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 8001416:	4649      	mov	r1, r9
 8001418:	2301      	movs	r3, #1
 800141a:	4319      	orrs	r1, r3
 800141c:	4689      	mov	r9, r1
 800141e:	2400      	movs	r4, #0
 8001420:	2001      	movs	r0, #1
 8001422:	e748      	b.n	80012b6 <__aeabi_ddiv+0x7a>
 8001424:	230c      	movs	r3, #12
 8001426:	4699      	mov	r9, r3
 8001428:	3b09      	subs	r3, #9
 800142a:	46a0      	mov	r8, r4
 800142c:	4683      	mov	fp, r0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	e728      	b.n	8001284 <__aeabi_ddiv+0x48>
 8001432:	2304      	movs	r3, #4
 8001434:	4699      	mov	r9, r3
 8001436:	2300      	movs	r3, #0
 8001438:	469b      	mov	fp, r3
 800143a:	3301      	adds	r3, #1
 800143c:	2500      	movs	r5, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	e720      	b.n	8001284 <__aeabi_ddiv+0x48>
 8001442:	2300      	movs	r3, #0
 8001444:	2480      	movs	r4, #128	; 0x80
 8001446:	469a      	mov	sl, r3
 8001448:	2500      	movs	r5, #0
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <__aeabi_ddiv+0x244>)
 800144c:	0324      	lsls	r4, r4, #12
 800144e:	e74f      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	4641      	mov	r1, r8
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d008      	beq.n	800146c <__aeabi_ddiv+0x230>
 800145a:	421c      	tst	r4, r3
 800145c:	d106      	bne.n	800146c <__aeabi_ddiv+0x230>
 800145e:	431c      	orrs	r4, r3
 8001460:	0324      	lsls	r4, r4, #12
 8001462:	46ba      	mov	sl, r7
 8001464:	0015      	movs	r5, r2
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <__aeabi_ddiv+0x244>)
 8001468:	0b24      	lsrs	r4, r4, #12
 800146a:	e741      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 800146c:	2480      	movs	r4, #128	; 0x80
 800146e:	4643      	mov	r3, r8
 8001470:	0324      	lsls	r4, r4, #12
 8001472:	431c      	orrs	r4, r3
 8001474:	0324      	lsls	r4, r4, #12
 8001476:	46b2      	mov	sl, r6
 8001478:	4b01      	ldr	r3, [pc, #4]	; (8001480 <__aeabi_ddiv+0x244>)
 800147a:	0b24      	lsrs	r4, r4, #12
 800147c:	e738      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	000007ff 	.word	0x000007ff
 8001484:	fffffc01 	.word	0xfffffc01
 8001488:	080076c4 	.word	0x080076c4
 800148c:	fffff801 	.word	0xfffff801
 8001490:	fffffc0d 	.word	0xfffffc0d
 8001494:	000003f3 	.word	0x000003f3
 8001498:	000003ff 	.word	0x000003ff
 800149c:	feffffff 	.word	0xfeffffff
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	4544      	cmp	r4, r8
 80014a6:	d200      	bcs.n	80014aa <__aeabi_ddiv+0x26e>
 80014a8:	e116      	b.n	80016d8 <__aeabi_ddiv+0x49c>
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x272>
 80014ac:	e111      	b.n	80016d2 <__aeabi_ddiv+0x496>
 80014ae:	2301      	movs	r3, #1
 80014b0:	425b      	negs	r3, r3
 80014b2:	469c      	mov	ip, r3
 80014b4:	002e      	movs	r6, r5
 80014b6:	4640      	mov	r0, r8
 80014b8:	2500      	movs	r5, #0
 80014ba:	44e3      	add	fp, ip
 80014bc:	0223      	lsls	r3, r4, #8
 80014be:	0e14      	lsrs	r4, r2, #24
 80014c0:	431c      	orrs	r4, r3
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	4699      	mov	r9, r3
 80014c6:	0423      	lsls	r3, r4, #16
 80014c8:	0c1f      	lsrs	r7, r3, #16
 80014ca:	0212      	lsls	r2, r2, #8
 80014cc:	4649      	mov	r1, r9
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	9701      	str	r7, [sp, #4]
 80014d2:	f7fe fe9f 	bl	8000214 <__aeabi_uidivmod>
 80014d6:	0002      	movs	r2, r0
 80014d8:	437a      	muls	r2, r7
 80014da:	040b      	lsls	r3, r1, #16
 80014dc:	0c31      	lsrs	r1, r6, #16
 80014de:	4680      	mov	r8, r0
 80014e0:	4319      	orrs	r1, r3
 80014e2:	428a      	cmp	r2, r1
 80014e4:	d90b      	bls.n	80014fe <__aeabi_ddiv+0x2c2>
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
 80014ea:	469c      	mov	ip, r3
 80014ec:	1909      	adds	r1, r1, r4
 80014ee:	44e0      	add	r8, ip
 80014f0:	428c      	cmp	r4, r1
 80014f2:	d804      	bhi.n	80014fe <__aeabi_ddiv+0x2c2>
 80014f4:	428a      	cmp	r2, r1
 80014f6:	d902      	bls.n	80014fe <__aeabi_ddiv+0x2c2>
 80014f8:	1e83      	subs	r3, r0, #2
 80014fa:	4698      	mov	r8, r3
 80014fc:	1909      	adds	r1, r1, r4
 80014fe:	1a88      	subs	r0, r1, r2
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fe87 	bl	8000214 <__aeabi_uidivmod>
 8001506:	0409      	lsls	r1, r1, #16
 8001508:	468c      	mov	ip, r1
 800150a:	0431      	lsls	r1, r6, #16
 800150c:	4666      	mov	r6, ip
 800150e:	9a01      	ldr	r2, [sp, #4]
 8001510:	0c09      	lsrs	r1, r1, #16
 8001512:	4342      	muls	r2, r0
 8001514:	0003      	movs	r3, r0
 8001516:	4331      	orrs	r1, r6
 8001518:	428a      	cmp	r2, r1
 800151a:	d904      	bls.n	8001526 <__aeabi_ddiv+0x2ea>
 800151c:	1909      	adds	r1, r1, r4
 800151e:	3b01      	subs	r3, #1
 8001520:	428c      	cmp	r4, r1
 8001522:	d800      	bhi.n	8001526 <__aeabi_ddiv+0x2ea>
 8001524:	e111      	b.n	800174a <__aeabi_ddiv+0x50e>
 8001526:	1a89      	subs	r1, r1, r2
 8001528:	4642      	mov	r2, r8
 800152a:	9e00      	ldr	r6, [sp, #0]
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	0c33      	lsrs	r3, r6, #16
 8001532:	001f      	movs	r7, r3
 8001534:	0c10      	lsrs	r0, r2, #16
 8001536:	4690      	mov	r8, r2
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	0413      	lsls	r3, r2, #16
 800153c:	0432      	lsls	r2, r6, #16
 800153e:	0c16      	lsrs	r6, r2, #16
 8001540:	0032      	movs	r2, r6
 8001542:	0c1b      	lsrs	r3, r3, #16
 8001544:	435a      	muls	r2, r3
 8001546:	9603      	str	r6, [sp, #12]
 8001548:	437b      	muls	r3, r7
 800154a:	4346      	muls	r6, r0
 800154c:	4378      	muls	r0, r7
 800154e:	0c17      	lsrs	r7, r2, #16
 8001550:	46bc      	mov	ip, r7
 8001552:	199b      	adds	r3, r3, r6
 8001554:	4463      	add	r3, ip
 8001556:	429e      	cmp	r6, r3
 8001558:	d903      	bls.n	8001562 <__aeabi_ddiv+0x326>
 800155a:	2680      	movs	r6, #128	; 0x80
 800155c:	0276      	lsls	r6, r6, #9
 800155e:	46b4      	mov	ip, r6
 8001560:	4460      	add	r0, ip
 8001562:	0c1e      	lsrs	r6, r3, #16
 8001564:	1830      	adds	r0, r6, r0
 8001566:	0416      	lsls	r6, r2, #16
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	0c36      	lsrs	r6, r6, #16
 800156c:	199e      	adds	r6, r3, r6
 800156e:	4281      	cmp	r1, r0
 8001570:	d200      	bcs.n	8001574 <__aeabi_ddiv+0x338>
 8001572:	e09c      	b.n	80016ae <__aeabi_ddiv+0x472>
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x33c>
 8001576:	e097      	b.n	80016a8 <__aeabi_ddiv+0x46c>
 8001578:	1bae      	subs	r6, r5, r6
 800157a:	1a09      	subs	r1, r1, r0
 800157c:	42b5      	cmp	r5, r6
 800157e:	4180      	sbcs	r0, r0
 8001580:	4240      	negs	r0, r0
 8001582:	1a08      	subs	r0, r1, r0
 8001584:	4284      	cmp	r4, r0
 8001586:	d100      	bne.n	800158a <__aeabi_ddiv+0x34e>
 8001588:	e111      	b.n	80017ae <__aeabi_ddiv+0x572>
 800158a:	4649      	mov	r1, r9
 800158c:	f7fe fe42 	bl	8000214 <__aeabi_uidivmod>
 8001590:	9a01      	ldr	r2, [sp, #4]
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	4342      	muls	r2, r0
 8001596:	0c31      	lsrs	r1, r6, #16
 8001598:	0005      	movs	r5, r0
 800159a:	4319      	orrs	r1, r3
 800159c:	428a      	cmp	r2, r1
 800159e:	d907      	bls.n	80015b0 <__aeabi_ddiv+0x374>
 80015a0:	1909      	adds	r1, r1, r4
 80015a2:	3d01      	subs	r5, #1
 80015a4:	428c      	cmp	r4, r1
 80015a6:	d803      	bhi.n	80015b0 <__aeabi_ddiv+0x374>
 80015a8:	428a      	cmp	r2, r1
 80015aa:	d901      	bls.n	80015b0 <__aeabi_ddiv+0x374>
 80015ac:	1e85      	subs	r5, r0, #2
 80015ae:	1909      	adds	r1, r1, r4
 80015b0:	1a88      	subs	r0, r1, r2
 80015b2:	4649      	mov	r1, r9
 80015b4:	f7fe fe2e 	bl	8000214 <__aeabi_uidivmod>
 80015b8:	0409      	lsls	r1, r1, #16
 80015ba:	468c      	mov	ip, r1
 80015bc:	0431      	lsls	r1, r6, #16
 80015be:	4666      	mov	r6, ip
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	0c09      	lsrs	r1, r1, #16
 80015c4:	4342      	muls	r2, r0
 80015c6:	0003      	movs	r3, r0
 80015c8:	4331      	orrs	r1, r6
 80015ca:	428a      	cmp	r2, r1
 80015cc:	d907      	bls.n	80015de <__aeabi_ddiv+0x3a2>
 80015ce:	1909      	adds	r1, r1, r4
 80015d0:	3b01      	subs	r3, #1
 80015d2:	428c      	cmp	r4, r1
 80015d4:	d803      	bhi.n	80015de <__aeabi_ddiv+0x3a2>
 80015d6:	428a      	cmp	r2, r1
 80015d8:	d901      	bls.n	80015de <__aeabi_ddiv+0x3a2>
 80015da:	1e83      	subs	r3, r0, #2
 80015dc:	1909      	adds	r1, r1, r4
 80015de:	9e03      	ldr	r6, [sp, #12]
 80015e0:	1a89      	subs	r1, r1, r2
 80015e2:	0032      	movs	r2, r6
 80015e4:	042d      	lsls	r5, r5, #16
 80015e6:	431d      	orrs	r5, r3
 80015e8:	9f02      	ldr	r7, [sp, #8]
 80015ea:	042b      	lsls	r3, r5, #16
 80015ec:	0c1b      	lsrs	r3, r3, #16
 80015ee:	435a      	muls	r2, r3
 80015f0:	437b      	muls	r3, r7
 80015f2:	469c      	mov	ip, r3
 80015f4:	0c28      	lsrs	r0, r5, #16
 80015f6:	4346      	muls	r6, r0
 80015f8:	0c13      	lsrs	r3, r2, #16
 80015fa:	44b4      	add	ip, r6
 80015fc:	4463      	add	r3, ip
 80015fe:	4378      	muls	r0, r7
 8001600:	429e      	cmp	r6, r3
 8001602:	d903      	bls.n	800160c <__aeabi_ddiv+0x3d0>
 8001604:	2680      	movs	r6, #128	; 0x80
 8001606:	0276      	lsls	r6, r6, #9
 8001608:	46b4      	mov	ip, r6
 800160a:	4460      	add	r0, ip
 800160c:	0c1e      	lsrs	r6, r3, #16
 800160e:	0412      	lsls	r2, r2, #16
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	0c12      	lsrs	r2, r2, #16
 8001614:	1830      	adds	r0, r6, r0
 8001616:	189b      	adds	r3, r3, r2
 8001618:	4281      	cmp	r1, r0
 800161a:	d306      	bcc.n	800162a <__aeabi_ddiv+0x3ee>
 800161c:	d002      	beq.n	8001624 <__aeabi_ddiv+0x3e8>
 800161e:	2301      	movs	r3, #1
 8001620:	431d      	orrs	r5, r3
 8001622:	e6ce      	b.n	80013c2 <__aeabi_ddiv+0x186>
 8001624:	2b00      	cmp	r3, #0
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x3ee>
 8001628:	e6cb      	b.n	80013c2 <__aeabi_ddiv+0x186>
 800162a:	1861      	adds	r1, r4, r1
 800162c:	1e6e      	subs	r6, r5, #1
 800162e:	42a1      	cmp	r1, r4
 8001630:	d200      	bcs.n	8001634 <__aeabi_ddiv+0x3f8>
 8001632:	e0a4      	b.n	800177e <__aeabi_ddiv+0x542>
 8001634:	4281      	cmp	r1, r0
 8001636:	d200      	bcs.n	800163a <__aeabi_ddiv+0x3fe>
 8001638:	e0c9      	b.n	80017ce <__aeabi_ddiv+0x592>
 800163a:	d100      	bne.n	800163e <__aeabi_ddiv+0x402>
 800163c:	e0d9      	b.n	80017f2 <__aeabi_ddiv+0x5b6>
 800163e:	0035      	movs	r5, r6
 8001640:	e7ed      	b.n	800161e <__aeabi_ddiv+0x3e2>
 8001642:	2501      	movs	r5, #1
 8001644:	426d      	negs	r5, r5
 8001646:	2101      	movs	r1, #1
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	2938      	cmp	r1, #56	; 0x38
 800164c:	dd00      	ble.n	8001650 <__aeabi_ddiv+0x414>
 800164e:	e64c      	b.n	80012ea <__aeabi_ddiv+0xae>
 8001650:	291f      	cmp	r1, #31
 8001652:	dc00      	bgt.n	8001656 <__aeabi_ddiv+0x41a>
 8001654:	e07f      	b.n	8001756 <__aeabi_ddiv+0x51a>
 8001656:	231f      	movs	r3, #31
 8001658:	425b      	negs	r3, r3
 800165a:	1a9a      	subs	r2, r3, r2
 800165c:	4643      	mov	r3, r8
 800165e:	40d3      	lsrs	r3, r2
 8001660:	2920      	cmp	r1, #32
 8001662:	d004      	beq.n	800166e <__aeabi_ddiv+0x432>
 8001664:	4644      	mov	r4, r8
 8001666:	4a65      	ldr	r2, [pc, #404]	; (80017fc <__aeabi_ddiv+0x5c0>)
 8001668:	445a      	add	r2, fp
 800166a:	4094      	lsls	r4, r2
 800166c:	4325      	orrs	r5, r4
 800166e:	1e6a      	subs	r2, r5, #1
 8001670:	4195      	sbcs	r5, r2
 8001672:	2207      	movs	r2, #7
 8001674:	432b      	orrs	r3, r5
 8001676:	0015      	movs	r5, r2
 8001678:	2400      	movs	r4, #0
 800167a:	401d      	ands	r5, r3
 800167c:	421a      	tst	r2, r3
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x446>
 8001680:	e0a1      	b.n	80017c6 <__aeabi_ddiv+0x58a>
 8001682:	220f      	movs	r2, #15
 8001684:	2400      	movs	r4, #0
 8001686:	401a      	ands	r2, r3
 8001688:	2a04      	cmp	r2, #4
 800168a:	d100      	bne.n	800168e <__aeabi_ddiv+0x452>
 800168c:	e098      	b.n	80017c0 <__aeabi_ddiv+0x584>
 800168e:	1d1a      	adds	r2, r3, #4
 8001690:	429a      	cmp	r2, r3
 8001692:	419b      	sbcs	r3, r3
 8001694:	425b      	negs	r3, r3
 8001696:	18e4      	adds	r4, r4, r3
 8001698:	0013      	movs	r3, r2
 800169a:	0222      	lsls	r2, r4, #8
 800169c:	d400      	bmi.n	80016a0 <__aeabi_ddiv+0x464>
 800169e:	e08f      	b.n	80017c0 <__aeabi_ddiv+0x584>
 80016a0:	2301      	movs	r3, #1
 80016a2:	2400      	movs	r4, #0
 80016a4:	2500      	movs	r5, #0
 80016a6:	e623      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80016a8:	42b5      	cmp	r5, r6
 80016aa:	d300      	bcc.n	80016ae <__aeabi_ddiv+0x472>
 80016ac:	e764      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80016ae:	4643      	mov	r3, r8
 80016b0:	1e5a      	subs	r2, r3, #1
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	469c      	mov	ip, r3
 80016b6:	4465      	add	r5, ip
 80016b8:	001f      	movs	r7, r3
 80016ba:	429d      	cmp	r5, r3
 80016bc:	419b      	sbcs	r3, r3
 80016be:	425b      	negs	r3, r3
 80016c0:	191b      	adds	r3, r3, r4
 80016c2:	18c9      	adds	r1, r1, r3
 80016c4:	428c      	cmp	r4, r1
 80016c6:	d23a      	bcs.n	800173e <__aeabi_ddiv+0x502>
 80016c8:	4288      	cmp	r0, r1
 80016ca:	d863      	bhi.n	8001794 <__aeabi_ddiv+0x558>
 80016cc:	d060      	beq.n	8001790 <__aeabi_ddiv+0x554>
 80016ce:	4690      	mov	r8, r2
 80016d0:	e752      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80016d2:	42aa      	cmp	r2, r5
 80016d4:	d900      	bls.n	80016d8 <__aeabi_ddiv+0x49c>
 80016d6:	e6ea      	b.n	80014ae <__aeabi_ddiv+0x272>
 80016d8:	4643      	mov	r3, r8
 80016da:	07de      	lsls	r6, r3, #31
 80016dc:	0858      	lsrs	r0, r3, #1
 80016de:	086b      	lsrs	r3, r5, #1
 80016e0:	431e      	orrs	r6, r3
 80016e2:	07ed      	lsls	r5, r5, #31
 80016e4:	e6ea      	b.n	80014bc <__aeabi_ddiv+0x280>
 80016e6:	4648      	mov	r0, r9
 80016e8:	f000 fb62 	bl	8001db0 <__clzsi2>
 80016ec:	0001      	movs	r1, r0
 80016ee:	0002      	movs	r2, r0
 80016f0:	3115      	adds	r1, #21
 80016f2:	3220      	adds	r2, #32
 80016f4:	291c      	cmp	r1, #28
 80016f6:	dc00      	bgt.n	80016fa <__aeabi_ddiv+0x4be>
 80016f8:	e61a      	b.n	8001330 <__aeabi_ddiv+0xf4>
 80016fa:	464b      	mov	r3, r9
 80016fc:	3808      	subs	r0, #8
 80016fe:	4083      	lsls	r3, r0
 8001700:	2500      	movs	r5, #0
 8001702:	4698      	mov	r8, r3
 8001704:	e620      	b.n	8001348 <__aeabi_ddiv+0x10c>
 8001706:	f000 fb53 	bl	8001db0 <__clzsi2>
 800170a:	0003      	movs	r3, r0
 800170c:	001a      	movs	r2, r3
 800170e:	3215      	adds	r2, #21
 8001710:	3020      	adds	r0, #32
 8001712:	2a1c      	cmp	r2, #28
 8001714:	dc00      	bgt.n	8001718 <__aeabi_ddiv+0x4dc>
 8001716:	e630      	b.n	800137a <__aeabi_ddiv+0x13e>
 8001718:	4654      	mov	r4, sl
 800171a:	3b08      	subs	r3, #8
 800171c:	2200      	movs	r2, #0
 800171e:	409c      	lsls	r4, r3
 8001720:	e635      	b.n	800138e <__aeabi_ddiv+0x152>
 8001722:	230f      	movs	r3, #15
 8001724:	402b      	ands	r3, r5
 8001726:	2b04      	cmp	r3, #4
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x4f0>
 800172a:	e652      	b.n	80013d2 <__aeabi_ddiv+0x196>
 800172c:	2305      	movs	r3, #5
 800172e:	425b      	negs	r3, r3
 8001730:	42ab      	cmp	r3, r5
 8001732:	419b      	sbcs	r3, r3
 8001734:	3504      	adds	r5, #4
 8001736:	425b      	negs	r3, r3
 8001738:	08ed      	lsrs	r5, r5, #3
 800173a:	4498      	add	r8, r3
 800173c:	e64a      	b.n	80013d4 <__aeabi_ddiv+0x198>
 800173e:	428c      	cmp	r4, r1
 8001740:	d1c5      	bne.n	80016ce <__aeabi_ddiv+0x492>
 8001742:	42af      	cmp	r7, r5
 8001744:	d9c0      	bls.n	80016c8 <__aeabi_ddiv+0x48c>
 8001746:	4690      	mov	r8, r2
 8001748:	e716      	b.n	8001578 <__aeabi_ddiv+0x33c>
 800174a:	428a      	cmp	r2, r1
 800174c:	d800      	bhi.n	8001750 <__aeabi_ddiv+0x514>
 800174e:	e6ea      	b.n	8001526 <__aeabi_ddiv+0x2ea>
 8001750:	1e83      	subs	r3, r0, #2
 8001752:	1909      	adds	r1, r1, r4
 8001754:	e6e7      	b.n	8001526 <__aeabi_ddiv+0x2ea>
 8001756:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <__aeabi_ddiv+0x5c4>)
 8001758:	0028      	movs	r0, r5
 800175a:	445a      	add	r2, fp
 800175c:	4643      	mov	r3, r8
 800175e:	4095      	lsls	r5, r2
 8001760:	4093      	lsls	r3, r2
 8001762:	40c8      	lsrs	r0, r1
 8001764:	1e6a      	subs	r2, r5, #1
 8001766:	4195      	sbcs	r5, r2
 8001768:	4644      	mov	r4, r8
 800176a:	4303      	orrs	r3, r0
 800176c:	432b      	orrs	r3, r5
 800176e:	40cc      	lsrs	r4, r1
 8001770:	075a      	lsls	r2, r3, #29
 8001772:	d092      	beq.n	800169a <__aeabi_ddiv+0x45e>
 8001774:	220f      	movs	r2, #15
 8001776:	401a      	ands	r2, r3
 8001778:	2a04      	cmp	r2, #4
 800177a:	d188      	bne.n	800168e <__aeabi_ddiv+0x452>
 800177c:	e78d      	b.n	800169a <__aeabi_ddiv+0x45e>
 800177e:	0035      	movs	r5, r6
 8001780:	4281      	cmp	r1, r0
 8001782:	d000      	beq.n	8001786 <__aeabi_ddiv+0x54a>
 8001784:	e74b      	b.n	800161e <__aeabi_ddiv+0x3e2>
 8001786:	9a00      	ldr	r2, [sp, #0]
 8001788:	4293      	cmp	r3, r2
 800178a:	d000      	beq.n	800178e <__aeabi_ddiv+0x552>
 800178c:	e747      	b.n	800161e <__aeabi_ddiv+0x3e2>
 800178e:	e618      	b.n	80013c2 <__aeabi_ddiv+0x186>
 8001790:	42ae      	cmp	r6, r5
 8001792:	d99c      	bls.n	80016ce <__aeabi_ddiv+0x492>
 8001794:	2302      	movs	r3, #2
 8001796:	425b      	negs	r3, r3
 8001798:	469c      	mov	ip, r3
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	44e0      	add	r8, ip
 800179e:	469c      	mov	ip, r3
 80017a0:	4465      	add	r5, ip
 80017a2:	429d      	cmp	r5, r3
 80017a4:	419b      	sbcs	r3, r3
 80017a6:	425b      	negs	r3, r3
 80017a8:	191b      	adds	r3, r3, r4
 80017aa:	18c9      	adds	r1, r1, r3
 80017ac:	e6e4      	b.n	8001578 <__aeabi_ddiv+0x33c>
 80017ae:	4a15      	ldr	r2, [pc, #84]	; (8001804 <__aeabi_ddiv+0x5c8>)
 80017b0:	445a      	add	r2, fp
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_ddiv+0x57c>
 80017b6:	e744      	b.n	8001642 <__aeabi_ddiv+0x406>
 80017b8:	2301      	movs	r3, #1
 80017ba:	2500      	movs	r5, #0
 80017bc:	4498      	add	r8, r3
 80017be:	e609      	b.n	80013d4 <__aeabi_ddiv+0x198>
 80017c0:	0765      	lsls	r5, r4, #29
 80017c2:	0264      	lsls	r4, r4, #9
 80017c4:	0b24      	lsrs	r4, r4, #12
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	431d      	orrs	r5, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	e590      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80017ce:	9e00      	ldr	r6, [sp, #0]
 80017d0:	3d02      	subs	r5, #2
 80017d2:	0072      	lsls	r2, r6, #1
 80017d4:	42b2      	cmp	r2, r6
 80017d6:	41bf      	sbcs	r7, r7
 80017d8:	427f      	negs	r7, r7
 80017da:	193c      	adds	r4, r7, r4
 80017dc:	1909      	adds	r1, r1, r4
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	e7ce      	b.n	8001780 <__aeabi_ddiv+0x544>
 80017e2:	2480      	movs	r4, #128	; 0x80
 80017e4:	4643      	mov	r3, r8
 80017e6:	0324      	lsls	r4, r4, #12
 80017e8:	431c      	orrs	r4, r3
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <__aeabi_ddiv+0x5cc>)
 80017ee:	0b24      	lsrs	r4, r4, #12
 80017f0:	e57e      	b.n	80012f0 <__aeabi_ddiv+0xb4>
 80017f2:	9a00      	ldr	r2, [sp, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d3ea      	bcc.n	80017ce <__aeabi_ddiv+0x592>
 80017f8:	0035      	movs	r5, r6
 80017fa:	e7c4      	b.n	8001786 <__aeabi_ddiv+0x54a>
 80017fc:	0000043e 	.word	0x0000043e
 8001800:	0000041e 	.word	0x0000041e
 8001804:	000003ff 	.word	0x000003ff
 8001808:	000007ff 	.word	0x000007ff

0800180c <__aeabi_dmul>:
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	4657      	mov	r7, sl
 8001810:	464e      	mov	r6, r9
 8001812:	4645      	mov	r5, r8
 8001814:	46de      	mov	lr, fp
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	4698      	mov	r8, r3
 800181a:	030c      	lsls	r4, r1, #12
 800181c:	004b      	lsls	r3, r1, #1
 800181e:	0006      	movs	r6, r0
 8001820:	4692      	mov	sl, r2
 8001822:	b087      	sub	sp, #28
 8001824:	0b24      	lsrs	r4, r4, #12
 8001826:	0d5b      	lsrs	r3, r3, #21
 8001828:	0fcf      	lsrs	r7, r1, #31
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <__aeabi_dmul+0xfc>
 800182e:	4add      	ldr	r2, [pc, #884]	; (8001ba4 <__aeabi_dmul+0x398>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d100      	bne.n	8001836 <__aeabi_dmul+0x2a>
 8001834:	e086      	b.n	8001944 <__aeabi_dmul+0x138>
 8001836:	0f42      	lsrs	r2, r0, #29
 8001838:	00e4      	lsls	r4, r4, #3
 800183a:	4314      	orrs	r4, r2
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	4314      	orrs	r4, r2
 8001842:	4ad9      	ldr	r2, [pc, #868]	; (8001ba8 <__aeabi_dmul+0x39c>)
 8001844:	00c5      	lsls	r5, r0, #3
 8001846:	4694      	mov	ip, r2
 8001848:	4463      	add	r3, ip
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	4699      	mov	r9, r3
 8001850:	469b      	mov	fp, r3
 8001852:	4643      	mov	r3, r8
 8001854:	4642      	mov	r2, r8
 8001856:	031e      	lsls	r6, r3, #12
 8001858:	0fd2      	lsrs	r2, r2, #31
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4650      	mov	r0, sl
 800185e:	4690      	mov	r8, r2
 8001860:	0b36      	lsrs	r6, r6, #12
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x5c>
 8001866:	e078      	b.n	800195a <__aeabi_dmul+0x14e>
 8001868:	4ace      	ldr	r2, [pc, #824]	; (8001ba4 <__aeabi_dmul+0x398>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d01d      	beq.n	80018aa <__aeabi_dmul+0x9e>
 800186e:	49ce      	ldr	r1, [pc, #824]	; (8001ba8 <__aeabi_dmul+0x39c>)
 8001870:	0f42      	lsrs	r2, r0, #29
 8001872:	468c      	mov	ip, r1
 8001874:	9900      	ldr	r1, [sp, #0]
 8001876:	4463      	add	r3, ip
 8001878:	00f6      	lsls	r6, r6, #3
 800187a:	468c      	mov	ip, r1
 800187c:	4316      	orrs	r6, r2
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	449c      	add	ip, r3
 8001882:	0412      	lsls	r2, r2, #16
 8001884:	4663      	mov	r3, ip
 8001886:	4316      	orrs	r6, r2
 8001888:	00c2      	lsls	r2, r0, #3
 800188a:	2000      	movs	r0, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	9900      	ldr	r1, [sp, #0]
 8001890:	4643      	mov	r3, r8
 8001892:	3101      	adds	r1, #1
 8001894:	468c      	mov	ip, r1
 8001896:	4649      	mov	r1, r9
 8001898:	407b      	eors	r3, r7
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	290f      	cmp	r1, #15
 800189e:	d900      	bls.n	80018a2 <__aeabi_dmul+0x96>
 80018a0:	e07e      	b.n	80019a0 <__aeabi_dmul+0x194>
 80018a2:	4bc2      	ldr	r3, [pc, #776]	; (8001bac <__aeabi_dmul+0x3a0>)
 80018a4:	0089      	lsls	r1, r1, #2
 80018a6:	5859      	ldr	r1, [r3, r1]
 80018a8:	468f      	mov	pc, r1
 80018aa:	4652      	mov	r2, sl
 80018ac:	9b00      	ldr	r3, [sp, #0]
 80018ae:	4332      	orrs	r2, r6
 80018b0:	d000      	beq.n	80018b4 <__aeabi_dmul+0xa8>
 80018b2:	e156      	b.n	8001b62 <__aeabi_dmul+0x356>
 80018b4:	49bb      	ldr	r1, [pc, #748]	; (8001ba4 <__aeabi_dmul+0x398>)
 80018b6:	2600      	movs	r6, #0
 80018b8:	468c      	mov	ip, r1
 80018ba:	4463      	add	r3, ip
 80018bc:	4649      	mov	r1, r9
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	4319      	orrs	r1, r3
 80018c4:	4689      	mov	r9, r1
 80018c6:	2002      	movs	r0, #2
 80018c8:	e7e1      	b.n	800188e <__aeabi_dmul+0x82>
 80018ca:	4643      	mov	r3, r8
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	0034      	movs	r4, r6
 80018d0:	0015      	movs	r5, r2
 80018d2:	4683      	mov	fp, r0
 80018d4:	465b      	mov	r3, fp
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d05e      	beq.n	8001998 <__aeabi_dmul+0x18c>
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dmul+0xd4>
 80018de:	e1f3      	b.n	8001cc8 <__aeabi_dmul+0x4bc>
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dmul+0xda>
 80018e4:	e118      	b.n	8001b18 <__aeabi_dmul+0x30c>
 80018e6:	2200      	movs	r2, #0
 80018e8:	2400      	movs	r4, #0
 80018ea:	2500      	movs	r5, #0
 80018ec:	9b01      	ldr	r3, [sp, #4]
 80018ee:	0512      	lsls	r2, r2, #20
 80018f0:	4322      	orrs	r2, r4
 80018f2:	07db      	lsls	r3, r3, #31
 80018f4:	431a      	orrs	r2, r3
 80018f6:	0028      	movs	r0, r5
 80018f8:	0011      	movs	r1, r2
 80018fa:	b007      	add	sp, #28
 80018fc:	bcf0      	pop	{r4, r5, r6, r7}
 80018fe:	46bb      	mov	fp, r7
 8001900:	46b2      	mov	sl, r6
 8001902:	46a9      	mov	r9, r5
 8001904:	46a0      	mov	r8, r4
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0025      	movs	r5, r4
 800190a:	4305      	orrs	r5, r0
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0x104>
 800190e:	e141      	b.n	8001b94 <__aeabi_dmul+0x388>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d100      	bne.n	8001916 <__aeabi_dmul+0x10a>
 8001914:	e1ad      	b.n	8001c72 <__aeabi_dmul+0x466>
 8001916:	0020      	movs	r0, r4
 8001918:	f000 fa4a 	bl	8001db0 <__clzsi2>
 800191c:	0001      	movs	r1, r0
 800191e:	0002      	movs	r2, r0
 8001920:	390b      	subs	r1, #11
 8001922:	231d      	movs	r3, #29
 8001924:	0010      	movs	r0, r2
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	0031      	movs	r1, r6
 800192a:	0035      	movs	r5, r6
 800192c:	3808      	subs	r0, #8
 800192e:	4084      	lsls	r4, r0
 8001930:	40d9      	lsrs	r1, r3
 8001932:	4085      	lsls	r5, r0
 8001934:	430c      	orrs	r4, r1
 8001936:	489e      	ldr	r0, [pc, #632]	; (8001bb0 <__aeabi_dmul+0x3a4>)
 8001938:	1a83      	subs	r3, r0, r2
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	4699      	mov	r9, r3
 8001940:	469b      	mov	fp, r3
 8001942:	e786      	b.n	8001852 <__aeabi_dmul+0x46>
 8001944:	0005      	movs	r5, r0
 8001946:	4325      	orrs	r5, r4
 8001948:	d000      	beq.n	800194c <__aeabi_dmul+0x140>
 800194a:	e11c      	b.n	8001b86 <__aeabi_dmul+0x37a>
 800194c:	2208      	movs	r2, #8
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2302      	movs	r3, #2
 8001952:	2400      	movs	r4, #0
 8001954:	4691      	mov	r9, r2
 8001956:	469b      	mov	fp, r3
 8001958:	e77b      	b.n	8001852 <__aeabi_dmul+0x46>
 800195a:	4652      	mov	r2, sl
 800195c:	4332      	orrs	r2, r6
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x156>
 8001960:	e10a      	b.n	8001b78 <__aeabi_dmul+0x36c>
 8001962:	2e00      	cmp	r6, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dmul+0x15c>
 8001966:	e176      	b.n	8001c56 <__aeabi_dmul+0x44a>
 8001968:	0030      	movs	r0, r6
 800196a:	f000 fa21 	bl	8001db0 <__clzsi2>
 800196e:	0002      	movs	r2, r0
 8001970:	3a0b      	subs	r2, #11
 8001972:	231d      	movs	r3, #29
 8001974:	0001      	movs	r1, r0
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	4652      	mov	r2, sl
 800197a:	3908      	subs	r1, #8
 800197c:	40da      	lsrs	r2, r3
 800197e:	408e      	lsls	r6, r1
 8001980:	4316      	orrs	r6, r2
 8001982:	4652      	mov	r2, sl
 8001984:	408a      	lsls	r2, r1
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	4989      	ldr	r1, [pc, #548]	; (8001bb0 <__aeabi_dmul+0x3a4>)
 800198a:	1a18      	subs	r0, r3, r0
 800198c:	0003      	movs	r3, r0
 800198e:	468c      	mov	ip, r1
 8001990:	4463      	add	r3, ip
 8001992:	2000      	movs	r0, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	e77a      	b.n	800188e <__aeabi_dmul+0x82>
 8001998:	2400      	movs	r4, #0
 800199a:	2500      	movs	r5, #0
 800199c:	4a81      	ldr	r2, [pc, #516]	; (8001ba4 <__aeabi_dmul+0x398>)
 800199e:	e7a5      	b.n	80018ec <__aeabi_dmul+0xe0>
 80019a0:	0c2f      	lsrs	r7, r5, #16
 80019a2:	042d      	lsls	r5, r5, #16
 80019a4:	0c2d      	lsrs	r5, r5, #16
 80019a6:	002b      	movs	r3, r5
 80019a8:	0c11      	lsrs	r1, r2, #16
 80019aa:	0412      	lsls	r2, r2, #16
 80019ac:	0c12      	lsrs	r2, r2, #16
 80019ae:	4353      	muls	r3, r2
 80019b0:	4698      	mov	r8, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	0028      	movs	r0, r5
 80019b6:	437b      	muls	r3, r7
 80019b8:	4699      	mov	r9, r3
 80019ba:	4348      	muls	r0, r1
 80019bc:	4448      	add	r0, r9
 80019be:	4683      	mov	fp, r0
 80019c0:	4640      	mov	r0, r8
 80019c2:	000b      	movs	r3, r1
 80019c4:	0c00      	lsrs	r0, r0, #16
 80019c6:	4682      	mov	sl, r0
 80019c8:	4658      	mov	r0, fp
 80019ca:	437b      	muls	r3, r7
 80019cc:	4450      	add	r0, sl
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	4581      	cmp	r9, r0
 80019d2:	d906      	bls.n	80019e2 <__aeabi_dmul+0x1d6>
 80019d4:	469a      	mov	sl, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4699      	mov	r9, r3
 80019dc:	44ca      	add	sl, r9
 80019de:	4653      	mov	r3, sl
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	0c03      	lsrs	r3, r0, #16
 80019e4:	469b      	mov	fp, r3
 80019e6:	4643      	mov	r3, r8
 80019e8:	041b      	lsls	r3, r3, #16
 80019ea:	0400      	lsls	r0, r0, #16
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	4698      	mov	r8, r3
 80019f0:	0003      	movs	r3, r0
 80019f2:	4443      	add	r3, r8
 80019f4:	9304      	str	r3, [sp, #16]
 80019f6:	0c33      	lsrs	r3, r6, #16
 80019f8:	4699      	mov	r9, r3
 80019fa:	002b      	movs	r3, r5
 80019fc:	0436      	lsls	r6, r6, #16
 80019fe:	0c36      	lsrs	r6, r6, #16
 8001a00:	4373      	muls	r3, r6
 8001a02:	4698      	mov	r8, r3
 8001a04:	0033      	movs	r3, r6
 8001a06:	437b      	muls	r3, r7
 8001a08:	469a      	mov	sl, r3
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	435d      	muls	r5, r3
 8001a0e:	435f      	muls	r7, r3
 8001a10:	4643      	mov	r3, r8
 8001a12:	4455      	add	r5, sl
 8001a14:	0c18      	lsrs	r0, r3, #16
 8001a16:	1940      	adds	r0, r0, r5
 8001a18:	4582      	cmp	sl, r0
 8001a1a:	d903      	bls.n	8001a24 <__aeabi_dmul+0x218>
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	469a      	mov	sl, r3
 8001a22:	4457      	add	r7, sl
 8001a24:	0c05      	lsrs	r5, r0, #16
 8001a26:	19eb      	adds	r3, r5, r7
 8001a28:	9305      	str	r3, [sp, #20]
 8001a2a:	4643      	mov	r3, r8
 8001a2c:	041d      	lsls	r5, r3, #16
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	1940      	adds	r0, r0, r5
 8001a34:	0c25      	lsrs	r5, r4, #16
 8001a36:	0424      	lsls	r4, r4, #16
 8001a38:	0c24      	lsrs	r4, r4, #16
 8001a3a:	0027      	movs	r7, r4
 8001a3c:	4357      	muls	r7, r2
 8001a3e:	436a      	muls	r2, r5
 8001a40:	4690      	mov	r8, r2
 8001a42:	002a      	movs	r2, r5
 8001a44:	0c3b      	lsrs	r3, r7, #16
 8001a46:	469a      	mov	sl, r3
 8001a48:	434a      	muls	r2, r1
 8001a4a:	4361      	muls	r1, r4
 8001a4c:	4441      	add	r1, r8
 8001a4e:	4451      	add	r1, sl
 8001a50:	4483      	add	fp, r0
 8001a52:	4588      	cmp	r8, r1
 8001a54:	d903      	bls.n	8001a5e <__aeabi_dmul+0x252>
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	4442      	add	r2, r8
 8001a5e:	043f      	lsls	r7, r7, #16
 8001a60:	0c0b      	lsrs	r3, r1, #16
 8001a62:	0c3f      	lsrs	r7, r7, #16
 8001a64:	0409      	lsls	r1, r1, #16
 8001a66:	19c9      	adds	r1, r1, r7
 8001a68:	0027      	movs	r7, r4
 8001a6a:	4698      	mov	r8, r3
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4377      	muls	r7, r6
 8001a70:	435c      	muls	r4, r3
 8001a72:	436e      	muls	r6, r5
 8001a74:	435d      	muls	r5, r3
 8001a76:	0c3b      	lsrs	r3, r7, #16
 8001a78:	4699      	mov	r9, r3
 8001a7a:	19a4      	adds	r4, r4, r6
 8001a7c:	444c      	add	r4, r9
 8001a7e:	4442      	add	r2, r8
 8001a80:	9503      	str	r5, [sp, #12]
 8001a82:	42a6      	cmp	r6, r4
 8001a84:	d904      	bls.n	8001a90 <__aeabi_dmul+0x284>
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	4698      	mov	r8, r3
 8001a8c:	4445      	add	r5, r8
 8001a8e:	9503      	str	r5, [sp, #12]
 8001a90:	9b02      	ldr	r3, [sp, #8]
 8001a92:	043f      	lsls	r7, r7, #16
 8001a94:	445b      	add	r3, fp
 8001a96:	001e      	movs	r6, r3
 8001a98:	4283      	cmp	r3, r0
 8001a9a:	4180      	sbcs	r0, r0
 8001a9c:	0423      	lsls	r3, r4, #16
 8001a9e:	4698      	mov	r8, r3
 8001aa0:	9b05      	ldr	r3, [sp, #20]
 8001aa2:	0c3f      	lsrs	r7, r7, #16
 8001aa4:	4447      	add	r7, r8
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	1876      	adds	r6, r6, r1
 8001aaa:	428e      	cmp	r6, r1
 8001aac:	4189      	sbcs	r1, r1
 8001aae:	4447      	add	r7, r8
 8001ab0:	4240      	negs	r0, r0
 8001ab2:	183d      	adds	r5, r7, r0
 8001ab4:	46a8      	mov	r8, r5
 8001ab6:	4693      	mov	fp, r2
 8001ab8:	4249      	negs	r1, r1
 8001aba:	468a      	mov	sl, r1
 8001abc:	44c3      	add	fp, r8
 8001abe:	429f      	cmp	r7, r3
 8001ac0:	41bf      	sbcs	r7, r7
 8001ac2:	4580      	cmp	r8, r0
 8001ac4:	4180      	sbcs	r0, r0
 8001ac6:	9b03      	ldr	r3, [sp, #12]
 8001ac8:	44da      	add	sl, fp
 8001aca:	4698      	mov	r8, r3
 8001acc:	4653      	mov	r3, sl
 8001ace:	4240      	negs	r0, r0
 8001ad0:	427f      	negs	r7, r7
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	0c24      	lsrs	r4, r4, #16
 8001ad6:	4593      	cmp	fp, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	458a      	cmp	sl, r1
 8001adc:	4189      	sbcs	r1, r1
 8001ade:	193f      	adds	r7, r7, r4
 8001ae0:	0ddc      	lsrs	r4, r3, #23
 8001ae2:	9b04      	ldr	r3, [sp, #16]
 8001ae4:	0275      	lsls	r5, r6, #9
 8001ae6:	431d      	orrs	r5, r3
 8001ae8:	1e68      	subs	r0, r5, #1
 8001aea:	4185      	sbcs	r5, r0
 8001aec:	4653      	mov	r3, sl
 8001aee:	4252      	negs	r2, r2
 8001af0:	4249      	negs	r1, r1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	18bf      	adds	r7, r7, r2
 8001af6:	4447      	add	r7, r8
 8001af8:	0df6      	lsrs	r6, r6, #23
 8001afa:	027f      	lsls	r7, r7, #9
 8001afc:	4335      	orrs	r5, r6
 8001afe:	025a      	lsls	r2, r3, #9
 8001b00:	433c      	orrs	r4, r7
 8001b02:	4315      	orrs	r5, r2
 8001b04:	01fb      	lsls	r3, r7, #7
 8001b06:	d400      	bmi.n	8001b0a <__aeabi_dmul+0x2fe>
 8001b08:	e0c1      	b.n	8001c8e <__aeabi_dmul+0x482>
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	086a      	lsrs	r2, r5, #1
 8001b0e:	400d      	ands	r5, r1
 8001b10:	4315      	orrs	r5, r2
 8001b12:	07e2      	lsls	r2, r4, #31
 8001b14:	4315      	orrs	r5, r2
 8001b16:	0864      	lsrs	r4, r4, #1
 8001b18:	4926      	ldr	r1, [pc, #152]	; (8001bb4 <__aeabi_dmul+0x3a8>)
 8001b1a:	4461      	add	r1, ip
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	dd56      	ble.n	8001bce <__aeabi_dmul+0x3c2>
 8001b20:	076b      	lsls	r3, r5, #29
 8001b22:	d009      	beq.n	8001b38 <__aeabi_dmul+0x32c>
 8001b24:	220f      	movs	r2, #15
 8001b26:	402a      	ands	r2, r5
 8001b28:	2a04      	cmp	r2, #4
 8001b2a:	d005      	beq.n	8001b38 <__aeabi_dmul+0x32c>
 8001b2c:	1d2a      	adds	r2, r5, #4
 8001b2e:	42aa      	cmp	r2, r5
 8001b30:	41ad      	sbcs	r5, r5
 8001b32:	426d      	negs	r5, r5
 8001b34:	1964      	adds	r4, r4, r5
 8001b36:	0015      	movs	r5, r2
 8001b38:	01e3      	lsls	r3, r4, #7
 8001b3a:	d504      	bpl.n	8001b46 <__aeabi_dmul+0x33a>
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <__aeabi_dmul+0x3ac>)
 8001b40:	00c9      	lsls	r1, r1, #3
 8001b42:	4014      	ands	r4, r2
 8001b44:	4461      	add	r1, ip
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <__aeabi_dmul+0x3b0>)
 8001b48:	4291      	cmp	r1, r2
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dmul+0x342>
 8001b4c:	e724      	b.n	8001998 <__aeabi_dmul+0x18c>
 8001b4e:	0762      	lsls	r2, r4, #29
 8001b50:	08ed      	lsrs	r5, r5, #3
 8001b52:	0264      	lsls	r4, r4, #9
 8001b54:	0549      	lsls	r1, r1, #21
 8001b56:	4315      	orrs	r5, r2
 8001b58:	0b24      	lsrs	r4, r4, #12
 8001b5a:	0d4a      	lsrs	r2, r1, #21
 8001b5c:	e6c6      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001b5e:	9701      	str	r7, [sp, #4]
 8001b60:	e6b8      	b.n	80018d4 <__aeabi_dmul+0xc8>
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <__aeabi_dmul+0x398>)
 8001b64:	2003      	movs	r0, #3
 8001b66:	4694      	mov	ip, r2
 8001b68:	4463      	add	r3, ip
 8001b6a:	464a      	mov	r2, r9
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2303      	movs	r3, #3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	4691      	mov	r9, r2
 8001b74:	4652      	mov	r2, sl
 8001b76:	e68a      	b.n	800188e <__aeabi_dmul+0x82>
 8001b78:	4649      	mov	r1, r9
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4319      	orrs	r1, r3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	2600      	movs	r6, #0
 8001b82:	2001      	movs	r0, #1
 8001b84:	e683      	b.n	800188e <__aeabi_dmul+0x82>
 8001b86:	220c      	movs	r2, #12
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	0005      	movs	r5, r0
 8001b8e:	4691      	mov	r9, r2
 8001b90:	469b      	mov	fp, r3
 8001b92:	e65e      	b.n	8001852 <__aeabi_dmul+0x46>
 8001b94:	2304      	movs	r3, #4
 8001b96:	4699      	mov	r9, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	469b      	mov	fp, r3
 8001ba2:	e656      	b.n	8001852 <__aeabi_dmul+0x46>
 8001ba4:	000007ff 	.word	0x000007ff
 8001ba8:	fffffc01 	.word	0xfffffc01
 8001bac:	08007704 	.word	0x08007704
 8001bb0:	fffffc0d 	.word	0xfffffc0d
 8001bb4:	000003ff 	.word	0x000003ff
 8001bb8:	feffffff 	.word	0xfeffffff
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2480      	movs	r4, #128	; 0x80
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	0324      	lsls	r4, r4, #12
 8001bcc:	e68e      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	1a40      	subs	r0, r0, r1
 8001bd2:	2838      	cmp	r0, #56	; 0x38
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dmul+0x3cc>
 8001bd6:	e686      	b.n	80018e6 <__aeabi_dmul+0xda>
 8001bd8:	281f      	cmp	r0, #31
 8001bda:	dd5b      	ble.n	8001c94 <__aeabi_dmul+0x488>
 8001bdc:	221f      	movs	r2, #31
 8001bde:	0023      	movs	r3, r4
 8001be0:	4252      	negs	r2, r2
 8001be2:	1a51      	subs	r1, r2, r1
 8001be4:	40cb      	lsrs	r3, r1
 8001be6:	0019      	movs	r1, r3
 8001be8:	2820      	cmp	r0, #32
 8001bea:	d003      	beq.n	8001bf4 <__aeabi_dmul+0x3e8>
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <__aeabi_dmul+0x4d0>)
 8001bee:	4462      	add	r2, ip
 8001bf0:	4094      	lsls	r4, r2
 8001bf2:	4325      	orrs	r5, r4
 8001bf4:	1e6a      	subs	r2, r5, #1
 8001bf6:	4195      	sbcs	r5, r2
 8001bf8:	002a      	movs	r2, r5
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	000d      	movs	r5, r1
 8001c00:	2400      	movs	r4, #0
 8001c02:	4015      	ands	r5, r2
 8001c04:	4211      	tst	r1, r2
 8001c06:	d05b      	beq.n	8001cc0 <__aeabi_dmul+0x4b4>
 8001c08:	210f      	movs	r1, #15
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	4011      	ands	r1, r2
 8001c0e:	2904      	cmp	r1, #4
 8001c10:	d053      	beq.n	8001cba <__aeabi_dmul+0x4ae>
 8001c12:	1d11      	adds	r1, r2, #4
 8001c14:	4291      	cmp	r1, r2
 8001c16:	4192      	sbcs	r2, r2
 8001c18:	4252      	negs	r2, r2
 8001c1a:	18a4      	adds	r4, r4, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	0223      	lsls	r3, r4, #8
 8001c20:	d54b      	bpl.n	8001cba <__aeabi_dmul+0x4ae>
 8001c22:	2201      	movs	r2, #1
 8001c24:	2400      	movs	r4, #0
 8001c26:	2500      	movs	r5, #0
 8001c28:	e660      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	031b      	lsls	r3, r3, #12
 8001c2e:	421c      	tst	r4, r3
 8001c30:	d009      	beq.n	8001c46 <__aeabi_dmul+0x43a>
 8001c32:	421e      	tst	r6, r3
 8001c34:	d107      	bne.n	8001c46 <__aeabi_dmul+0x43a>
 8001c36:	4333      	orrs	r3, r6
 8001c38:	031c      	lsls	r4, r3, #12
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	0015      	movs	r5, r2
 8001c3e:	0b24      	lsrs	r4, r4, #12
 8001c40:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	e652      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	0312      	lsls	r2, r2, #12
 8001c4a:	4314      	orrs	r4, r2
 8001c4c:	0324      	lsls	r4, r4, #12
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001c50:	0b24      	lsrs	r4, r4, #12
 8001c52:	9701      	str	r7, [sp, #4]
 8001c54:	e64a      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001c56:	f000 f8ab 	bl	8001db0 <__clzsi2>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	3215      	adds	r2, #21
 8001c60:	3020      	adds	r0, #32
 8001c62:	2a1c      	cmp	r2, #28
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_dmul+0x45c>
 8001c66:	e684      	b.n	8001972 <__aeabi_dmul+0x166>
 8001c68:	4656      	mov	r6, sl
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	409e      	lsls	r6, r3
 8001c70:	e689      	b.n	8001986 <__aeabi_dmul+0x17a>
 8001c72:	f000 f89d 	bl	8001db0 <__clzsi2>
 8001c76:	0001      	movs	r1, r0
 8001c78:	0002      	movs	r2, r0
 8001c7a:	3115      	adds	r1, #21
 8001c7c:	3220      	adds	r2, #32
 8001c7e:	291c      	cmp	r1, #28
 8001c80:	dc00      	bgt.n	8001c84 <__aeabi_dmul+0x478>
 8001c82:	e64e      	b.n	8001922 <__aeabi_dmul+0x116>
 8001c84:	0034      	movs	r4, r6
 8001c86:	3808      	subs	r0, #8
 8001c88:	2500      	movs	r5, #0
 8001c8a:	4084      	lsls	r4, r0
 8001c8c:	e653      	b.n	8001936 <__aeabi_dmul+0x12a>
 8001c8e:	9b00      	ldr	r3, [sp, #0]
 8001c90:	469c      	mov	ip, r3
 8001c92:	e741      	b.n	8001b18 <__aeabi_dmul+0x30c>
 8001c94:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <__aeabi_dmul+0x4d4>)
 8001c96:	0022      	movs	r2, r4
 8001c98:	4461      	add	r1, ip
 8001c9a:	002e      	movs	r6, r5
 8001c9c:	408d      	lsls	r5, r1
 8001c9e:	408a      	lsls	r2, r1
 8001ca0:	40c6      	lsrs	r6, r0
 8001ca2:	1e69      	subs	r1, r5, #1
 8001ca4:	418d      	sbcs	r5, r1
 8001ca6:	4332      	orrs	r2, r6
 8001ca8:	432a      	orrs	r2, r5
 8001caa:	40c4      	lsrs	r4, r0
 8001cac:	0753      	lsls	r3, r2, #29
 8001cae:	d0b6      	beq.n	8001c1e <__aeabi_dmul+0x412>
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	4011      	ands	r1, r2
 8001cb4:	2904      	cmp	r1, #4
 8001cb6:	d1ac      	bne.n	8001c12 <__aeabi_dmul+0x406>
 8001cb8:	e7b1      	b.n	8001c1e <__aeabi_dmul+0x412>
 8001cba:	0765      	lsls	r5, r4, #29
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0b24      	lsrs	r4, r4, #12
 8001cc0:	08d2      	lsrs	r2, r2, #3
 8001cc2:	4315      	orrs	r5, r2
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	e611      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001cc8:	2280      	movs	r2, #128	; 0x80
 8001cca:	0312      	lsls	r2, r2, #12
 8001ccc:	4314      	orrs	r4, r2
 8001cce:	0324      	lsls	r4, r4, #12
 8001cd0:	4a01      	ldr	r2, [pc, #4]	; (8001cd8 <__aeabi_dmul+0x4cc>)
 8001cd2:	0b24      	lsrs	r4, r4, #12
 8001cd4:	e60a      	b.n	80018ec <__aeabi_dmul+0xe0>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff
 8001cdc:	0000043e 	.word	0x0000043e
 8001ce0:	0000041e 	.word	0x0000041e

08001ce4 <__aeabi_d2iz>:
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	b530      	push	{r4, r5, lr}
 8001ce8:	4c13      	ldr	r4, [pc, #76]	; (8001d38 <__aeabi_d2iz+0x54>)
 8001cea:	0053      	lsls	r3, r2, #1
 8001cec:	0309      	lsls	r1, r1, #12
 8001cee:	0005      	movs	r5, r0
 8001cf0:	0b09      	lsrs	r1, r1, #12
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	0d5b      	lsrs	r3, r3, #21
 8001cf6:	0fd2      	lsrs	r2, r2, #31
 8001cf8:	42a3      	cmp	r3, r4
 8001cfa:	dd04      	ble.n	8001d06 <__aeabi_d2iz+0x22>
 8001cfc:	480f      	ldr	r0, [pc, #60]	; (8001d3c <__aeabi_d2iz+0x58>)
 8001cfe:	4283      	cmp	r3, r0
 8001d00:	dd02      	ble.n	8001d08 <__aeabi_d2iz+0x24>
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <__aeabi_d2iz+0x5c>)
 8001d04:	18d0      	adds	r0, r2, r3
 8001d06:	bd30      	pop	{r4, r5, pc}
 8001d08:	2080      	movs	r0, #128	; 0x80
 8001d0a:	0340      	lsls	r0, r0, #13
 8001d0c:	4301      	orrs	r1, r0
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <__aeabi_d2iz+0x60>)
 8001d10:	1ac0      	subs	r0, r0, r3
 8001d12:	281f      	cmp	r0, #31
 8001d14:	dd08      	ble.n	8001d28 <__aeabi_d2iz+0x44>
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <__aeabi_d2iz+0x64>)
 8001d18:	1ac3      	subs	r3, r0, r3
 8001d1a:	40d9      	lsrs	r1, r3
 8001d1c:	000b      	movs	r3, r1
 8001d1e:	4258      	negs	r0, r3
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	d1f0      	bne.n	8001d06 <__aeabi_d2iz+0x22>
 8001d24:	0018      	movs	r0, r3
 8001d26:	e7ee      	b.n	8001d06 <__aeabi_d2iz+0x22>
 8001d28:	4c08      	ldr	r4, [pc, #32]	; (8001d4c <__aeabi_d2iz+0x68>)
 8001d2a:	40c5      	lsrs	r5, r0
 8001d2c:	46a4      	mov	ip, r4
 8001d2e:	4463      	add	r3, ip
 8001d30:	4099      	lsls	r1, r3
 8001d32:	000b      	movs	r3, r1
 8001d34:	432b      	orrs	r3, r5
 8001d36:	e7f2      	b.n	8001d1e <__aeabi_d2iz+0x3a>
 8001d38:	000003fe 	.word	0x000003fe
 8001d3c:	0000041d 	.word	0x0000041d
 8001d40:	7fffffff 	.word	0x7fffffff
 8001d44:	00000433 	.word	0x00000433
 8001d48:	00000413 	.word	0x00000413
 8001d4c:	fffffbed 	.word	0xfffffbed

08001d50 <__aeabi_i2d>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d016      	beq.n	8001d84 <__aeabi_i2d+0x34>
 8001d56:	17c3      	asrs	r3, r0, #31
 8001d58:	18c5      	adds	r5, r0, r3
 8001d5a:	405d      	eors	r5, r3
 8001d5c:	0fc4      	lsrs	r4, r0, #31
 8001d5e:	0028      	movs	r0, r5
 8001d60:	f000 f826 	bl	8001db0 <__clzsi2>
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <__aeabi_i2d+0x5c>)
 8001d66:	1a12      	subs	r2, r2, r0
 8001d68:	280a      	cmp	r0, #10
 8001d6a:	dc16      	bgt.n	8001d9a <__aeabi_i2d+0x4a>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	002e      	movs	r6, r5
 8001d70:	3315      	adds	r3, #21
 8001d72:	409e      	lsls	r6, r3
 8001d74:	230b      	movs	r3, #11
 8001d76:	1a18      	subs	r0, r3, r0
 8001d78:	40c5      	lsrs	r5, r0
 8001d7a:	0553      	lsls	r3, r2, #21
 8001d7c:	032d      	lsls	r5, r5, #12
 8001d7e:	0b2d      	lsrs	r5, r5, #12
 8001d80:	0d5b      	lsrs	r3, r3, #21
 8001d82:	e003      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001d84:	2400      	movs	r4, #0
 8001d86:	2300      	movs	r3, #0
 8001d88:	2500      	movs	r5, #0
 8001d8a:	2600      	movs	r6, #0
 8001d8c:	051b      	lsls	r3, r3, #20
 8001d8e:	432b      	orrs	r3, r5
 8001d90:	07e4      	lsls	r4, r4, #31
 8001d92:	4323      	orrs	r3, r4
 8001d94:	0030      	movs	r0, r6
 8001d96:	0019      	movs	r1, r3
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	380b      	subs	r0, #11
 8001d9c:	4085      	lsls	r5, r0
 8001d9e:	0553      	lsls	r3, r2, #21
 8001da0:	032d      	lsls	r5, r5, #12
 8001da2:	2600      	movs	r6, #0
 8001da4:	0b2d      	lsrs	r5, r5, #12
 8001da6:	0d5b      	lsrs	r3, r3, #21
 8001da8:	e7f0      	b.n	8001d8c <__aeabi_i2d+0x3c>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	0000041e 	.word	0x0000041e

08001db0 <__clzsi2>:
 8001db0:	211c      	movs	r1, #28
 8001db2:	2301      	movs	r3, #1
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	4298      	cmp	r0, r3
 8001db8:	d301      	bcc.n	8001dbe <__clzsi2+0xe>
 8001dba:	0c00      	lsrs	r0, r0, #16
 8001dbc:	3910      	subs	r1, #16
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d301      	bcc.n	8001dc8 <__clzsi2+0x18>
 8001dc4:	0a00      	lsrs	r0, r0, #8
 8001dc6:	3908      	subs	r1, #8
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d301      	bcc.n	8001dd2 <__clzsi2+0x22>
 8001dce:	0900      	lsrs	r0, r0, #4
 8001dd0:	3904      	subs	r1, #4
 8001dd2:	a202      	add	r2, pc, #8	; (adr r2, 8001ddc <__clzsi2+0x2c>)
 8001dd4:	5c10      	ldrb	r0, [r2, r0]
 8001dd6:	1840      	adds	r0, r0, r1
 8001dd8:	4770      	bx	lr
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	02020304 	.word	0x02020304
 8001de0:	01010101 	.word	0x01010101
	...

08001dec <_ZN6buttonC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "button.h"

button::button(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	1dbb      	adds	r3, r7, #6
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <_ZN6buttonC1EP12GPIO_TypeDeft+0x2c>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	609a      	str	r2, [r3, #8]
	pin = PIN;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1dba      	adds	r2, r7, #6
 8001e0a:	8812      	ldrh	r2, [r2, #0]
 8001e0c:	809a      	strh	r2, [r3, #4]
}
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	0800774c 	.word	0x0800774c

08001e1c <_ZN6buttonD1Ev>:

button::~button() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <_ZN6buttonD1Ev+0x18>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0800774c 	.word	0x0800774c

08001e38 <_ZN6buttonD0Ev>:
button::~button() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ffea 	bl	8001e1c <_ZN6buttonD1Ev>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	210c      	movs	r1, #12
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f005 f94b 	bl	80070e8 <_ZdlPvj>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_ZN6button6GetPinEv>:

uint16_t button::GetPin() {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	return pin;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	889b      	ldrh	r3, [r3, #4]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_ZN7controlC1EP8position>:
 *      Author: Lucas Martins
 */

#include "control.h"

control::control(position* P) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <_ZN7controlC1EP8position+0x34>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	p = P;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]
	kp = 0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
	kd = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
	der = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	0800775c 	.word	0x0800775c

08001ea8 <_ZN7controlD1Ev>:

control::~control() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <_ZN7controlD1Ev+0x18>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b002      	add	sp, #8
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	0800775c 	.word	0x0800775c

08001ec4 <_ZN7controlD0Ev>:
control::~control() {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
}
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ffea 	bl	8001ea8 <_ZN7controlD1Ev>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2124      	movs	r1, #36	; 0x24
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f005 f905 	bl	80070e8 <_ZdlPvj>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN7control9setConstsEff>:

void control::setConsts(float KP, float KD) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	kp = KP / 10;
 8001ef4:	4909      	ldr	r1, [pc, #36]	; (8001f1c <_ZN7control9setConstsEff+0x34>)
 8001ef6:	68b8      	ldr	r0, [r7, #8]
 8001ef8:	f7fe fc52 	bl	80007a0 <__aeabi_fdiv>
 8001efc:	1c03      	adds	r3, r0, #0
 8001efe:	1c1a      	adds	r2, r3, #0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	609a      	str	r2, [r3, #8]
	kd = KD / 10;
 8001f04:	4905      	ldr	r1, [pc, #20]	; (8001f1c <_ZN7control9setConstsEff+0x34>)
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fc4a 	bl	80007a0 <__aeabi_fdiv>
 8001f0c:	1c03      	adds	r3, r0, #0
 8001f0e:	1c1a      	adds	r2, r3, #0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	41200000 	.word	0x41200000

08001f20 <_ZN7control8PIDValueEv>:


float control::PIDValue() {
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	oldPos = pos;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	621a      	str	r2, [r3, #32]
	pos = p->DefinePosition();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 f90f 	bl	8003158 <_ZN8position14DefinePositionEv>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	61da      	str	r2, [r3, #28]
	der = pos - oldPos;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	1ad2      	subs	r2, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]
	oldPID = PID;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	619a      	str	r2, [r3, #24]
	PID = (kp*pos + kd*oldPos);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689c      	ldr	r4, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff f8ea 	bl	8001138 <__aeabi_i2f>
 8001f64:	1c03      	adds	r3, r0, #0
 8001f66:	1c19      	adds	r1, r3, #0
 8001f68:	1c20      	adds	r0, r4, #0
 8001f6a:	f7fe fde3 	bl	8000b34 <__aeabi_fmul>
 8001f6e:	1c03      	adds	r3, r0, #0
 8001f70:	1c1d      	adds	r5, r3, #0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68dc      	ldr	r4, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff f8dc 	bl	8001138 <__aeabi_i2f>
 8001f80:	1c03      	adds	r3, r0, #0
 8001f82:	1c19      	adds	r1, r3, #0
 8001f84:	1c20      	adds	r0, r4, #0
 8001f86:	f7fe fdd5 	bl	8000b34 <__aeabi_fmul>
 8001f8a:	1c03      	adds	r3, r0, #0
 8001f8c:	1c19      	adds	r1, r3, #0
 8001f8e:	1c28      	adds	r0, r5, #0
 8001f90:	f7fe fa6a 	bl	8000468 <__aeabi_fadd>
 8001f94:	1c03      	adds	r3, r0, #0
 8001f96:	1c1a      	adds	r2, r3, #0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	615a      	str	r2, [r3, #20]
	return PID;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
}
 8001fa0:	1c18      	adds	r0, r3, #0
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}

08001fa8 <_ZN7encoderC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "encoder.h"

encoder::encoder(GPIO_TypeDef* PORT, uint16_t PIN) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	1dbb      	adds	r3, r7, #6
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <_ZN7encoderC1EP12GPIO_TypeDeft+0x40>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	619a      	str	r2, [r3, #24]
	pin = PIN;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1dba      	adds	r2, r7, #6
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	829a      	strh	r2, [r3, #20]
	rps = 0;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
	time = 0;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
	cont = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
}
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	0800776c 	.word	0x0800776c

08001fec <_ZN7encoderD1Ev>:

encoder::~encoder() {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <_ZN7encoderD1Ev+0x18>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800776c 	.word	0x0800776c

08002008 <_ZN7encoderD0Ev>:
encoder::~encoder() {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
}
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff ffea 	bl	8001fec <_ZN7encoderD1Ev>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	211c      	movs	r1, #28
 800201c:	0018      	movs	r0, r3
 800201e:	f005 f863 	bl	80070e8 <_ZdlPvj>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZN7encoder6GetPinEv>:

uint16_t encoder::GetPin() {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	return pin;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8a9b      	ldrh	r3, [r3, #20]
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZN7encoder6SetRpsEv>:

int encoder::GetRps() {
	return rps;
}

void encoder::SetRps() {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	time = cont;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
	if(time < 600) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	2396      	movs	r3, #150	; 0x96
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	da18      	bge.n	800208e <_ZN7encoder6SetRpsEv+0x4e>
		rps = 1 / (0.00015*time);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff fe75 	bl	8001d50 <__aeabi_i2d>
 8002066:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <_ZN7encoder6SetRpsEv+0x64>)
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <_ZN7encoder6SetRpsEv+0x68>)
 800206a:	f7ff fbcf 	bl	800180c <__aeabi_dmul>
 800206e:	0002      	movs	r2, r0
 8002070:	000b      	movs	r3, r1
 8002072:	2000      	movs	r0, #0
 8002074:	490d      	ldr	r1, [pc, #52]	; (80020ac <_ZN7encoder6SetRpsEv+0x6c>)
 8002076:	f7ff f8e1 	bl	800123c <__aeabi_ddiv>
 800207a:	0002      	movs	r2, r0
 800207c:	000b      	movs	r3, r1
 800207e:	0010      	movs	r0, r2
 8002080:	0019      	movs	r1, r3
 8002082:	f7ff fe2f 	bl	8001ce4 <__aeabi_d2iz>
 8002086:	0002      	movs	r2, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	e002      	b.n	8002094 <_ZN7encoder6SetRpsEv+0x54>
	} else {
		rps = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
	}
	cont = 0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	30553261 	.word	0x30553261
 80020a8:	3f23a92a 	.word	0x3f23a92a
 80020ac:	3ff00000 	.word	0x3ff00000

080020b0 <_ZN7encoder4ContEv>:

void encoder::Cont() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	if(cont < 600) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	2396      	movs	r3, #150	; 0x96
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	da05      	bge.n	80020d0 <_ZN7encoder4ContEv+0x20>
		cont++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]
	} else {
		SetRps();
	}
}
 80020ce:	e003      	b.n	80020d8 <_ZN7encoder4ContEv+0x28>
		SetRps();
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff ffb4 	bl	8002040 <_ZN7encoder6SetRpsEv>
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZN7encoder15RestartRotationEv>:

void encoder::RestartRotation() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	rotation = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	82da      	strh	r2, [r3, #22]
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZN7encoder12RotationContEi>:

void encoder::RotationCont(int speed) {
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
	if (speed >= 0) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db06      	blt.n	8002114 <_ZN7encoder12RotationContEi+0x1e>
		rotation++;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8adb      	ldrh	r3, [r3, #22]
 800210a:	3301      	adds	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	82da      	strh	r2, [r3, #22]
	} else {
		rotation--;
	}

}
 8002112:	e005      	b.n	8002120 <_ZN7encoder12RotationContEi+0x2a>
		rotation--;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8adb      	ldrh	r3, [r3, #22]
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	82da      	strh	r2, [r3, #22]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <_ZN7encoder11GetRotationEv>:

uint32_t encoder::GetRotation() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	return rotation;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8adb      	ldrh	r3, [r3, #22]
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN3ledC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "led.h"

led::led(GPIO_TypeDef* PORT, uint16_t PIN) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	1dbb      	adds	r3, r7, #6
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <_ZN3ledC1EP12GPIO_TypeDeft+0x2c>)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	605a      	str	r2, [r3, #4]
	pin = PIN;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1dba      	adds	r2, r7, #6
 800215a:	8812      	ldrh	r2, [r2, #0]
 800215c:	811a      	strh	r2, [r3, #8]
}
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	0800777c 	.word	0x0800777c

0800216c <_ZN3ledD1Ev>:

led::~led() {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <_ZN3ledD1Ev+0x18>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}
 8002184:	0800777c 	.word	0x0800777c

08002188 <_ZN3ledD0Ev>:
led::~led() {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
}
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff ffea 	bl	800216c <_ZN3ledD1Ev>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	210c      	movs	r1, #12
 800219c:	0018      	movs	r0, r3
 800219e:	f004 ffa3 	bl	80070e8 <_ZdlPvj>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_ZN3led2OnEv>:

void led::On() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6858      	ldr	r0, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	891b      	ldrh	r3, [r3, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	0019      	movs	r1, r3
 80021c0:	f003 fadf 	bl	8005782 <HAL_GPIO_WritePin>
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZN3led3OffEv>:

void led::Off() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6858      	ldr	r0, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	891b      	ldrh	r3, [r3, #8]
 80021dc:	2201      	movs	r2, #1
 80021de:	0019      	movs	r1, r3
 80021e0:	f003 facf 	bl	8005782 <HAL_GPIO_WritePin>
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <CppMain>:
map circuit;

robot rufus(&ctr, &mdir, &mesq, &circuit);


void CppMain() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	lfdir.Off();
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <CppMain+0xa0>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ffea 	bl	80021cc <_ZN3led3OffEv>
	lfesq.Off();
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <CppMain+0xa4>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff ffe6 	bl	80021cc <_ZN3led3OffEv>
	lfren.Off();
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <CppMain+0xa8>)
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff ffe2 	bl	80021cc <_ZN3led3OffEv>
	ldeb1.Off();
 8002208:	4b23      	ldr	r3, [pc, #140]	; (8002298 <CppMain+0xac>)
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ffde 	bl	80021cc <_ZN3led3OffEv>
	ldeb2.Off();
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <CppMain+0xb0>)
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ffda 	bl	80021cc <_ZN3led3OffEv>

	while(1) {
		//dirteste = HAL_GPIO_ReadPin(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
		switch(state) {
 8002218:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <CppMain+0xb4>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d833      	bhi.n	8002288 <CppMain+0x9c>
 8002220:	009a      	lsls	r2, r3, #2
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <CppMain+0xb8>)
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	469f      	mov	pc, r3
		case WAITING:
			mdir.Break();
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <CppMain+0xbc>)
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fe4f 	bl	8002ed0 <_ZN12motorControl5BreakEv>
			mesq.Break();
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <CppMain+0xc0>)
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fe4b 	bl	8002ed0 <_ZN12motorControl5BreakEv>
			break;
 800223a:	e026      	b.n	800228a <CppMain+0x9e>

		case CALIBRATION:
			rufus.Calibrate(&z);
 800223c:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <CppMain+0xc4>)
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <CppMain+0xc8>)
 8002240:	0011      	movs	r1, r2
 8002242:	0018      	movs	r0, r3
 8002244:	f001 f902 	bl	800344c <_ZN5robot9CalibrateEPm>
			circuit.InitTracks();
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <CppMain+0xcc>)
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fb34 	bl	80028b8 <_ZN3map10InitTracksEv>
			state = PRE_RUN;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <CppMain+0xb4>)
 8002252:	2202      	movs	r2, #2
 8002254:	801a      	strh	r2, [r3, #0]
			break;
 8002256:	e018      	b.n	800228a <CppMain+0x9e>

		case PRE_RUN:
			mdir.Break();
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <CppMain+0xbc>)
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fe38 	bl	8002ed0 <_ZN12motorControl5BreakEv>
			mesq.Break();
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <CppMain+0xc0>)
 8002262:	0018      	movs	r0, r3
 8002264:	f000 fe34 	bl	8002ed0 <_ZN12motorControl5BreakEv>
			break;
 8002268:	e00f      	b.n	800228a <CppMain+0x9e>

		case RUNNING:
			rufus.Running();
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <CppMain+0xc8>)
 800226c:	0018      	movs	r0, r3
 800226e:	f001 f84b 	bl	8003308 <_ZN5robot7RunningEv>
			break;
 8002272:	e00a      	b.n	800228a <CppMain+0x9e>

		case FINISH:
			rufus.Finish(&z);
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <CppMain+0xc4>)
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <CppMain+0xc8>)
 8002278:	0011      	movs	r1, r2
 800227a:	0018      	movs	r0, r3
 800227c:	f001 f8b8 	bl	80033f0 <_ZN5robot6FinishEPm>
			state = WAITING;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <CppMain+0xb4>)
 8002282:	2200      	movs	r2, #0
 8002284:	801a      	strh	r2, [r3, #0]
			break;
 8002286:	e000      	b.n	800228a <CppMain+0x9e>

		default:
			break;
 8002288:	46c0      	nop			; (mov r8, r8)
		switch(state) {
 800228a:	e7c5      	b.n	8002218 <CppMain+0x2c>
 800228c:	200000cc 	.word	0x200000cc
 8002290:	200000d8 	.word	0x200000d8
 8002294:	200000e4 	.word	0x200000e4
 8002298:	200000f0 	.word	0x200000f0
 800229c:	200000fc 	.word	0x200000fc
 80022a0:	20000152 	.word	0x20000152
 80022a4:	08007784 	.word	0x08007784
 80022a8:	20000184 	.word	0x20000184
 80022ac:	20000198 	.word	0x20000198
 80022b0:	2000014c 	.word	0x2000014c
 80022b4:	2000076c 	.word	0x2000076c
 80022b8:	200001d0 	.word	0x200001d0

080022bc <ADC_Interrupt>:
		}
	}
}


void ADC_Interrupt(uint8_t* Array, int size) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	p.SetAnalog(Array, size);
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <ADC_Interrupt+0x28>)
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fe53 	bl	8002f78 <_ZN8position9SetAnalogEPhi>
	ctr.PIDValue();
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <ADC_Interrupt+0x2c>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff fe23 	bl	8001f20 <_ZN7control8PIDValueEv>
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	2000008c 	.word	0x2000008c
 80022e8:	200001ac 	.word	0x200001ac

080022ec <TIM1_Interrupt>:


void TIM1_Interrupt() {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	if(z != 60000) {
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <TIM1_Interrupt+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a17      	ldr	r2, [pc, #92]	; (8002354 <TIM1_Interrupt+0x68>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00c      	beq.n	8002314 <TIM1_Interrupt+0x28>
		z++;
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <TIM1_Interrupt+0x64>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <TIM1_Interrupt+0x64>)
 8002302:	601a      	str	r2, [r3, #0]
		if(z >= 50000) {
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <TIM1_Interrupt+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <TIM1_Interrupt+0x6c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d902      	bls.n	8002314 <TIM1_Interrupt+0x28>
			z = 0;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <TIM1_Interrupt+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
		}
	}
	if(debounce > 0) {
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <TIM1_Interrupt+0x70>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <TIM1_Interrupt+0x3c>
		debounce--;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <TIM1_Interrupt+0x70>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <TIM1_Interrupt+0x70>)
 8002326:	801a      	strh	r2, [r3, #0]
	}

	if((state == RUNNING) || (state == CALIBRATION)) {
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <TIM1_Interrupt+0x74>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d003      	beq.n	8002338 <TIM1_Interrupt+0x4c>
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <TIM1_Interrupt+0x74>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <TIM1_Interrupt+0x5c>
		enc1.Cont();
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <TIM1_Interrupt+0x78>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff feb8 	bl	80020b0 <_ZN7encoder4ContEv>
		enc2.Cont();
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <TIM1_Interrupt+0x7c>)
 8002342:	0018      	movs	r0, r3
 8002344:	f7ff feb4 	bl	80020b0 <_ZN7encoder4ContEv>
	}
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	2000014c 	.word	0x2000014c
 8002354:	0000ea60 	.word	0x0000ea60
 8002358:	0000c34f 	.word	0x0000c34f
 800235c:	20000150 	.word	0x20000150
 8002360:	20000152 	.word	0x20000152
 8002364:	20000114 	.word	0x20000114
 8002368:	20000130 	.word	0x20000130

0800236c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	1dbb      	adds	r3, r7, #6
 8002376:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == enc1.GetPin()) {
 8002378:	4b94      	ldr	r3, [pc, #592]	; (80025cc <HAL_GPIO_EXTI_Callback+0x260>)
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fe56 	bl	800202c <_ZN7encoder6GetPinEv>
 8002380:	0003      	movs	r3, r0
 8002382:	001a      	movs	r2, r3
 8002384:	1dbb      	adds	r3, r7, #6
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	425a      	negs	r2, r3
 800238c:	4153      	adcs	r3, r2
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d019      	beq.n	80023c8 <HAL_GPIO_EXTI_Callback+0x5c>
		if((state == RUNNING) || (state == CALIBRATION)) {
 8002394:	4b8e      	ldr	r3, [pc, #568]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_EXTI_Callback+0x38>
 800239c:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d111      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x5c>
			enc1.SetRps();
 80023a4:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_GPIO_EXTI_Callback+0x260>)
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff fe4a 	bl	8002040 <_ZN7encoder6SetRpsEv>
			enc1.RotationCont(mdir.GetSpeed());
 80023ac:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x268>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 fdaa 	bl	8002f08 <_ZN12motorControl8GetSpeedEv>
 80023b4:	0002      	movs	r2, r0
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_GPIO_EXTI_Callback+0x260>)
 80023b8:	0011      	movs	r1, r2
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fe9b 	bl	80020f6 <_ZN7encoder12RotationContEi>
			rufus.CompareRotations();
 80023c0:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80023c2:	0018      	movs	r0, r3
 80023c4:	f001 f92f 	bl	8003626 <_ZN5robot16CompareRotationsEv>
		}
	}

	if (GPIO_Pin == enc2.GetPin()) {
 80023c8:	4b84      	ldr	r3, [pc, #528]	; (80025dc <HAL_GPIO_EXTI_Callback+0x270>)
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff fe2e 	bl	800202c <_ZN7encoder6GetPinEv>
 80023d0:	0003      	movs	r3, r0
 80023d2:	001a      	movs	r2, r3
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	425a      	negs	r2, r3
 80023dc:	4153      	adcs	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <HAL_GPIO_EXTI_Callback+0xac>
		if((state == RUNNING) || (state == CALIBRATION)) {
 80023e4:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_EXTI_Callback+0x88>
 80023ec:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d111      	bne.n	8002418 <HAL_GPIO_EXTI_Callback+0xac>
			enc2.SetRps();
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <HAL_GPIO_EXTI_Callback+0x270>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff fe22 	bl	8002040 <_ZN7encoder6SetRpsEv>
			enc2.RotationCont(mesq.GetSpeed());
 80023fc:	4b78      	ldr	r3, [pc, #480]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x274>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fd82 	bl	8002f08 <_ZN12motorControl8GetSpeedEv>
 8002404:	0002      	movs	r2, r0
 8002406:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_GPIO_EXTI_Callback+0x270>)
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff fe73 	bl	80020f6 <_ZN7encoder12RotationContEi>
			rufus.CompareRotations();
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002412:	0018      	movs	r0, r3
 8002414:	f001 f907 	bl	8003626 <_ZN5robot16CompareRotationsEv>
		}
	}

	if (GPIO_Pin == b.GetPin()) {
 8002418:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x278>)
 800241a:	0018      	movs	r0, r3
 800241c:	f7ff fd1e 	bl	8001e5c <_ZN6button6GetPinEv>
 8002420:	0003      	movs	r3, r0
 8002422:	001a      	movs	r2, r3
 8002424:	1dbb      	adds	r3, r7, #6
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	425a      	negs	r2, r3
 800242c:	4153      	adcs	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d029      	beq.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
		if(debounce == 0) {
 8002434:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d125      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
			debounce = 2000;
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800243e:	22fa      	movs	r2, #250	; 0xfa
 8002440:	00d2      	lsls	r2, r2, #3
 8002442:	801a      	strh	r2, [r3, #0]
			switch(state) {
 8002444:	4b62      	ldr	r3, [pc, #392]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d018      	beq.n	800247e <HAL_GPIO_EXTI_Callback+0x112>
 800244c:	dc1b      	bgt.n	8002486 <HAL_GPIO_EXTI_Callback+0x11a>
 800244e:	2b02      	cmp	r3, #2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_EXTI_Callback+0x102>
 8002452:	dc18      	bgt.n	8002486 <HAL_GPIO_EXTI_Callback+0x11a>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_GPIO_EXTI_Callback+0xf2>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d004      	beq.n	8002466 <HAL_GPIO_EXTI_Callback+0xfa>
				break;
			case 3:
				state = 0;
				break;
			default:
				break;
 800245c:	e013      	b.n	8002486 <HAL_GPIO_EXTI_Callback+0x11a>
				state = 1;
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002460:	2201      	movs	r2, #1
 8002462:	801a      	strh	r2, [r3, #0]
				break;
 8002464:	e010      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
				state = 2;
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002468:	2202      	movs	r2, #2
 800246a:	801a      	strh	r2, [r3, #0]
				break;
 800246c:	e00c      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
				rufus.ChangeTrack();
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002470:	0018      	movs	r0, r3
 8002472:	f001 f88f 	bl	8003594 <_ZN5robot11ChangeTrackEv>
				state = 3;
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002478:	2203      	movs	r2, #3
 800247a:	801a      	strh	r2, [r3, #0]
				break;
 800247c:	e004      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
				state = 0;
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
				break;
 8002484:	e000      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x11c>
				break;
 8002486:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	if (GPIO_Pin == marcEsq.GetPin()) {
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_GPIO_EXTI_Callback+0x280>)
 800248a:	0018      	movs	r0, r3
 800248c:	f001 fa10 	bl	80038b0 <_ZN10sensorSide6GetPinEv>
 8002490:	0003      	movs	r3, r0
 8002492:	001a      	movs	r2, r3
 8002494:	1dbb      	adds	r3, r7, #6
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	425a      	negs	r2, r3
 800249c:	4153      	adcs	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d02e      	beq.n	8002502 <HAL_GPIO_EXTI_Callback+0x196>
		if(marcEsq.State() == GPIO_PIN_RESET) {
 80024a4:	4b51      	ldr	r3, [pc, #324]	; (80025ec <HAL_GPIO_EXTI_Callback+0x280>)
 80024a6:	0018      	movs	r0, r3
 80024a8:	f001 fa0c 	bl	80038c4 <_ZN10sensorSide5StateEv>
 80024ac:	0003      	movs	r3, r0
 80024ae:	425a      	negs	r2, r3
 80024b0:	4153      	adcs	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d020      	beq.n	80024fa <HAL_GPIO_EXTI_Callback+0x18e>
			if(state == RUNNING) {
 80024b8:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d10f      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0x174>
				rufus.NextState();
 80024c0:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80024c2:	0018      	movs	r0, r3
 80024c4:	f001 f854 	bl	8003570 <_ZN5robot9NextStateEv>
				marcEsq.NextTrack();
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <HAL_GPIO_EXTI_Callback+0x280>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f001 f9d8 	bl	8003880 <_ZN10sensorSide9NextTrackEv>
				enc1.RestartRotation();
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_GPIO_EXTI_Callback+0x260>)
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff fe04 	bl	80020e0 <_ZN7encoder15RestartRotationEv>
				enc2.RestartRotation();
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_GPIO_EXTI_Callback+0x270>)
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff fe00 	bl	80020e0 <_ZN7encoder15RestartRotationEv>
			}

			if(state == PRE_RUN) {
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d103      	bne.n	80024f0 <HAL_GPIO_EXTI_Callback+0x184>
				rufus.sumLess();
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f001 f97e 	bl	80037ec <_ZN5robot7sumLessEv>
			}

			lfesq.On();
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x284>)
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff fe5a 	bl	80021ac <_ZN3led2OnEv>
 80024f8:	e003      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x196>
		} else {
			lfesq.Off();
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x284>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff fe65 	bl	80021cc <_ZN3led3OffEv>
		}

	}

	if (GPIO_Pin == marcDir.GetPin()) {
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x288>)
 8002504:	0018      	movs	r0, r3
 8002506:	f001 f9d3 	bl	80038b0 <_ZN10sensorSide6GetPinEv>
 800250a:	0003      	movs	r3, r0
 800250c:	001a      	movs	r2, r3
 800250e:	1dbb      	adds	r3, r7, #6
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	425a      	negs	r2, r3
 8002516:	4153      	adcs	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d052      	beq.n	80025c4 <HAL_GPIO_EXTI_Callback+0x258>
		if(marcDir.State() == GPIO_PIN_RESET){
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x288>)
 8002520:	0018      	movs	r0, r3
 8002522:	f001 f9cf 	bl	80038c4 <_ZN10sensorSide5StateEv>
 8002526:	0003      	movs	r3, r0
 8002528:	425a      	negs	r2, r3
 800252a:	4153      	adcs	r3, r2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d044      	beq.n	80025bc <HAL_GPIO_EXTI_Callback+0x250>
			if(state == RUNNING) {
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d133      	bne.n	80025a2 <HAL_GPIO_EXTI_Callback+0x236>
				if(rufus.GetPosition() == 0) {
 800253a:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 800253c:	0018      	movs	r0, r3
 800253e:	f001 f80d 	bl	800355c <_ZN5robot11GetPositionEv>
 8002542:	0003      	movs	r3, r0
 8002544:	425a      	negs	r2, r3
 8002546:	4153      	adcs	r3, r2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_GPIO_EXTI_Callback+0x1fa>
					rufus.NextState();
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002550:	0018      	movs	r0, r3
 8002552:	f001 f80d 	bl	8003570 <_ZN5robot9NextStateEv>
					enc1.RestartRotation();
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_GPIO_EXTI_Callback+0x260>)
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff fdc1 	bl	80020e0 <_ZN7encoder15RestartRotationEv>
					enc2.RestartRotation();
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_GPIO_EXTI_Callback+0x270>)
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff fdbd 	bl	80020e0 <_ZN7encoder15RestartRotationEv>
				}
				marcDir.NextTrack();
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x288>)
 8002568:	0018      	movs	r0, r3
 800256a:	f001 f989 	bl	8003880 <_ZN10sensorSide9NextTrackEv>

				if(marcDir.CurrentTrack() == 12) {
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_GPIO_EXTI_Callback+0x288>)
 8002570:	0018      	movs	r0, r3
 8002572:	f001 f993 	bl	800389c <_ZN10sensorSide12CurrentTrackEv>
 8002576:	0003      	movs	r3, r0
 8002578:	3b0c      	subs	r3, #12
 800257a:	425a      	negs	r2, r3
 800257c:	4153      	adcs	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <HAL_GPIO_EXTI_Callback+0x236>
					rufus.NextState();
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fff2 	bl	8003570 <_ZN5robot9NextStateEv>
					mdir.Break();
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x268>)
 800258e:	0018      	movs	r0, r3
 8002590:	f000 fc9e 	bl	8002ed0 <_ZN12motorControl5BreakEv>
					mesq.Break();
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x274>)
 8002596:	0018      	movs	r0, r3
 8002598:	f000 fc9a 	bl	8002ed0 <_ZN12motorControl5BreakEv>
					state = FINISH;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 800259e:	2204      	movs	r2, #4
 80025a0:	801a      	strh	r2, [r3, #0]
				}
			}

			if(state == PRE_RUN) {
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x264>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d103      	bne.n	80025b2 <HAL_GPIO_EXTI_Callback+0x246>
				rufus.sumPlus();
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025ac:	0018      	movs	r0, r3
 80025ae:	f001 f910 	bl	80037d2 <_ZN5robot7sumPlusEv>
			}

			lfdir.On();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x28c>)
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fdf9 	bl	80021ac <_ZN3led2OnEv>
		} else {
			lfdir.Off();
		}
	}
}
 80025ba:	e003      	b.n	80025c4 <HAL_GPIO_EXTI_Callback+0x258>
			lfdir.Off();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_GPIO_EXTI_Callback+0x28c>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f7ff fe04 	bl	80021cc <_ZN3led3OffEv>
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000114 	.word	0x20000114
 80025d0:	20000152 	.word	0x20000152
 80025d4:	20000184 	.word	0x20000184
 80025d8:	2000076c 	.word	0x2000076c
 80025dc:	20000130 	.word	0x20000130
 80025e0:	20000198 	.word	0x20000198
 80025e4:	20000108 	.word	0x20000108
 80025e8:	20000150 	.word	0x20000150
 80025ec:	200000b4 	.word	0x200000b4
 80025f0:	200000d8 	.word	0x200000d8
 80025f4:	200000c0 	.word	0x200000c0
 80025f8:	200000cc 	.word	0x200000cc

080025fc <_Z41__static_initialization_and_destruction_0ii>:
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b087      	sub	sp, #28
 8002600:	af04      	add	r7, sp, #16
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d000      	beq.n	800260e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800260c:	e086      	b.n	800271c <_Z41__static_initialization_and_destruction_0ii+0x120>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	4a6c      	ldr	r2, [pc, #432]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d000      	beq.n	8002618 <_Z41__static_initialization_and_destruction_0ii+0x1c>
 8002616:	e081      	b.n	800271c <_Z41__static_initialization_and_destruction_0ii+0x120>
position p;
 8002618:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fc7e 	bl	8002f1c <_ZN8positionC1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	005a      	lsls	r2, r3, #1
 8002624:	2390      	movs	r3, #144	; 0x90
 8002626:	05d9      	lsls	r1, r3, #23
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800262a:	0018      	movs	r0, r3
 800262c:	f001 f8ec 	bl	8003808 <_ZN10sensorSideC1EP12GPIO_TypeDeft>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 8002630:	4967      	ldr	r1, [pc, #412]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002632:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002634:	2202      	movs	r2, #2
 8002636:	0018      	movs	r0, r3
 8002638:	f001 f8e6 	bl	8003808 <_ZN10sensorSideC1EP12GPIO_TypeDeft>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 800263c:	4966      	ldr	r1, [pc, #408]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002640:	2204      	movs	r2, #4
 8002642:	0018      	movs	r0, r3
 8002644:	f7ff fd7a 	bl	800213c <_ZN3ledC1EP12GPIO_TypeDeft>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 8002648:	4963      	ldr	r1, [pc, #396]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800264c:	2201      	movs	r2, #1
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff fd74 	bl	800213c <_ZN3ledC1EP12GPIO_TypeDeft>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 8002654:	4960      	ldr	r1, [pc, #384]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002658:	2202      	movs	r2, #2
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fd6e 	bl	800213c <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8002660:	495b      	ldr	r1, [pc, #364]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002662:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff fd68 	bl	800213c <_ZN3ledC1EP12GPIO_TypeDeft>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 800266c:	4958      	ldr	r1, [pc, #352]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800266e:	4b5f      	ldr	r3, [pc, #380]	; (80027ec <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff fd62 	bl	800213c <_ZN3ledC1EP12GPIO_TypeDeft>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	011a      	lsls	r2, r3, #4
 800267c:	2390      	movs	r3, #144	; 0x90
 800267e:	05d9      	lsls	r1, r3, #23
 8002680:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff fbb2 	bl	8001dec <_ZN6buttonC1EP12GPIO_TypeDeft>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 8002688:	4953      	ldr	r1, [pc, #332]	; (80027d8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800268a:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	0018      	movs	r0, r3
 8002690:	f7ff fc8a 	bl	8001fa8 <_ZN7encoderC1EP12GPIO_TypeDeft>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	2390      	movs	r3, #144	; 0x90
 800269a:	05d9      	lsls	r1, r3, #23
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff fc82 	bl	8001fa8 <_ZN7encoderC1EP12GPIO_TypeDeft>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80026a6:	4956      	ldr	r1, [pc, #344]	; (8002800 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80026a8:	4856      	ldr	r0, [pc, #344]	; (8002804 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	4b52      	ldr	r3, [pc, #328]	; (80027fc <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	01db      	lsls	r3, r3, #7
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	0013      	movs	r3, r2
 80026bc:	2201      	movs	r2, #1
 80026be:	f000 fad7 	bl	8002c70 <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 80026c2:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80026c6:	4851      	ldr	r0, [pc, #324]	; (800280c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2301      	movs	r3, #1
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	0013      	movs	r3, r2
 80026d8:	2201      	movs	r2, #1
 80026da:	f000 fac9 	bl	8002c70 <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>
motorControl mdir(&m1, &enc1);
 80026de:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80026e0:	4948      	ldr	r1, [pc, #288]	; (8002804 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 fb93 	bl	8002e10 <_ZN12motorControlC1EP5motorP7encoder>
motorControl mesq(&m2, &enc2);
 80026ea:	4a43      	ldr	r2, [pc, #268]	; (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80026ec:	4947      	ldr	r1, [pc, #284]	; (800280c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fb8d 	bl	8002e10 <_ZN12motorControlC1EP5motorP7encoder>
control ctr(&p);
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80026f8:	4b47      	ldr	r3, [pc, #284]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fbb7 	bl	8001e70 <_ZN7controlC1EP8position>
map circuit;
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002704:	0018      	movs	r0, r3
 8002706:	f000 f8a5 	bl	8002854 <_ZN3mapC1Ev>
robot rufus(&ctr, &mdir, &mesq, &circuit);
 800270a:	4c42      	ldr	r4, [pc, #264]	; (8002814 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 800270c:	4a40      	ldr	r2, [pc, #256]	; (8002810 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800270e:	4942      	ldr	r1, [pc, #264]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002710:	4843      	ldr	r0, [pc, #268]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	0023      	movs	r3, r4
 8002718:	f000 fdb6 	bl	8003288 <_ZN5robotC1EP7controlP12motorControlS3_P3map>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d14b      	bne.n	80027ba <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d147      	bne.n	80027ba <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fdcb 	bl	80032c8 <_ZN5robotD1Ev>
map circuit;
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f89b 	bl	8002870 <_ZN3mapD1Ev>
control ctr(&p);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff fbb3 	bl	8001ea8 <_ZN7controlD1Ev>
motorControl mesq(&m2, &enc2);
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002744:	0018      	movs	r0, r3
 8002746:	f000 fb79 	bl	8002e3c <_ZN12motorControlD1Ev>
motorControl mdir(&m1, &enc1);
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fb75 	bl	8002e3c <_ZN12motorControlD1Ev>
motor m2(&htim16, 1, BIN2_GPIO_Port, BIN2_Pin, BIN1_GPIO_Port, BIN1_Pin);
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002754:	0018      	movs	r0, r3
 8002756:	f000 fab5 	bl	8002cc4 <_ZN5motorD1Ev>
motor m1(&htim17, 1, AIN2_GPIO_Port, AIN2_Pin, AIN1_GPIO_Port, AIN1_Pin);
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fab1 	bl	8002cc4 <_ZN5motorD1Ev>
encoder enc2(ENC2_GPIO_Port, ENC2_Pin);
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fc41 	bl	8001fec <_ZN7encoderD1Ev>
encoder enc1(ENC1_GPIO_Port, ENC1_Pin);
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff fc3d 	bl	8001fec <_ZN7encoderD1Ev>
button b(BUTTON_GPIO_Port, BUTTON_Pin);
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fb51 	bl	8001e1c <_ZN6buttonD1Ev>
led ldeb2(L_DEBUG2_GPIO_Port, L_DEBUG2_Pin);
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fcf5 	bl	800216c <_ZN3ledD1Ev>
led ldeb1(L_DEBUG1_GPIO_Port, L_DEBUG1_Pin);
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff fcf1 	bl	800216c <_ZN3ledD1Ev>
led lfren(L_FREN_GPIO_Port, L_FREN_Pin);
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff fced 	bl	800216c <_ZN3ledD1Ev>
led lfesq(L_FESQ_GPIO_Port, L_FESQ_Pin);
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff fce9 	bl	800216c <_ZN3ledD1Ev>
led lfdir(L_FDIR_GPIO_Port, L_FDIR_Pin);
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fce5 	bl	800216c <_ZN3ledD1Ev>
sensorSide marcDir(MARC_DIR_GPIO_Port, MARC_DIR_Pin);
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f001 f84b 	bl	8003840 <_ZN10sensorSideD1Ev>
sensorSide marcEsq(MARC_ESQ_GPIO_Port, MARC_ESQ_Pin);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80027ac:	0018      	movs	r0, r3
 80027ae:	f001 f847 	bl	8003840 <_ZN10sensorSideD1Ev>
position p;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 fbbf 	bl	8002f38 <_ZN8positionD1Ev>
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b003      	add	sp, #12
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	0000ffff 	.word	0x0000ffff
 80027c8:	2000008c 	.word	0x2000008c
 80027cc:	200000b4 	.word	0x200000b4
 80027d0:	48001400 	.word	0x48001400
 80027d4:	200000c0 	.word	0x200000c0
 80027d8:	48000400 	.word	0x48000400
 80027dc:	200000cc 	.word	0x200000cc
 80027e0:	200000d8 	.word	0x200000d8
 80027e4:	200000e4 	.word	0x200000e4
 80027e8:	200000f0 	.word	0x200000f0
 80027ec:	200000fc 	.word	0x200000fc
 80027f0:	20000108 	.word	0x20000108
 80027f4:	20000114 	.word	0x20000114
 80027f8:	20000130 	.word	0x20000130
 80027fc:	48000800 	.word	0x48000800
 8002800:	200007d8 	.word	0x200007d8
 8002804:	20000154 	.word	0x20000154
 8002808:	200008f0 	.word	0x200008f0
 800280c:	2000016c 	.word	0x2000016c
 8002810:	20000184 	.word	0x20000184
 8002814:	20000198 	.word	0x20000198
 8002818:	200001ac 	.word	0x200001ac
 800281c:	200001d0 	.word	0x200001d0
 8002820:	2000076c 	.word	0x2000076c

08002824 <_GLOBAL__sub_I_p>:
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <_GLOBAL__sub_I_p+0x14>)
 800282a:	0019      	movs	r1, r3
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fee5 	bl	80025fc <_Z41__static_initialization_and_destruction_0ii>
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	0000ffff 	.word	0x0000ffff

0800283c <_GLOBAL__sub_D_p>:
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_GLOBAL__sub_D_p+0x14>)
 8002842:	0019      	movs	r1, r3
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff fed9 	bl	80025fc <_Z41__static_initialization_and_destruction_0ii>
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	0000ffff 	.word	0x0000ffff

08002854 <_ZN3mapC1Ev>:
 *      Author: Lucas Martins
 */

#include "map.h"

map::map() {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <_ZN3mapC1Ev+0x18>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}
 800286c:	080077a0 	.word	0x080077a0

08002870 <_ZN3mapD1Ev>:

map::~map() {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4a03      	ldr	r2, [pc, #12]	; (8002888 <_ZN3mapD1Ev+0x18>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	080077a0 	.word	0x080077a0

0800288c <_ZN3mapD0Ev>:
map::~map() {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
}
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f7ff ffea 	bl	8002870 <_ZN3mapD1Ev>
 800289c:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <_ZN3mapD0Ev+0x28>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0011      	movs	r1, r2
 80028a2:	0018      	movs	r0, r3
 80028a4:	f004 fc20 	bl	80070e8 <_ZdlPvj>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	0000059c 	.word	0x0000059c

080028b8 <_ZN3map10InitTracksEv>:

void map::InitTracks() {
 80028b8:	b5b0      	push	{r4, r5, r7, lr}
 80028ba:	4c77      	ldr	r4, [pc, #476]	; (8002a98 <_ZN3map10InitTracksEv+0x1e0>)
 80028bc:	44a5      	add	sp, r4
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
		60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 60
	};*/


	uint8_t auxHighSpeed[TRACKS] = {
 80028c2:	23d4      	movs	r3, #212	; 0xd4
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	18fa      	adds	r2, r7, r3
 80028c8:	4b74      	ldr	r3, [pc, #464]	; (8002a9c <_ZN3map10InitTracksEv+0x1e4>)
 80028ca:	0010      	movs	r0, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	2354      	movs	r3, #84	; 0x54
 80028d0:	001a      	movs	r2, r3
 80028d2:	f004 fc3f 	bl	8007154 <memcpy>
		60, 100, 80, 60, 100, 80, 60, 80, 60, 100,
		60, 80, 60, 60, 60, 60, 60, 60, 60, 60,
		60, 60, 60, 100
	};

	uint8_t auxKp[TRACKS] = {
 80028d6:	23bf      	movs	r3, #191	; 0xbf
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	18fa      	adds	r2, r7, r3
 80028dc:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <_ZN3map10InitTracksEv+0x1e8>)
 80028de:	0010      	movs	r0, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	2354      	movs	r3, #84	; 0x54
 80028e4:	001a      	movs	r2, r3
 80028e6:	f004 fc35 	bl	8007154 <memcpy>
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10
	};

	uint8_t auxKd[TRACKS] = {
 80028ea:	4b6e      	ldr	r3, [pc, #440]	; (8002aa4 <_ZN3map10InitTracksEv+0x1ec>)
 80028ec:	24ea      	movs	r4, #234	; 0xea
 80028ee:	00a4      	lsls	r4, r4, #2
 80028f0:	193a      	adds	r2, r7, r4
 80028f2:	18d2      	adds	r2, r2, r3
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <_ZN3map10InitTracksEv+0x1f0>)
 80028f6:	0010      	movs	r0, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	2354      	movs	r3, #84	; 0x54
 80028fc:	001a      	movs	r2, r3
 80028fe:	f004 fc29 	bl	8007154 <memcpy>
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
		3, 3, 3, 3
	};


	uint16_t auxRotationsEsq[TRACKS] = {
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <_ZN3map10InitTracksEv+0x1f4>)
 8002904:	193a      	adds	r2, r7, r4
 8002906:	18d2      	adds	r2, r2, r3
 8002908:	4b69      	ldr	r3, [pc, #420]	; (8002ab0 <_ZN3map10InitTracksEv+0x1f8>)
 800290a:	0010      	movs	r0, r2
 800290c:	0019      	movs	r1, r3
 800290e:	23a8      	movs	r3, #168	; 0xa8
 8002910:	001a      	movs	r2, r3
 8002912:	f004 fc1f 	bl	8007154 <memcpy>
		61, 164, 160, 181, 154, 164, 33, 181, 43, 1469,
		39, 113, 32, 69, 17, 77, 24, 71, 21, 73,
		28, 59, 33, 181
	};

	uint16_t auxRotationsDir[TRACKS] = {
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <_ZN3map10InitTracksEv+0x1fc>)
 8002918:	193a      	adds	r2, r7, r4
 800291a:	18d2      	adds	r2, r2, r3
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <_ZN3map10InitTracksEv+0x200>)
 800291e:	0010      	movs	r0, r2
 8002920:	0019      	movs	r1, r3
 8002922:	23a8      	movs	r3, #168	; 0xa8
 8002924:	001a      	movs	r2, r3
 8002926:	f004 fc15 	bl	8007154 <memcpy>
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		9, 9, 9, 9
	};*/

	uint16_t auxWaitChangeInit[TRACKS] = {
 800292a:	4b64      	ldr	r3, [pc, #400]	; (8002abc <_ZN3map10InitTracksEv+0x204>)
 800292c:	193a      	adds	r2, r7, r4
 800292e:	18d2      	adds	r2, r2, r3
 8002930:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <_ZN3map10InitTracksEv+0x208>)
 8002932:	0010      	movs	r0, r2
 8002934:	0019      	movs	r1, r3
 8002936:	23a8      	movs	r3, #168	; 0xa8
 8002938:	001a      	movs	r2, r3
 800293a:	f004 fc0b 	bl	8007154 <memcpy>
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
		10, 10, 10, 10

	};

	uint16_t auxWaitChangeFinish[TRACKS] = {
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <_ZN3map10InitTracksEv+0x20c>)
 8002940:	193a      	adds	r2, r7, r4
 8002942:	18d2      	adds	r2, r2, r3
 8002944:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <_ZN3map10InitTracksEv+0x210>)
 8002946:	0010      	movs	r0, r2
 8002948:	0019      	movs	r1, r3
 800294a:	23a8      	movs	r3, #168	; 0xa8
 800294c:	001a      	movs	r2, r3
 800294e:	f004 fc01 	bl	8007154 <memcpy>
		90, 200, 85, 90, 200, 85, 90, 85, 90, 93,
		90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
		90, 90, 90, 200
	};

	baseSpeed = 55;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2237      	movs	r2, #55	; 0x37
 8002956:	711a      	strb	r2, [r3, #4]
	for (char i=0; i<TRACKS; i++) {
 8002958:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <_ZN3map10InitTracksEv+0x214>)
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	485a      	ldr	r0, [pc, #360]	; (8002acc <_ZN3map10InitTracksEv+0x214>)
 8002962:	183b      	adds	r3, r7, r0
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b53      	cmp	r3, #83	; 0x53
 8002968:	d900      	bls.n	800296c <_ZN3map10InitTracksEv+0xb4>
 800296a:	e08f      	b.n	8002a8c <_ZN3map10InitTracksEv+0x1d4>
		//baseSpeed[i] = auxBaseSpeed[i];
		kp[i] = auxKp[i];
 800296c:	183b      	adds	r3, r7, r0
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	22bf      	movs	r2, #191	; 0xbf
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	18ba      	adds	r2, r7, r2
 8002976:	5cd2      	ldrb	r2, [r2, r3]
 8002978:	183b      	adds	r3, r7, r0
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b291      	uxth	r1, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	332c      	adds	r3, #44	; 0x2c
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	18d3      	adds	r3, r2, r3
 8002986:	3302      	adds	r3, #2
 8002988:	1c0a      	adds	r2, r1, #0
 800298a:	801a      	strh	r2, [r3, #0]
		kd[i] = auxKd[i];
 800298c:	183b      	adds	r3, r7, r0
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4a44      	ldr	r2, [pc, #272]	; (8002aa4 <_ZN3map10InitTracksEv+0x1ec>)
 8002992:	21ea      	movs	r1, #234	; 0xea
 8002994:	0089      	lsls	r1, r1, #2
 8002996:	468c      	mov	ip, r1
 8002998:	44bc      	add	ip, r7
 800299a:	4462      	add	r2, ip
 800299c:	5cd2      	ldrb	r2, [r2, r3]
 800299e:	183b      	adds	r3, r7, r0
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b291      	uxth	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	3380      	adds	r3, #128	; 0x80
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	18d3      	adds	r3, r2, r3
 80029ac:	3302      	adds	r3, #2
 80029ae:	1c0a      	adds	r2, r1, #0
 80029b0:	801a      	strh	r2, [r3, #0]
		highSpeed[i] = auxHighSpeed[i];
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	21d4      	movs	r1, #212	; 0xd4
 80029bc:	0089      	lsls	r1, r1, #2
 80029be:	1879      	adds	r1, r7, r1
 80029c0:	5c89      	ldrb	r1, [r1, r2]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	18d3      	adds	r3, r2, r3
 80029c6:	1c0a      	adds	r2, r1, #0
 80029c8:	715a      	strb	r2, [r3, #5]
		rotationsDir[i] = auxRotationsDir[i];
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <_ZN3map10InitTracksEv+0x1fc>)
 80029d4:	24ea      	movs	r4, #234	; 0xea
 80029d6:	00a4      	lsls	r4, r4, #2
 80029d8:	46a4      	mov	ip, r4
 80029da:	44bc      	add	ip, r7
 80029dc:	4462      	add	r2, ip
 80029de:	0049      	lsls	r1, r1, #1
 80029e0:	5a89      	ldrh	r1, [r1, r2]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	2489      	movs	r4, #137	; 0x89
 80029e6:	00a4      	lsls	r4, r4, #2
 80029e8:	46a4      	mov	ip, r4
 80029ea:	4463      	add	r3, ip
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	3304      	adds	r3, #4
 80029f2:	1c0a      	adds	r2, r1, #0
 80029f4:	801a      	strh	r2, [r3, #0]
		rotationsEsq[i] = auxRotationsEsq[i];
 80029f6:	183b      	adds	r3, r7, r0
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <_ZN3map10InitTracksEv+0x1f4>)
 8002a00:	24ea      	movs	r4, #234	; 0xea
 8002a02:	00a4      	lsls	r4, r4, #2
 8002a04:	46a4      	mov	ip, r4
 8002a06:	44bc      	add	ip, r7
 8002a08:	4462      	add	r2, ip
 8002a0a:	0049      	lsls	r1, r1, #1
 8002a0c:	5a89      	ldrh	r1, [r1, r2]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	249e      	movs	r4, #158	; 0x9e
 8002a12:	00a4      	lsls	r4, r4, #2
 8002a14:	46a4      	mov	ip, r4
 8002a16:	4463      	add	r3, ip
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	18d3      	adds	r3, r2, r3
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	801a      	strh	r2, [r3, #0]
		waitChangeInit[i] = auxWaitChangeInit[i];
 8002a22:	0005      	movs	r5, r0
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <_ZN3map10InitTracksEv+0x204>)
 8002a2a:	21ea      	movs	r1, #234	; 0xea
 8002a2c:	0089      	lsls	r1, r1, #2
 8002a2e:	468c      	mov	ip, r1
 8002a30:	44bc      	add	ip, r7
 8002a32:	4463      	add	r3, ip
 8002a34:	0052      	lsls	r2, r2, #1
 8002a36:	5ad2      	ldrh	r2, [r2, r3]
 8002a38:	197b      	adds	r3, r7, r5
 8002a3a:	781c      	ldrb	r4, [r3, #0]
 8002a3c:	0010      	movs	r0, r2
 8002a3e:	f7fe fbc1 	bl	80011c4 <__aeabi_ui2f>
 8002a42:	1c01      	adds	r1, r0, #0
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	0023      	movs	r3, r4
 8002a48:	336a      	adds	r3, #106	; 0x6a
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	18d3      	adds	r3, r2, r3
 8002a4e:	3304      	adds	r3, #4
 8002a50:	6019      	str	r1, [r3, #0]
		waitChangeFinish[i] = auxWaitChangeFinish[i];
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <_ZN3map10InitTracksEv+0x20c>)
 8002a58:	21ea      	movs	r1, #234	; 0xea
 8002a5a:	0089      	lsls	r1, r1, #2
 8002a5c:	468c      	mov	ip, r1
 8002a5e:	44bc      	add	ip, r7
 8002a60:	4463      	add	r3, ip
 8002a62:	0052      	lsls	r2, r2, #1
 8002a64:	5ad2      	ldrh	r2, [r2, r3]
 8002a66:	197b      	adds	r3, r7, r5
 8002a68:	781c      	ldrb	r4, [r3, #0]
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f7fe fbaa 	bl	80011c4 <__aeabi_ui2f>
 8002a70:	1c01      	adds	r1, r0, #0
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	0023      	movs	r3, r4
 8002a76:	33be      	adds	r3, #190	; 0xbe
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	6019      	str	r1, [r3, #0]
	for (char i=0; i<TRACKS; i++) {
 8002a80:	197b      	adds	r3, r7, r5
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	197b      	adds	r3, r7, r5
 8002a86:	3201      	adds	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e769      	b.n	8002960 <_ZN3map10InitTracksEv+0xa8>
	}
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	23ea      	movs	r3, #234	; 0xea
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	449d      	add	sp, r3
 8002a96:	bdb0      	pop	{r4, r5, r7, pc}
 8002a98:	fffffc58 	.word	0xfffffc58
 8002a9c:	08007248 	.word	0x08007248
 8002aa0:	0800729c 	.word	0x0800729c
 8002aa4:	ffffff00 	.word	0xffffff00
 8002aa8:	080072f0 	.word	0x080072f0
 8002aac:	fffffe58 	.word	0xfffffe58
 8002ab0:	08007344 	.word	0x08007344
 8002ab4:	fffffdb0 	.word	0xfffffdb0
 8002ab8:	080073ec 	.word	0x080073ec
 8002abc:	fffffd08 	.word	0xfffffd08
 8002ac0:	08007494 	.word	0x08007494
 8002ac4:	fffffc60 	.word	0xfffffc60
 8002ac8:	0800753c 	.word	0x0800753c
 8002acc:	000003a7 	.word	0x000003a7

08002ad0 <_ZN3map17GetWaitChangeInitEh>:

float map::GetWaitChangeInit(uint8_t pos) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	000a      	movs	r2, r1
 8002ada:	1cfb      	adds	r3, r7, #3
 8002adc:	701a      	strb	r2, [r3, #0]
	return (float)(waitChangeInit[pos] / 100);
 8002ade:	1cfb      	adds	r3, r7, #3
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	336a      	adds	r3, #106	; 0x6a
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	3304      	adds	r3, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4904      	ldr	r1, [pc, #16]	; (8002b00 <_ZN3map17GetWaitChangeInitEh+0x30>)
 8002af0:	1c18      	adds	r0, r3, #0
 8002af2:	f7fd fe55 	bl	80007a0 <__aeabi_fdiv>
 8002af6:	1c03      	adds	r3, r0, #0
}
 8002af8:	1c18      	adds	r0, r3, #0
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	42c80000 	.word	0x42c80000

08002b04 <_ZN3map19GetWaitChangeFinishEh>:

float map::GetWaitChangeFinish(uint8_t pos) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	1cfb      	adds	r3, r7, #3
 8002b10:	701a      	strb	r2, [r3, #0]
	return (float)(waitChangeFinish[pos] / 100);
 8002b12:	1cfb      	adds	r3, r7, #3
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	33be      	adds	r3, #190	; 0xbe
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <_ZN3map19GetWaitChangeFinishEh+0x30>)
 8002b24:	1c18      	adds	r0, r3, #0
 8002b26:	f7fd fe3b 	bl	80007a0 <__aeabi_fdiv>
 8002b2a:	1c03      	adds	r3, r0, #0
}
 8002b2c:	1c18      	adds	r0, r3, #0
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	42c80000 	.word	0x42c80000

08002b38 <_ZN3map15GetRotationsDirEh>:

uint16_t map::GetRotationsDir(uint8_t pos) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	000a      	movs	r2, r1
 8002b42:	1cfb      	adds	r3, r7, #3
 8002b44:	701a      	strb	r2, [r3, #0]
	return rotationsDir[pos];
 8002b46:	1cfb      	adds	r3, r7, #3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	2189      	movs	r1, #137	; 0x89
 8002b4e:	0089      	lsls	r1, r1, #2
 8002b50:	468c      	mov	ip, r1
 8002b52:	4463      	add	r3, ip
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	3304      	adds	r3, #4
 8002b5a:	881b      	ldrh	r3, [r3, #0]
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_ZN3map15GetRotationsEsqEh>:

uint16_t map::GetRotationsEsq(uint8_t pos) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	000a      	movs	r2, r1
 8002b6e:	1cfb      	adds	r3, r7, #3
 8002b70:	701a      	strb	r2, [r3, #0]
	return rotationsEsq[pos];
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	219e      	movs	r1, #158	; 0x9e
 8002b7a:	0089      	lsls	r1, r1, #2
 8002b7c:	468c      	mov	ip, r1
 8002b7e:	4463      	add	r3, ip
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	18d3      	adds	r3, r2, r3
 8002b84:	3304      	adds	r3, #4
 8002b86:	881b      	ldrh	r3, [r3, #0]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN3map12GetHighSpeedEh>:

/*uint8_t map::GetBaseSpeed(uint8_t pos) {
	return baseSpeed[pos];
}*/

uint8_t map::GetHighSpeed(uint8_t pos) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	000a      	movs	r2, r1
 8002b9a:	1cfb      	adds	r3, r7, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
	return highSpeed[pos];
 8002b9e:	1cfb      	adds	r3, r7, #3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	795b      	ldrb	r3, [r3, #5]
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZN3map5GetKpEh>:

float map::GetKp(uint8_t pos) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	000a      	movs	r2, r1
 8002bba:	1cfb      	adds	r3, r7, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
	return kp[pos];
 8002bbe:	1cfb      	adds	r3, r7, #3
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	332c      	adds	r3, #44	; 0x2c
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	3302      	adds	r3, #2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fe faf8 	bl	80011c4 <__aeabi_ui2f>
 8002bd4:	1c03      	adds	r3, r0, #0
}
 8002bd6:	1c18      	adds	r0, r3, #0
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_ZN3map5GetKdEh>:

float map::GetKd(uint8_t pos) {
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	000a      	movs	r2, r1
 8002be8:	1cfb      	adds	r3, r7, #3
 8002bea:	701a      	strb	r2, [r3, #0]
	return kd[pos];
 8002bec:	1cfb      	adds	r3, r7, #3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	3380      	adds	r3, #128	; 0x80
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	18d3      	adds	r3, r2, r3
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fe fae1 	bl	80011c4 <__aeabi_ui2f>
 8002c02:	1c03      	adds	r3, r0, #0
}
 8002c04:	1c18      	adds	r0, r3, #0
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZN3map17SetTrackRotationsEhtt>:

void map::SetTrackRotations(uint8_t pos, uint16_t rotDir, uint16_t rotEsq) {
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	000c      	movs	r4, r1
 8002c16:	0010      	movs	r0, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	250b      	movs	r5, #11
 8002c1c:	197b      	adds	r3, r7, r5
 8002c1e:	1c22      	adds	r2, r4, #0
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	2408      	movs	r4, #8
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	1c02      	adds	r2, r0, #0
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	1dbb      	adds	r3, r7, #6
 8002c2c:	1c0a      	adds	r2, r1, #0
 8002c2e:	801a      	strh	r2, [r3, #0]
	rotationsDir[pos] = rotDir;
 8002c30:	0029      	movs	r1, r5
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	2089      	movs	r0, #137	; 0x89
 8002c3a:	0080      	lsls	r0, r0, #2
 8002c3c:	4684      	mov	ip, r0
 8002c3e:	4463      	add	r3, ip
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	18d3      	adds	r3, r2, r3
 8002c44:	3304      	adds	r3, #4
 8002c46:	193a      	adds	r2, r7, r4
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	801a      	strh	r2, [r3, #0]
	rotationsEsq[pos] = rotEsq;
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	219e      	movs	r1, #158	; 0x9e
 8002c54:	0089      	lsls	r1, r1, #2
 8002c56:	468c      	mov	ip, r1
 8002c58:	4463      	add	r3, ip
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	3304      	adds	r3, #4
 8002c60:	1dba      	adds	r2, r7, #6
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c70 <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t>:
 *      Author: Lucas Martins
 */

#include "motor.h"

motor::motor(TIM_HandleTypeDef*  TIMER, uint8_t CHANNEL,  GPIO_TypeDef* PORT1, uint16_t PIN1, GPIO_TypeDef* PORT2, uint16_t PIN2) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <_ZN5motorC1EP17TIM_HandleTypeDefhP12GPIO_TypeDeftS3_t+0x50>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	channel = CHANNEL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1dfa      	adds	r2, r7, #7
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	721a      	strb	r2, [r3, #8]
	timer = TIMER;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	605a      	str	r2, [r3, #4]
	in1Port = PORT1;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	60da      	str	r2, [r3, #12]
	in2Port = PORT2;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	611a      	str	r2, [r3, #16]
	in1Pin = PIN1;
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	2318      	movs	r3, #24
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	8293      	strh	r3, [r2, #20]
	in2Pin = PIN2;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	18ba      	adds	r2, r7, r2
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	82da      	strh	r2, [r3, #22]
}
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b004      	add	sp, #16
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	080077b0 	.word	0x080077b0

08002cc4 <_ZN5motorD1Ev>:

motor::~motor() {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <_ZN5motorD1Ev+0x18>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	080077b0 	.word	0x080077b0

08002ce0 <_ZN5motorD0Ev>:
motor::~motor() {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
}
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff ffea 	bl	8002cc4 <_ZN5motorD1Ev>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2118      	movs	r1, #24
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f004 f9f7 	bl	80070e8 <_ZdlPvj>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN5motor3PWMEh>:



void motor::PWM(uint8_t pwm) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	000a      	movs	r2, r1
 8002d0e:	1cfb      	adds	r3, r7, #3
 8002d10:	701a      	strb	r2, [r3, #0]
	if(pwm > 255) {
		pwm = 255;
	}
	if( channel == 1) {
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7a1b      	ldrb	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d106      	bne.n	8002d28 <_ZN5motor3PWMEh+0x24>
		timer->Instance->CCR1 = pwm;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1cfa      	adds	r2, r7, #3
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	635a      	str	r2, [r3, #52]	; 0x34
		timer->Instance->CCR3 = pwm;
	} else {
		timer->Instance->CCR4 = pwm;
	}

}
 8002d26:	e026      	b.n	8002d76 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7a1b      	ldrb	r3, [r3, #8]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d106      	bne.n	8002d3e <_ZN5motor3PWMEh+0x3a>
		timer->Instance->CCR2 = pwm;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1cfa      	adds	r2, r7, #3
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d3c:	e01b      	b.n	8002d76 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7a1b      	ldrb	r3, [r3, #8]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d106      	bne.n	8002d54 <_ZN5motor3PWMEh+0x50>
		timer->Instance->CCR1 = pwm;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1cfa      	adds	r2, r7, #3
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d52:	e010      	b.n	8002d76 <_ZN5motor3PWMEh+0x72>
	} else if(channel == 2) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7a1b      	ldrb	r3, [r3, #8]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d106      	bne.n	8002d6a <_ZN5motor3PWMEh+0x66>
		timer->Instance->CCR3 = pwm;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1cfa      	adds	r2, r7, #3
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d68:	e005      	b.n	8002d76 <_ZN5motor3PWMEh+0x72>
		timer->Instance->CCR4 = pwm;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1cfa      	adds	r2, r7, #3
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_ZN5motor2CWEv>:

void motor::CW() {
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_SET);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68d8      	ldr	r0, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8a9b      	ldrh	r3, [r3, #20]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	0019      	movs	r1, r3
 8002d92:	f002 fcf6 	bl	8005782 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_RESET);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6918      	ldr	r0, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8adb      	ldrh	r3, [r3, #22]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	0019      	movs	r1, r3
 8002da2:	f002 fcee 	bl	8005782 <HAL_GPIO_WritePin>
}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}

08002dae <_ZN5motor3CCWEv>:

void motor::CCW() {
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_RESET);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68d8      	ldr	r0, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8a9b      	ldrh	r3, [r3, #20]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	f002 fcde 	bl	8005782 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_SET);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6918      	ldr	r0, [r3, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8adb      	ldrh	r3, [r3, #22]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	f002 fcd6 	bl	8005782 <HAL_GPIO_WritePin>
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZN5motor10MotorBreakEv>:

void motor::MotorBreak() {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(in1Port, in1Pin, GPIO_PIN_SET);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68d8      	ldr	r0, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8a9b      	ldrh	r3, [r3, #20]
 8002dee:	2201      	movs	r2, #1
 8002df0:	0019      	movs	r1, r3
 8002df2:	f002 fcc6 	bl	8005782 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in2Port, in2Pin, GPIO_PIN_SET);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6918      	ldr	r0, [r3, #16]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8adb      	ldrh	r3, [r3, #22]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	0019      	movs	r1, r3
 8002e02:	f002 fcbe 	bl	8005782 <HAL_GPIO_WritePin>
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <_ZN12motorControlC1EP5motorP7encoder>:
 *      Author: Lucas Martins
 */

#include <motorControl.h>

motorControl::motorControl(motor* M, encoder* E) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <_ZN12motorControlC1EP5motorP7encoder+0x28>)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	m = M;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	605a      	str	r2, [r3, #4]
	e = E;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	080077c0 	.word	0x080077c0

08002e3c <_ZN12motorControlD1Ev>:

motorControl::~motorControl() {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <_ZN12motorControlD1Ev+0x18>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	080077c0 	.word	0x080077c0

08002e58 <_ZN12motorControlD0Ev>:
motorControl::~motorControl() {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
}
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ffea 	bl	8002e3c <_ZN12motorControlD1Ev>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2114      	movs	r1, #20
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f004 f93b 	bl	80070e8 <_ZdlPvj>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_ZN12motorControl5SpeedEi>:
/*void motorControl::InitConsts(float KP, float KD) {
	kp = KP;
	kd = KD;
}*/

void motorControl::Speed(int speed)  {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
	if(speed >= 0) {
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db08      	blt.n	8002e9e <_ZN12motorControl5SpeedEi+0x22>
		m->CW();
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff ff74 	bl	8002d7e <_ZN5motor2CWEv>
		sinal = speed;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	60da      	str	r2, [r3, #12]
 8002e9c:	e008      	b.n	8002eb0 <_ZN12motorControl5SpeedEi+0x34>
	} else {
		m->CCW();
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff ff83 	bl	8002dae <_ZN5motor3CCWEv>
		sinal = -speed;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	425a      	negs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
	error = sinal - (e->GetRps() / 6.0262783);
	errorDer = error - olderror;

	pid = kp*error + kd*errorDer;
	sinal+=(pid);*/
	m->PWM(sinal);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	0019      	movs	r1, r3
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	f7ff ff21 	bl	8002d04 <_ZN5motor3PWMEh>
	sinal = speed;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	60da      	str	r2, [r3, #12]
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZN12motorControl5BreakEv>:

void motorControl::Break() {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	m->MotorBreak();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff ff7e 	bl	8002dde <_ZN5motor10MotorBreakEv>
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b002      	add	sp, #8
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZN12motorControl12GetRotationsEv>:

uint16_t motorControl::GetRotations() {
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
	return e->GetRotation();
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f7ff f916 	bl	8002128 <_ZN7encoder11GetRotationEv>
 8002efc:	0003      	movs	r3, r0
 8002efe:	b29b      	uxth	r3, r3
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN12motorControl8GetSpeedEv>:

int motorControl::GetSpeed() {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	return sinal;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZN8positionC1Ev>:
 *      Author: Lucas Martins
 */

#include "position.h"

position::position() {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <_ZN8positionC1Ev+0x18>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	080077d0 	.word	0x080077d0

08002f38 <_ZN8positionD1Ev>:

position::~position() {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <_ZN8positionD1Ev+0x18>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	080077d0 	.word	0x080077d0

08002f54 <_ZN8positionD0Ev>:
position::~position() {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
}
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff ffea 	bl	8002f38 <_ZN8positionD1Ev>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2128      	movs	r1, #40	; 0x28
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f004 f8bd 	bl	80070e8 <_ZdlPvj>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_ZN8position9SetAnalogEPhi>:

void position::SetAnalog(uint8_t* array, int size) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
	uint32_t aux;
	for(int i=0; i<CHANNELS; i++) {
 8002f84:	2300      	movs	r3, #0
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	dc37      	bgt.n	8002ffe <_ZN8position9SetAnalogEPhi+0x86>
		aux = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2106      	movs	r1, #6
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f93e 	bl	800021c <__divsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	da13      	bge.n	8002fd2 <_ZN8position9SetAnalogEPhi+0x5a>
			aux = aux + array[i+j*CHANNELS];
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	0013      	movs	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	001a      	movs	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]
		for(int j=0; j<(size/CHANNELS); j++) {
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e7e1      	b.n	8002f96 <_ZN8position9SetAnalogEPhi+0x1e>
		}
		sensors_analog[i] = aux / (size/CHANNELS);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2106      	movs	r1, #6
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd f920 	bl	800021c <__divsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	0019      	movs	r1, r3
 8002fe0:	69f8      	ldr	r0, [r7, #28]
 8002fe2:	f7fd f891 	bl	8000108 <__udivsi3>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	b2d9      	uxtb	r1, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	331a      	adds	r3, #26
 8002ff2:	1c0a      	adds	r2, r1, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e7c4      	b.n	8002f88 <_ZN8position9SetAnalogEPhi+0x10>
	}
	SetSensors();
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f87d 	bl	8003100 <_ZN8position10SetSensorsEv>
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b008      	add	sp, #32
 800300c:	bd80      	pop	{r7, pc}

0800300e <_ZN8position15InitCalibrationEv>:

void position::InitCalibration() {
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b05      	cmp	r3, #5
 800301e:	dc15      	bgt.n	800304c <_ZN8position15InitCalibrationEv+0x3e>
		max[i] = 0;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	3314      	adds	r3, #20
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
		min[i] = 255;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	330e      	adds	r3, #14
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	701a      	strb	r2, [r3, #0]
		med[i] = 0;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	18d3      	adds	r3, r2, r3
 800303e:	3308      	adds	r3, #8
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3301      	adds	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e7e6      	b.n	800301a <_ZN8position15InitCalibrationEv+0xc>
	}
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZN8position16CalibrateSensorsEv>:

void position::CalibrateSensors() {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b05      	cmp	r3, #5
 8003064:	dc48      	bgt.n	80030f8 <_ZN8position16CalibrateSensorsEv+0xa4>
		if(sensors_analog[i] > max[i]){
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	18d3      	adds	r3, r2, r3
 800306c:	331a      	adds	r3, #26
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	18cb      	adds	r3, r1, r3
 8003076:	3314      	adds	r3, #20
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90a      	bls.n	8003094 <_ZN8position16CalibrateSensorsEv+0x40>
			max[i] = sensors_analog[i];
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	18d3      	adds	r3, r2, r3
 8003084:	331a      	adds	r3, #26
 8003086:	7819      	ldrb	r1, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	3314      	adds	r3, #20
 8003090:	1c0a      	adds	r2, r1, #0
 8003092:	701a      	strb	r2, [r3, #0]
		}
		if(sensors_analog[i] < min[i]) {
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	331a      	adds	r3, #26
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	18cb      	adds	r3, r1, r3
 80030a4:	330e      	adds	r3, #14
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d20a      	bcs.n	80030c2 <_ZN8position16CalibrateSensorsEv+0x6e>
			min[i] = sensors_analog[i];
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	18d3      	adds	r3, r2, r3
 80030b2:	331a      	adds	r3, #26
 80030b4:	7819      	ldrb	r1, [r3, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	18d3      	adds	r3, r2, r3
 80030bc:	330e      	adds	r3, #14
 80030be:	1c0a      	adds	r2, r1, #0
 80030c0:	701a      	strb	r2, [r3, #0]
		}
		med[i] = (max[i] + min[i]) / 2;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	18d3      	adds	r3, r2, r3
 80030c8:	3314      	adds	r3, #20
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	0019      	movs	r1, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	330e      	adds	r3, #14
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	18cb      	adds	r3, r1, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da00      	bge.n	80030e0 <_ZN8position16CalibrateSensorsEv+0x8c>
 80030de:	3301      	adds	r3, #1
 80030e0:	105b      	asrs	r3, r3, #1
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	18d3      	adds	r3, r2, r3
 80030ea:	3308      	adds	r3, #8
 80030ec:	1c0a      	adds	r2, r1, #0
 80030ee:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3301      	adds	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e7b3      	b.n	8003060 <_ZN8position16CalibrateSensorsEv+0xc>
	}
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_ZN8position10SetSensorsEv>:

void position::SetSensors() {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	for(int i=0; i<CHANNELS; i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b05      	cmp	r3, #5
 8003110:	dc1e      	bgt.n	8003150 <_ZN8position10SetSensorsEv+0x50>
		if(sensors_analog[i] < med[i]){
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	18d3      	adds	r3, r2, r3
 8003118:	331a      	adds	r3, #26
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	18cb      	adds	r3, r1, r3
 8003122:	3308      	adds	r3, #8
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d207      	bcs.n	800313a <_ZN8position10SetSensorsEv+0x3a>
			sensors[i] = 1;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	2120      	movs	r1, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	185b      	adds	r3, r3, r1
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e006      	b.n	8003148 <_ZN8position10SetSensorsEv+0x48>
		} else {
			sensors[i] = 0;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	2120      	movs	r1, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	185b      	adds	r3, r3, r1
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<CHANNELS; i++) {
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e7dd      	b.n	800310c <_ZN8position10SetSensorsEv+0xc>
		}
	}
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZN8position14DefinePositionEv>:

int position::DefinePosition() {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	if(sensors[2] && sensors[3]) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2222      	movs	r2, #34	; 0x22
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <_ZN8position14DefinePositionEv+0x26>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2223      	movs	r2, #35	; 0x23
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d004      	beq.n	800317e <_ZN8position14DefinePositionEv+0x26>
		oldPos = 0;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
		return 0;
 800317a:	2300      	movs	r3, #0
 800317c:	e080      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3] && sensors[4]) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2223      	movs	r2, #35	; 0x23
 8003182:	5c9b      	ldrb	r3, [r3, r2]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <_ZN8position14DefinePositionEv+0x44>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	5c9b      	ldrb	r3, [r3, r2]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <_ZN8position14DefinePositionEv+0x44>
		oldPos = 2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	605a      	str	r2, [r3, #4]
		return 2;
 8003198:	2302      	movs	r3, #2
 800319a:	e071      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1] && sensors[2]) {
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2221      	movs	r2, #33	; 0x21
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <_ZN8position14DefinePositionEv+0x66>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2222      	movs	r2, #34	; 0x22
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <_ZN8position14DefinePositionEv+0x66>
		oldPos = -2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4252      	negs	r2, r2
 80031b6:	605a      	str	r2, [r3, #4]
		return -2;
 80031b8:	2302      	movs	r3, #2
 80031ba:	425b      	negs	r3, r3
 80031bc:	e060      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4] && sensors[5]) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2224      	movs	r2, #36	; 0x24
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <_ZN8position14DefinePositionEv+0x84>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2225      	movs	r2, #37	; 0x25
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <_ZN8position14DefinePositionEv+0x84>
		oldPos = 4;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	605a      	str	r2, [r3, #4]
		return 4;
 80031d8:	2304      	movs	r3, #4
 80031da:	e051      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0] && sensors[1]) {
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <_ZN8position14DefinePositionEv+0xa6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2221      	movs	r2, #33	; 0x21
 80031ea:	5c9b      	ldrb	r3, [r3, r2]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <_ZN8position14DefinePositionEv+0xa6>
		oldPos = -4;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	4252      	negs	r2, r2
 80031f6:	605a      	str	r2, [r3, #4]
		return -4;
 80031f8:	2304      	movs	r3, #4
 80031fa:	425b      	negs	r3, r3
 80031fc:	e040      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[3]) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2223      	movs	r2, #35	; 0x23
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <_ZN8position14DefinePositionEv+0xba>
		oldPos = 1;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	605a      	str	r2, [r3, #4]
		return 1;
 800320e:	2301      	movs	r3, #1
 8003210:	e036      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[2]) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2222      	movs	r2, #34	; 0x22
 8003216:	5c9b      	ldrb	r3, [r3, r2]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <_ZN8position14DefinePositionEv+0xd2>
		oldPos = -1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	4252      	negs	r2, r2
 8003222:	605a      	str	r2, [r3, #4]
		return -1;
 8003224:	2301      	movs	r3, #1
 8003226:	425b      	negs	r3, r3
 8003228:	e02a      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[4]) {
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2224      	movs	r2, #36	; 0x24
 800322e:	5c9b      	ldrb	r3, [r3, r2]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <_ZN8position14DefinePositionEv+0xe6>
		oldPos = 3;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2203      	movs	r2, #3
 8003238:	605a      	str	r2, [r3, #4]
		return 3;
 800323a:	2303      	movs	r3, #3
 800323c:	e020      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[1]) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2221      	movs	r2, #33	; 0x21
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <_ZN8position14DefinePositionEv+0xfe>
		oldPos = -3;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	4252      	negs	r2, r2
 800324e:	605a      	str	r2, [r3, #4]
		return -3;
 8003250:	2303      	movs	r3, #3
 8003252:	425b      	negs	r3, r3
 8003254:	e014      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[5]) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2225      	movs	r2, #37	; 0x25
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <_ZN8position14DefinePositionEv+0x10c>
		return 5;
 8003260:	2305      	movs	r3, #5
 8003262:	e00d      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	} else if (sensors[0]) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	5c9b      	ldrb	r3, [r3, r2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <_ZN8position14DefinePositionEv+0x124>
		oldPos = -5;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2205      	movs	r2, #5
 8003272:	4252      	negs	r2, r2
 8003274:	605a      	str	r2, [r3, #4]
		return -5;
 8003276:	2305      	movs	r3, #5
 8003278:	425b      	negs	r3, r3
 800327a:	e001      	b.n	8003280 <_ZN8position14DefinePositionEv+0x128>
	}
	return oldPos;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <_ZN5robotC1EP7controlP12motorControlS3_P3map>:
 *      Author: Lucas Martins
 */

#include "robot.h"

robot::robot(control* CTR, motorControl* MDIR, motorControl* MESQ, map* CIRCUIT) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <_ZN5robotC1EP7controlP12motorControlS3_P3map+0x3c>)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ctr = CTR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	605a      	str	r2, [r3, #4]
	mdir = MDIR;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
	mesq = MESQ;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	60da      	str	r2, [r3, #12]
	circuit = CIRCUIT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	611a      	str	r2, [r3, #16]
	sum = 0;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
}
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0018      	movs	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	080077e0 	.word	0x080077e0

080032c8 <_ZN5robotD1Ev>:

robot::~robot() {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <_ZN5robotD1Ev+0x18>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	080077e0 	.word	0x080077e0

080032e4 <_ZN5robotD0Ev>:
robot::~robot() {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
}
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7ff ffea 	bl	80032c8 <_ZN5robotD1Ev>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	213c      	movs	r1, #60	; 0x3c
 80032f8:	0018      	movs	r0, r3
 80032fa:	f003 fef5 	bl	80070e8 <_ZdlPvj>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZN5robot7RunningEv>:
	} else {
		return -val;
	}
}

void robot::Running() {
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	velDir = velBase + ctr->PIDValue();
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd ff0f 	bl	8001138 <__aeabi_i2f>
 800331a:	1c04      	adds	r4, r0, #0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7fe fdfd 	bl	8001f20 <_ZN7control8PIDValueEv>
 8003326:	1c03      	adds	r3, r0, #0
 8003328:	1c19      	adds	r1, r3, #0
 800332a:	1c20      	adds	r0, r4, #0
 800332c:	f7fd f89c 	bl	8000468 <__aeabi_fadd>
 8003330:	1c03      	adds	r3, r0, #0
 8003332:	1c1a      	adds	r2, r3, #0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	61da      	str	r2, [r3, #28]
	velEsq = velBase - ctr->PIDValue();
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	0018      	movs	r0, r3
 800333e:	f7fd fefb 	bl	8001138 <__aeabi_i2f>
 8003342:	1c04      	adds	r4, r0, #0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f7fe fde9 	bl	8001f20 <_ZN7control8PIDValueEv>
 800334e:	1c03      	adds	r3, r0, #0
 8003350:	1c19      	adds	r1, r3, #0
 8003352:	1c20      	adds	r0, r4, #0
 8003354:	f7fd fd08 	bl	8000d68 <__aeabi_fsub>
 8003358:	1c03      	adds	r3, r0, #0
 800335a:	1c1a      	adds	r2, r3, #0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]
	if(velDir > velMax) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69dc      	ldr	r4, [r3, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	0018      	movs	r0, r3
 800336a:	f7fd fee5 	bl	8001138 <__aeabi_i2f>
 800336e:	1c03      	adds	r3, r0, #0
 8003370:	1c19      	adds	r1, r3, #0
 8003372:	1c20      	adds	r0, r4, #0
 8003374:	f7fd f864 	bl	8000440 <__aeabi_fcmpgt>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d007      	beq.n	800338c <_ZN5robot7RunningEv+0x84>
		velDir = velMax;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	0018      	movs	r0, r3
 8003382:	f7fd fed9 	bl	8001138 <__aeabi_i2f>
 8003386:	1c02      	adds	r2, r0, #0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	61da      	str	r2, [r3, #28]
	}
	if(velEsq > velMax) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1c      	ldr	r4, [r3, #32]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	0018      	movs	r0, r3
 8003396:	f7fd fecf 	bl	8001138 <__aeabi_i2f>
 800339a:	1c03      	adds	r3, r0, #0
 800339c:	1c19      	adds	r1, r3, #0
 800339e:	1c20      	adds	r0, r4, #0
 80033a0:	f7fd f84e 	bl	8000440 <__aeabi_fcmpgt>
 80033a4:	1e03      	subs	r3, r0, #0
 80033a6:	d007      	beq.n	80033b8 <_ZN5robot7RunningEv+0xb0>
		velEsq = velMax;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fd fec3 	bl	8001138 <__aeabi_i2f>
 80033b2:	1c02      	adds	r2, r0, #0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	621a      	str	r2, [r3, #32]
	}
	mdir->Speed(velDir);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689c      	ldr	r4, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	1c18      	adds	r0, r3, #0
 80033c2:	f7fd fe99 	bl	80010f8 <__aeabi_f2iz>
 80033c6:	0003      	movs	r3, r0
 80033c8:	0019      	movs	r1, r3
 80033ca:	0020      	movs	r0, r4
 80033cc:	f7ff fd56 	bl	8002e7c <_ZN12motorControl5SpeedEi>
	mesq->Speed(velEsq);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68dc      	ldr	r4, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	1c18      	adds	r0, r3, #0
 80033da:	f7fd fe8d 	bl	80010f8 <__aeabi_f2iz>
 80033de:	0003      	movs	r3, r0
 80033e0:	0019      	movs	r1, r3
 80033e2:	0020      	movs	r0, r4
 80033e4:	f7ff fd4a 	bl	8002e7c <_ZN12motorControl5SpeedEi>
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b003      	add	sp, #12
 80033ee:	bd90      	pop	{r4, r7, pc}

080033f0 <_ZN5robot6FinishEPm>:

void robot::Finish(uint32_t* z) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	*z = 0;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
	while(*z < 1000) {
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	23fa      	movs	r3, #250	; 0xfa
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d20c      	bcs.n	8003426 <_ZN5robot6FinishEPm+0x36>
		mdir->Speed(70);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2146      	movs	r1, #70	; 0x46
 8003412:	0018      	movs	r0, r3
 8003414:	f7ff fd32 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		mesq->Speed(70);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2146      	movs	r1, #70	; 0x46
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fd2c 	bl	8002e7c <_ZN12motorControl5SpeedEi>
	while(*z < 1000) {
 8003424:	e7ec      	b.n	8003400 <_ZN5robot6FinishEPm+0x10>
	}
	*z = 60000;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4a07      	ldr	r2, [pc, #28]	; (8003448 <_ZN5robot6FinishEPm+0x58>)
 800342a:	601a      	str	r2, [r3, #0]
	mdir->Break();
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff fd4d 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	mesq->Break();
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff fd48 	bl	8002ed0 <_ZN12motorControl5BreakEv>
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0000ea60 	.word	0x0000ea60

0800344c <_ZN5robot9CalibrateEPm>:

void robot::Calibrate(uint32_t* z) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	ctr->p->InitCalibration();
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fdd6 	bl	800300e <_ZN8position15InitCalibrationEv>
	*z = 0;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
	while(*z < 3000) {
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <_ZN5robot9CalibrateEPm+0x104>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d812      	bhi.n	8003498 <_ZN5robot9CalibrateEPm+0x4c>
		mdir->Speed(75);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	214b      	movs	r1, #75	; 0x4b
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff fcff 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2100      	movs	r1, #0
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fcf9 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff fddf 	bl	8003054 <_ZN8position16CalibrateSensorsEv>
	while(*z < 3000) {
 8003496:	e7e7      	b.n	8003468 <_ZN5robot9CalibrateEPm+0x1c>
	}
	mdir->Break();
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fd17 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	mesq->Break();
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fd12 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	while(*z < 8000) {
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	23fa      	movs	r3, #250	; 0xfa
 80034b2:	015b      	lsls	r3, r3, #5
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d214      	bcs.n	80034e2 <_ZN5robot9CalibrateEPm+0x96>
		mdir->Speed(-75);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	224b      	movs	r2, #75	; 0x4b
 80034be:	4252      	negs	r2, r2
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fcda 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2100      	movs	r1, #0
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff fcd4 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	0018      	movs	r0, r3
 80034dc:	f7ff fdba 	bl	8003054 <_ZN8position16CalibrateSensorsEv>
	while(*z < 8000) {
 80034e0:	e7e4      	b.n	80034ac <_ZN5robot9CalibrateEPm+0x60>
	}
	mdir->Break();
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7ff fcf2 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	mesq->Break();
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fced 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	while(*z < 12000) {
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <_ZN5robot9CalibrateEPm+0x108>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d812      	bhi.n	8003526 <_ZN5robot9CalibrateEPm+0xda>
		mdir->Speed(75);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	214b      	movs	r1, #75	; 0x4b
 8003506:	0018      	movs	r0, r3
 8003508:	f7ff fcb8 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		mesq->Speed(0);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2100      	movs	r1, #0
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff fcb2 	bl	8002e7c <_ZN12motorControl5SpeedEi>
		ctr->p->CalibrateSensors();
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff fd98 	bl	8003054 <_ZN8position16CalibrateSensorsEv>
	while(*z < 12000) {
 8003524:	e7e7      	b.n	80034f6 <_ZN5robot9CalibrateEPm+0xaa>
	}

	*z = 60000;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	4a0b      	ldr	r2, [pc, #44]	; (8003558 <_ZN5robot9CalibrateEPm+0x10c>)
 800352a:	601a      	str	r2, [r3, #0]
	mdir->Break();
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	0018      	movs	r0, r3
 8003532:	f7ff fccd 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	mesq->Break();
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	0018      	movs	r0, r3
 800353c:	f7ff fcc8 	bl	8002ed0 <_ZN12motorControl5BreakEv>
	pos = 0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	751a      	strb	r2, [r3, #20]
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	00000bb7 	.word	0x00000bb7
 8003554:	00002edf 	.word	0x00002edf
 8003558:	0000ea60 	.word	0x0000ea60

0800355c <_ZN5robot11GetPositionEv>:

int robot::GetPosition() {
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	return pos;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7d1b      	ldrb	r3, [r3, #20]
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZN5robot9NextStateEv>:

void robot::NextState() {
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	pos++;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7d1b      	ldrb	r3, [r3, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	b2da      	uxtb	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	751a      	strb	r2, [r3, #20]
	ChangeTrack();
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f804 	bl	8003594 <_ZN5robot11ChangeTrackEv>
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN5robot11ChangeTrackEv>:

void robot::ChangeTrack() {
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	if(pos != 0) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7d1b      	ldrb	r3, [r3, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <_ZN5robot11ChangeTrackEv+0x40>
		circuit->SetTrackRotations((pos-1), mdir->GetRotations(), mesq->GetRotations());
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691c      	ldr	r4, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d1b      	ldrb	r3, [r3, #20]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b2dd      	uxtb	r5, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fc98 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 80035ba:	0003      	movs	r3, r0
 80035bc:	001e      	movs	r6, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7ff fc91 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 80035c8:	0003      	movs	r3, r0
 80035ca:	0032      	movs	r2, r6
 80035cc:	0029      	movs	r1, r5
 80035ce:	0020      	movs	r0, r4
 80035d0:	f7ff fb1c 	bl	8002c0c <_ZN3map17SetTrackRotationsEhtt>
	}
	//velMax = 150;
	//velBase = 60 + sum;
	velMax = 150;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2296      	movs	r2, #150	; 0x96
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
	velBase = circuit->baseSpeed + sum;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	791b      	ldrb	r3, [r3, #4]
 80035e0:	001a      	movs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	18d2      	adds	r2, r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
	//ctr->setConsts(87, 29);
	//velBase = circuit->GetBaseSpeed(pos) + sum;
	ctr->setConsts(circuit->GetKp(pos), circuit->GetKd(pos));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685c      	ldr	r4, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7d1b      	ldrb	r3, [r3, #20]
 80035f8:	0019      	movs	r1, r3
 80035fa:	0010      	movs	r0, r2
 80035fc:	f7ff fad8 	bl	8002bb0 <_ZN3map5GetKpEh>
 8003600:	1c05      	adds	r5, r0, #0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	7d1b      	ldrb	r3, [r3, #20]
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f7ff fae6 	bl	8002bde <_ZN3map5GetKdEh>
 8003612:	1c03      	adds	r3, r0, #0
 8003614:	1c1a      	adds	r2, r3, #0
 8003616:	1c29      	adds	r1, r5, #0
 8003618:	0020      	movs	r0, r4
 800361a:	f7fe fc65 	bl	8001ee8 <_ZN7control9setConstsEff>
	//ctr->setKD(circuit->GetKd(pos));
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b003      	add	sp, #12
 8003624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003626 <_ZN5robot16CompareRotationsEv>:

void robot::CompareRotations(){
 8003626:	b5b0      	push	{r4, r5, r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	if((mdir->GetRotations() > (circuit->GetWaitChangeInit(pos)*circuit->GetRotationsDir(pos))) || (mesq->GetRotations() > circuit->GetWaitChangeInit(pos)*circuit->GetRotationsEsq(pos))) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff fc59 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 8003638:	0003      	movs	r3, r0
 800363a:	0018      	movs	r0, r3
 800363c:	f7fd fd7c 	bl	8001138 <__aeabi_i2f>
 8003640:	1c04      	adds	r4, r0, #0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7d1b      	ldrb	r3, [r3, #20]
 800364a:	0019      	movs	r1, r3
 800364c:	0010      	movs	r0, r2
 800364e:	f7ff fa3f 	bl	8002ad0 <_ZN3map17GetWaitChangeInitEh>
 8003652:	1c05      	adds	r5, r0, #0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7d1b      	ldrb	r3, [r3, #20]
 800365c:	0019      	movs	r1, r3
 800365e:	0010      	movs	r0, r2
 8003660:	f7ff fa6a 	bl	8002b38 <_ZN3map15GetRotationsDirEh>
 8003664:	0003      	movs	r3, r0
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd fd66 	bl	8001138 <__aeabi_i2f>
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	1c19      	adds	r1, r3, #0
 8003670:	1c28      	adds	r0, r5, #0
 8003672:	f7fd fa5f 	bl	8000b34 <__aeabi_fmul>
 8003676:	1c03      	adds	r3, r0, #0
 8003678:	1c19      	adds	r1, r3, #0
 800367a:	1c20      	adds	r0, r4, #0
 800367c:	f7fc fee0 	bl	8000440 <__aeabi_fcmpgt>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d12a      	bne.n	80036da <_ZN5robot16CompareRotationsEv+0xb4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0018      	movs	r0, r3
 800368a:	f7ff fc2e 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 800368e:	0003      	movs	r3, r0
 8003690:	0018      	movs	r0, r3
 8003692:	f7fd fd51 	bl	8001138 <__aeabi_i2f>
 8003696:	1c04      	adds	r4, r0, #0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7d1b      	ldrb	r3, [r3, #20]
 80036a0:	0019      	movs	r1, r3
 80036a2:	0010      	movs	r0, r2
 80036a4:	f7ff fa14 	bl	8002ad0 <_ZN3map17GetWaitChangeInitEh>
 80036a8:	1c05      	adds	r5, r0, #0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7d1b      	ldrb	r3, [r3, #20]
 80036b2:	0019      	movs	r1, r3
 80036b4:	0010      	movs	r0, r2
 80036b6:	f7ff fa55 	bl	8002b64 <_ZN3map15GetRotationsEsqEh>
 80036ba:	0003      	movs	r3, r0
 80036bc:	0018      	movs	r0, r3
 80036be:	f7fd fd3b 	bl	8001138 <__aeabi_i2f>
 80036c2:	1c03      	adds	r3, r0, #0
 80036c4:	1c19      	adds	r1, r3, #0
 80036c6:	1c28      	adds	r0, r5, #0
 80036c8:	f7fd fa34 	bl	8000b34 <__aeabi_fmul>
 80036cc:	1c03      	adds	r3, r0, #0
 80036ce:	1c19      	adds	r1, r3, #0
 80036d0:	1c20      	adds	r0, r4, #0
 80036d2:	f7fc feb5 	bl	8000440 <__aeabi_fcmpgt>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d001      	beq.n	80036de <_ZN5robot16CompareRotationsEv+0xb8>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <_ZN5robot16CompareRotationsEv+0xba>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <_ZN5robot16CompareRotationsEv+0xdc>
		velBase = circuit->GetHighSpeed(pos) + sum;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	7d1b      	ldrb	r3, [r3, #20]
 80036ec:	0019      	movs	r1, r3
 80036ee:	0010      	movs	r0, r2
 80036f0:	f7ff fa4e 	bl	8002b90 <_ZN3map12GetHighSpeedEh>
 80036f4:	0003      	movs	r3, r0
 80036f6:	001a      	movs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	18d2      	adds	r2, r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
	}

	//if((mdir->GetRotations() > ((circuit->GetWaitChangeFinish(pos)  / 10)*circuit->GetRotationsDir(pos))) || (mesq->GetRotations() > ((circuit->GetWaitChangeFinish(pos)  / 10)*circuit->GetRotationsEsq(pos)))) {
	if((mdir->GetRotations() > (circuit->GetWaitChangeFinish(pos)*circuit->GetRotationsDir(pos))) || (mesq->GetRotations() > circuit->GetWaitChangeFinish(pos)*circuit->GetRotationsEsq(pos))) {
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff fbef 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 800370c:	0003      	movs	r3, r0
 800370e:	0018      	movs	r0, r3
 8003710:	f7fd fd12 	bl	8001138 <__aeabi_i2f>
 8003714:	1c04      	adds	r4, r0, #0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7d1b      	ldrb	r3, [r3, #20]
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f7ff f9ef 	bl	8002b04 <_ZN3map19GetWaitChangeFinishEh>
 8003726:	1c05      	adds	r5, r0, #0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7d1b      	ldrb	r3, [r3, #20]
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7ff fa00 	bl	8002b38 <_ZN3map15GetRotationsDirEh>
 8003738:	0003      	movs	r3, r0
 800373a:	0018      	movs	r0, r3
 800373c:	f7fd fcfc 	bl	8001138 <__aeabi_i2f>
 8003740:	1c03      	adds	r3, r0, #0
 8003742:	1c19      	adds	r1, r3, #0
 8003744:	1c28      	adds	r0, r5, #0
 8003746:	f7fd f9f5 	bl	8000b34 <__aeabi_fmul>
 800374a:	1c03      	adds	r3, r0, #0
 800374c:	1c19      	adds	r1, r3, #0
 800374e:	1c20      	adds	r0, r4, #0
 8003750:	f7fc fe76 	bl	8000440 <__aeabi_fcmpgt>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d12a      	bne.n	80037ae <_ZN5robot16CompareRotationsEv+0x188>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0018      	movs	r0, r3
 800375e:	f7ff fbc4 	bl	8002eea <_ZN12motorControl12GetRotationsEv>
 8003762:	0003      	movs	r3, r0
 8003764:	0018      	movs	r0, r3
 8003766:	f7fd fce7 	bl	8001138 <__aeabi_i2f>
 800376a:	1c04      	adds	r4, r0, #0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7d1b      	ldrb	r3, [r3, #20]
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f7ff f9c4 	bl	8002b04 <_ZN3map19GetWaitChangeFinishEh>
 800377c:	1c05      	adds	r5, r0, #0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	7d1b      	ldrb	r3, [r3, #20]
 8003786:	0019      	movs	r1, r3
 8003788:	0010      	movs	r0, r2
 800378a:	f7ff f9eb 	bl	8002b64 <_ZN3map15GetRotationsEsqEh>
 800378e:	0003      	movs	r3, r0
 8003790:	0018      	movs	r0, r3
 8003792:	f7fd fcd1 	bl	8001138 <__aeabi_i2f>
 8003796:	1c03      	adds	r3, r0, #0
 8003798:	1c19      	adds	r1, r3, #0
 800379a:	1c28      	adds	r0, r5, #0
 800379c:	f7fd f9ca 	bl	8000b34 <__aeabi_fmul>
 80037a0:	1c03      	adds	r3, r0, #0
 80037a2:	1c19      	adds	r1, r3, #0
 80037a4:	1c20      	adds	r0, r4, #0
 80037a6:	f7fc fe4b 	bl	8000440 <__aeabi_fcmpgt>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d001      	beq.n	80037b2 <_ZN5robot16CompareRotationsEv+0x18c>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <_ZN5robot16CompareRotationsEv+0x18e>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <_ZN5robot16CompareRotationsEv+0x1a4>
		velBase = circuit->baseSpeed + sum;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	791b      	ldrb	r3, [r3, #4]
 80037be:	001a      	movs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	18d2      	adds	r2, r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/*if (mdir->GetRotations() > 3*circuit->GetRotationsDir(pos) || mesq->GetRotations() > 3*circuit->GetRotationsEsq(pos)) {
		pos++;
	}*/
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b002      	add	sp, #8
 80037d0:	bdb0      	pop	{r4, r5, r7, pc}

080037d2 <_ZN5robot7sumPlusEv>:

void robot::sumPlus() {
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	sum++;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	619a      	str	r2, [r3, #24]
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b002      	add	sp, #8
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_ZN5robot7sumLessEv>:

void robot::sumLess() {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	sum--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	1e5a      	subs	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b002      	add	sp, #8
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <_ZN10sensorSideC1EP12GPIO_TypeDeft>:
 *      Author: Lucas Martins
 */

#include "sensorSide.h"

sensorSide::sensorSide(GPIO_TypeDef* PORT, uint16_t PIN) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	1dbb      	adds	r3, r7, #6
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <_ZN10sensorSideC1EP12GPIO_TypeDeft+0x34>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	port = PORT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
	pin = PIN;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1dba      	adds	r2, r7, #6
 8003826:	8812      	ldrh	r2, [r2, #0]
 8003828:	80da      	strh	r2, [r3, #6]
	track = 0;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	711a      	strb	r2, [r3, #4]
}
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	080077f0 	.word	0x080077f0

08003840 <_ZN10sensorSideD1Ev>:

sensorSide::~sensorSide() {
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	4a03      	ldr	r2, [pc, #12]	; (8003858 <_ZN10sensorSideD1Ev+0x18>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}
 8003858:	080077f0 	.word	0x080077f0

0800385c <_ZN10sensorSideD0Ev>:
sensorSide::~sensorSide() {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
}
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff ffea 	bl	8003840 <_ZN10sensorSideD1Ev>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	210c      	movs	r1, #12
 8003870:	0018      	movs	r0, r3
 8003872:	f003 fc39 	bl	80070e8 <_ZdlPvj>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0018      	movs	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <_ZN10sensorSide9NextTrackEv>:

void sensorSide::InitTrack() {
	track = 0;
}

void sensorSide::NextTrack() {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	track++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	3301      	adds	r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	711a      	strb	r2, [r3, #4]
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZN10sensorSide12CurrentTrackEv>:

uint8_t sensorSide::CurrentTrack() {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	return track;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	791b      	ldrb	r3, [r3, #4]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZN10sensorSide6GetPinEv>:

uint16_t sensorSide::GetPin() {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	return pin;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	88db      	ldrh	r3, [r3, #6]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_ZN10sensorSide5StateEv>:

GPIO_PinState sensorSide::State() {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(port, pin);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	88db      	ldrh	r3, [r3, #6]
 80038d4:	0019      	movs	r1, r3
 80038d6:	0010      	movs	r0, r2
 80038d8:	f001 ff36 	bl	8005748 <HAL_GPIO_ReadPin>
 80038dc:	0003      	movs	r3, r0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t adcArray[BUFFER], check;
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	ADC_Interrupt(adcArray, BUFFER);
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_ADC_ConvCpltCallback+0x1c>)
 80038f2:	212a      	movs	r1, #42	; 0x2a
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7fe fce1 	bl	80022bc <ADC_Interrupt>
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b002      	add	sp, #8
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	200007ac 	.word	0x200007ac

08003908 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim1) {
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d101      	bne.n	800391c <HAL_TIM_PeriodElapsedCallback+0x14>
	  TIM1_Interrupt();
 8003918:	f7fe fce8 	bl	80022ec <TIM1_Interrupt>
  }
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000824 	.word	0x20000824

08003928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800392c:	f000 fd8a 	bl	8004444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003930:	f000 f832 	bl	8003998 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003934:	f000 fa94 	bl	8003e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8003938:	f000 fa74 	bl	8003e24 <MX_DMA_Init>
  MX_ADC_Init();
 800393c:	f000 f876 	bl	8003a2c <MX_ADC_Init>
  MX_TIM1_Init();
 8003940:	f000 f910 	bl	8003b64 <MX_TIM1_Init>
  MX_TIM16_Init();
 8003944:	f000 f966 	bl	8003c14 <MX_TIM16_Init>
  MX_TIM17_Init();
 8003948:	f000 f9e8 	bl	8003d1c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <main+0x5c>)
 800394e:	0018      	movs	r0, r3
 8003950:	f001 fa6c 	bl	8004e2c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcArray, BUFFER);
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <main+0x60>)
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <main+0x5c>)
 8003958:	222a      	movs	r2, #42	; 0x2a
 800395a:	0018      	movs	r0, r3
 800395c:	f000 ff16 	bl	800478c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <main+0x64>)
 8003962:	0018      	movs	r0, r3
 8003964:	f002 fbe2 	bl	800612c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <main+0x68>)
 800396a:	2100      	movs	r1, #0
 800396c:	0018      	movs	r0, r3
 800396e:	f002 fc7b 	bl	8006268 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <main+0x6c>)
 8003974:	2100      	movs	r1, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f002 fc76 	bl	8006268 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CppMain();
 800397c:	f7fe fc36 	bl	80021ec <CppMain>
 8003980:	e7fc      	b.n	800397c <main+0x54>
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	200008b0 	.word	0x200008b0
 8003988:	200007ac 	.word	0x200007ac
 800398c:	20000824 	.word	0x20000824
 8003990:	200008f0 	.word	0x200008f0
 8003994:	200007d8 	.word	0x200007d8

08003998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b091      	sub	sp, #68	; 0x44
 800399c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399e:	2410      	movs	r4, #16
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	0018      	movs	r0, r3
 80039a4:	2330      	movs	r3, #48	; 0x30
 80039a6:	001a      	movs	r2, r3
 80039a8:	2100      	movs	r1, #0
 80039aa:	f003 fbdc 	bl	8007166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ae:	003b      	movs	r3, r7
 80039b0:	0018      	movs	r0, r3
 80039b2:	2310      	movs	r3, #16
 80039b4:	001a      	movs	r2, r3
 80039b6:	2100      	movs	r1, #0
 80039b8:	f003 fbd5 	bl	8007166 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039bc:	0021      	movs	r1, r4
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	2202      	movs	r2, #2
 80039c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	2201      	movs	r2, #1
 80039c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2210      	movs	r2, #16
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2200      	movs	r2, #0
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	22a0      	movs	r2, #160	; 0xa0
 80039e0:	0392      	lsls	r2, r2, #14
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	2200      	movs	r2, #0
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	0018      	movs	r0, r3
 80039ee:	f001 ff01 	bl	80057f4 <HAL_RCC_OscConfig>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80039f6:	f000 fb23 	bl	8004040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fa:	003b      	movs	r3, r7
 80039fc:	2207      	movs	r2, #7
 80039fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a00:	003b      	movs	r3, r7
 8003a02:	2202      	movs	r2, #2
 8003a04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a06:	003b      	movs	r3, r7
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a0c:	003b      	movs	r3, r7
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a12:	003b      	movs	r3, r7
 8003a14:	2101      	movs	r1, #1
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 fa06 	bl	8005e28 <HAL_RCC_ClockConfig>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d001      	beq.n	8003a24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003a20:	f000 fb0e 	bl	8004040 <Error_Handler>
  }
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b011      	add	sp, #68	; 0x44
 8003a2a:	bd90      	pop	{r4, r7, pc}

08003a2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	0018      	movs	r0, r3
 8003a36:	230c      	movs	r3, #12
 8003a38:	001a      	movs	r2, r3
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f003 fb93 	bl	8007166 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003a40:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a42:	4a47      	ldr	r2, [pc, #284]	; (8003b60 <MX_ADC_Init+0x134>)
 8003a44:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a46:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	0612      	lsls	r2, r2, #24
 8003a4c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a50:	2210      	movs	r2, #16
 8003a52:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a62:	2208      	movs	r2, #8
 8003a64:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003a72:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003a78:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a80:	22c2      	movs	r2, #194	; 0xc2
 8003a82:	32ff      	adds	r2, #255	; 0xff
 8003a84:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a86:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <MX_ADC_Init+0x130>)
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 fd35 	bl	800450c <HAL_ADC_Init>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8003aa6:	f000 facb 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	0152      	lsls	r2, r2, #5
 8003ab6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	2204      	movs	r2, #4
 8003abc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003abe:	1d3a      	adds	r2, r7, #4
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <MX_ADC_Init+0x130>)
 8003ac2:	0011      	movs	r1, r2
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 ffb3 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8003ace:	f000 fab7 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ad8:	1d3a      	adds	r2, r7, #4
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <MX_ADC_Init+0x130>)
 8003adc:	0011      	movs	r1, r2
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 ffa6 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003ae4:	1e03      	subs	r3, r0, #0
 8003ae6:	d001      	beq.n	8003aec <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003ae8:	f000 faaa 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	2203      	movs	r2, #3
 8003af0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003af2:	1d3a      	adds	r2, r7, #4
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <MX_ADC_Init+0x130>)
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 ff99 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d001      	beq.n	8003b06 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003b02:	f000 fa9d 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	2204      	movs	r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b0c:	1d3a      	adds	r2, r7, #4
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <MX_ADC_Init+0x130>)
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 ff8c 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8003b1c:	f000 fa90 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2205      	movs	r2, #5
 8003b24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b26:	1d3a      	adds	r2, r7, #4
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <MX_ADC_Init+0x130>)
 8003b2a:	0011      	movs	r1, r2
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 ff7f 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8003b36:	f000 fa83 	bl	8004040 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	2206      	movs	r2, #6
 8003b3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b40:	1d3a      	adds	r2, r7, #4
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <MX_ADC_Init+0x130>)
 8003b44:	0011      	movs	r1, r2
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 ff72 	bl	8004a30 <HAL_ADC_ConfigChannel>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8003b50:	f000 fa76 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b004      	add	sp, #16
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	200008b0 	.word	0x200008b0
 8003b60:	40012400 	.word	0x40012400

08003b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	0018      	movs	r0, r3
 8003b70:	2310      	movs	r3, #16
 8003b72:	001a      	movs	r2, r3
 8003b74:	2100      	movs	r1, #0
 8003b76:	f003 faf6 	bl	8007166 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b7a:	003b      	movs	r3, r7
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	2308      	movs	r3, #8
 8003b80:	001a      	movs	r2, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f003 faef 	bl	8007166 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <MX_TIM1_Init+0xac>)
 8003b8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 479;
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003b90:	22e0      	movs	r2, #224	; 0xe0
 8003b92:	32ff      	adds	r2, #255	; 0xff
 8003b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b96:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 14;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003b9e:	220e      	movs	r2, #14
 8003ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f002 fa68 	bl	800608c <HAL_TIM_Base_Init>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8003bc0:	f000 fa3e 	bl	8004040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bc4:	2108      	movs	r1, #8
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	0152      	lsls	r2, r2, #5
 8003bcc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bce:	187a      	adds	r2, r7, r1
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f002 fdc9 	bl	800676c <HAL_TIM_ConfigClockSource>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003bde:	f000 fa2f 	bl	8004040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003be2:	003b      	movs	r3, r7
 8003be4:	2220      	movs	r2, #32
 8003be6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003be8:	003b      	movs	r3, r7
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bee:	003a      	movs	r2, r7
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <MX_TIM1_Init+0xa8>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f003 f9b7 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003bfe:	f000 fa1f 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b006      	add	sp, #24
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	20000824 	.word	0x20000824
 8003c10:	40012c00 	.word	0x40012c00

08003c14 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b090      	sub	sp, #64	; 0x40
 8003c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c1a:	2324      	movs	r3, #36	; 0x24
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	0018      	movs	r0, r3
 8003c20:	231c      	movs	r3, #28
 8003c22:	001a      	movs	r2, r3
 8003c24:	2100      	movs	r1, #0
 8003c26:	f003 fa9e 	bl	8007166 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2320      	movs	r3, #32
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f003 fa97 	bl	8007166 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <MX_TIM16_Init+0x104>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 18;
 8003c3e:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c40:	2212      	movs	r2, #18
 8003c42:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8003c4a:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c4c:	22ff      	movs	r2, #255	; 0xff
 8003c4e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c64:	0018      	movs	r0, r3
 8003c66:	f002 fa11 	bl	800608c <HAL_TIM_Base_Init>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003c6e:	f000 f9e7 	bl	8004040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003c74:	0018      	movs	r0, r3
 8003c76:	f002 fa9f 	bl	80061b8 <HAL_TIM_PWM_Init>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003c7e:	f000 f9df 	bl	8004040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c82:	2124      	movs	r1, #36	; 0x24
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2260      	movs	r2, #96	; 0x60
 8003c88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c96:	187b      	adds	r3, r7, r1
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2200      	movs	r2, #0
 8003cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cae:	1879      	adds	r1, r7, r1
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f002 fc93 	bl	80065e0 <HAL_TIM_PWM_ConfigChannel>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003cbe:	f000 f9bf 	bl	8004040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	0192      	lsls	r2, r2, #6
 8003ce6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003cee:	1d3a      	adds	r2, r7, #4
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f003 f989 	bl	800700c <HAL_TIMEx_ConfigBreakDeadTime>
 8003cfa:	1e03      	subs	r3, r0, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8003cfe:	f000 f99f 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <MX_TIM16_Init+0x100>)
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fa99 	bl	800423c <HAL_TIM_MspPostInit>

}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b010      	add	sp, #64	; 0x40
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	200008f0 	.word	0x200008f0
 8003d18:	40014400 	.word	0x40014400

08003d1c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	; 0x40
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d22:	2324      	movs	r3, #36	; 0x24
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	0018      	movs	r0, r3
 8003d28:	231c      	movs	r3, #28
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f003 fa1a 	bl	8007166 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	0018      	movs	r0, r3
 8003d36:	2320      	movs	r3, #32
 8003d38:	001a      	movs	r2, r3
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f003 fa13 	bl	8007166 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003d40:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <MX_TIM17_Init+0x104>)
 8003d44:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 18;
 8003d46:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d48:	2212      	movs	r2, #18
 8003d4a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4c:	4b33      	ldr	r3, [pc, #204]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d64:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f002 f98d 	bl	800608c <HAL_TIM_Base_Init>
 8003d72:	1e03      	subs	r3, r0, #0
 8003d74:	d001      	beq.n	8003d7a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003d76:	f000 f963 	bl	8004040 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f002 fa1b 	bl	80061b8 <HAL_TIM_PWM_Init>
 8003d82:	1e03      	subs	r3, r0, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003d86:	f000 f95b 	bl	8004040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d8a:	2124      	movs	r1, #36	; 0x24
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2260      	movs	r2, #96	; 0x60
 8003d90:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2200      	movs	r2, #0
 8003d96:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	2200      	movs	r2, #0
 8003da2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2200      	movs	r2, #0
 8003da8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2200      	movs	r2, #0
 8003dae:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2200      	movs	r2, #0
 8003db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003db6:	1879      	adds	r1, r7, r1
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f002 fc0f 	bl	80065e0 <HAL_TIM_PWM_ConfigChannel>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d001      	beq.n	8003dca <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003dc6:	f000 f93b 	bl	8004040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2200      	movs	r2, #0
 8003de0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	0192      	lsls	r2, r2, #6
 8003dee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003df6:	1d3a      	adds	r2, r7, #4
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003dfa:	0011      	movs	r1, r2
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f003 f905 	bl	800700c <HAL_TIMEx_ConfigBreakDeadTime>
 8003e02:	1e03      	subs	r3, r0, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8003e06:	f000 f91b 	bl	8004040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <MX_TIM17_Init+0x100>)
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 fa15 	bl	800423c <HAL_TIM_MspPostInit>

}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b010      	add	sp, #64	; 0x40
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	200007d8 	.word	0x200007d8
 8003e20:	40014800 	.word	0x40014800

08003e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <MX_DMA_Init+0x38>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <MX_DMA_Init+0x38>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	430a      	orrs	r2, r1
 8003e34:	615a      	str	r2, [r3, #20]
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <MX_DMA_Init+0x38>)
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	2009      	movs	r0, #9
 8003e48:	f001 f944 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e4c:	2009      	movs	r0, #9
 8003e4e:	f001 f956 	bl	80050fe <HAL_NVIC_EnableIRQ>

}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b002      	add	sp, #8
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	40021000 	.word	0x40021000

08003e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b08b      	sub	sp, #44	; 0x2c
 8003e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e66:	2414      	movs	r4, #20
 8003e68:	193b      	adds	r3, r7, r4
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	2314      	movs	r3, #20
 8003e6e:	001a      	movs	r2, r3
 8003e70:	2100      	movs	r1, #0
 8003e72:	f003 f978 	bl	8007166 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e76:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	0309      	lsls	r1, r1, #12
 8003e80:	430a      	orrs	r2, r1
 8003e82:	615a      	str	r2, [r3, #20]
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	031b      	lsls	r3, r3, #12
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e92:	4b67      	ldr	r3, [pc, #412]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	4b66      	ldr	r3, [pc, #408]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	03c9      	lsls	r1, r1, #15
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	4b63      	ldr	r3, [pc, #396]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	03db      	lsls	r3, r3, #15
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	4b60      	ldr	r3, [pc, #384]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003eb4:	2180      	movs	r1, #128	; 0x80
 8003eb6:	0289      	lsls	r1, r1, #10
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	615a      	str	r2, [r3, #20]
 8003ebc:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	4b59      	ldr	r3, [pc, #356]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	02c9      	lsls	r1, r1, #11
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	4b55      	ldr	r3, [pc, #340]	; (8004030 <MX_GPIO_Init+0x1d0>)
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	02db      	lsls	r3, r3, #11
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN1_Pin|AIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8003ee6:	23e0      	movs	r3, #224	; 0xe0
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	4852      	ldr	r0, [pc, #328]	; (8004034 <MX_GPIO_Init+0x1d4>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	0019      	movs	r1, r3
 8003ef0:	f001 fc47 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin, GPIO_PIN_RESET);
 8003ef4:	4b50      	ldr	r3, [pc, #320]	; (8004038 <MX_GPIO_Init+0x1d8>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	21c1      	movs	r1, #193	; 0xc1
 8003efa:	0018      	movs	r0, r3
 8003efc:	f001 fc41 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin, GPIO_PIN_RESET);
 8003f00:	4b4e      	ldr	r3, [pc, #312]	; (800403c <MX_GPIO_Init+0x1dc>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	2107      	movs	r1, #7
 8003f06:	0018      	movs	r0, r3
 8003f08:	f001 fc3b 	bl	8005782 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|BIN1_Pin;
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	22e0      	movs	r2, #224	; 0xe0
 8003f10:	0212      	lsls	r2, r2, #8
 8003f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f14:	193b      	adds	r3, r7, r4
 8003f16:	2201      	movs	r2, #1
 8003f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	193b      	adds	r3, r7, r4
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	4a42      	ldr	r2, [pc, #264]	; (8004034 <MX_GPIO_Init+0x1d4>)
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	f001 fa9b 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin L_DEBUG2_Pin L_DEBUG1_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|L_DEBUG2_Pin|L_DEBUG1_Pin;
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	22c1      	movs	r2, #193	; 0xc1
 8003f36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f38:	193b      	adds	r3, r7, r4
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f4a:	193b      	adds	r3, r7, r4
 8003f4c:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <MX_GPIO_Init+0x1d8>)
 8003f4e:	0019      	movs	r1, r3
 8003f50:	0010      	movs	r0, r2
 8003f52:	f001 fa89 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pin : MARC_DIR_Pin */
  GPIO_InitStruct.Pin = MARC_DIR_Pin;
 8003f56:	0021      	movs	r1, r4
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	22c4      	movs	r2, #196	; 0xc4
 8003f62:	0392      	lsls	r2, r2, #14
 8003f64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	000c      	movs	r4, r1
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MARC_DIR_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <MX_GPIO_Init+0x1d8>)
 8003f72:	0019      	movs	r1, r3
 8003f74:	0010      	movs	r0, r2
 8003f76:	f001 fa77 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_FESQ_Pin L_FREN_Pin L_FDIR_Pin */
  GPIO_InitStruct.Pin = L_FESQ_Pin|L_FREN_Pin|L_FDIR_Pin;
 8003f7a:	193b      	adds	r3, r7, r4
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	2201      	movs	r2, #1
 8003f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	193b      	adds	r3, r7, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f92:	193b      	adds	r3, r7, r4
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <MX_GPIO_Init+0x1dc>)
 8003f96:	0019      	movs	r1, r3
 8003f98:	0010      	movs	r0, r2
 8003f9a:	f001 fa65 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pin : MARC_ESQ_Pin */
  GPIO_InitStruct.Pin = MARC_ESQ_Pin;
 8003f9e:	193b      	adds	r3, r7, r4
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	0052      	lsls	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	22c4      	movs	r2, #196	; 0xc4
 8003faa:	0392      	lsls	r2, r2, #14
 8003fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MARC_ESQ_GPIO_Port, &GPIO_InitStruct);
 8003fb4:	193a      	adds	r2, r7, r4
 8003fb6:	2390      	movs	r3, #144	; 0x90
 8003fb8:	05db      	lsls	r3, r3, #23
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f001 fa53 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_Pin ENC2_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|ENC2_Pin;
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	22c0      	movs	r2, #192	; 0xc0
 8003fc6:	0152      	lsls	r2, r2, #5
 8003fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	2288      	movs	r2, #136	; 0x88
 8003fce:	0352      	lsls	r2, r2, #13
 8003fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd8:	193a      	adds	r2, r7, r4
 8003fda:	2390      	movs	r3, #144	; 0x90
 8003fdc:	05db      	lsls	r3, r3, #23
 8003fde:	0011      	movs	r1, r2
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f001 fa41 	bl	8005468 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC1_Pin */
  GPIO_InitStruct.Pin = ENC1_Pin;
 8003fe6:	0021      	movs	r1, r4
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	2288      	movs	r2, #136	; 0x88
 8003ff2:	0352      	lsls	r2, r2, #13
 8003ff4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC1_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <MX_GPIO_Init+0x1dc>)
 8004000:	0019      	movs	r1, r3
 8004002:	0010      	movs	r0, r2
 8004004:	f001 fa30 	bl	8005468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	2005      	movs	r0, #5
 800400e:	f001 f861 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004012:	2005      	movs	r0, #5
 8004014:	f001 f873 	bl	80050fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004018:	2200      	movs	r2, #0
 800401a:	2100      	movs	r1, #0
 800401c:	2007      	movs	r0, #7
 800401e:	f001 f859 	bl	80050d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004022:	2007      	movs	r0, #7
 8004024:	f001 f86b 	bl	80050fe <HAL_NVIC_EnableIRQ>

}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b00b      	add	sp, #44	; 0x2c
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	48000800 	.word	0x48000800
 8004038:	48001400 	.word	0x48001400
 800403c:	48000400 	.word	0x48000400

08004040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004044:	b672      	cpsid	i
}
 8004046:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004048:	e7fe      	b.n	8004048 <Error_Handler+0x8>
	...

0800404c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_MspInit+0x44>)
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_MspInit+0x44>)
 8004058:	2101      	movs	r1, #1
 800405a:	430a      	orrs	r2, r1
 800405c:	619a      	str	r2, [r3, #24]
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_MspInit+0x44>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_MspInit+0x44>)
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_MspInit+0x44>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0549      	lsls	r1, r1, #21
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_MspInit+0x44>)
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	055b      	lsls	r3, r3, #21
 8004080:	4013      	ands	r3, r2
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b08b      	sub	sp, #44	; 0x2c
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	2414      	movs	r4, #20
 800409e:	193b      	adds	r3, r7, r4
 80040a0:	0018      	movs	r0, r3
 80040a2:	2314      	movs	r3, #20
 80040a4:	001a      	movs	r2, r3
 80040a6:	2100      	movs	r1, #0
 80040a8:	f003 f85d 	bl	8007166 <memset>
  if(hadc->Instance==ADC1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a30      	ldr	r2, [pc, #192]	; (8004174 <HAL_ADC_MspInit+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d15a      	bne.n	800416c <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	0089      	lsls	r1, r1, #2
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
 80040c4:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	0289      	lsls	r1, r1, #10
 80040dc:	430a      	orrs	r2, r1
 80040de:	615a      	str	r2, [r3, #20]
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_ADC_MspInit+0xe4>)
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80040ee:	193b      	adds	r3, r7, r4
 80040f0:	227e      	movs	r2, #126	; 0x7e
 80040f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f4:	193b      	adds	r3, r7, r4
 80040f6:	2203      	movs	r2, #3
 80040f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	193b      	adds	r3, r7, r4
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	193a      	adds	r2, r7, r4
 8004102:	2390      	movs	r3, #144	; 0x90
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f001 f9ad 	bl	8005468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_ADC_MspInit+0xec>)
 8004112:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_ADC_MspInit+0xe8>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_ADC_MspInit+0xe8>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004134:	2220      	movs	r2, #32
 8004136:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_ADC_MspInit+0xe8>)
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	0152      	lsls	r2, r2, #5
 800413e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004140:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004142:	0018      	movs	r0, r3
 8004144:	f000 fff8 	bl	8005138 <HAL_DMA_Init>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 800414c:	f7ff ff78 	bl	8004040 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_ADC_MspInit+0xe8>)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800415c:	2200      	movs	r2, #0
 800415e:	2100      	movs	r1, #0
 8004160:	200c      	movs	r0, #12
 8004162:	f000 ffb7 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004166:	200c      	movs	r0, #12
 8004168:	f000 ffc9 	bl	80050fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b00b      	add	sp, #44	; 0x2c
 8004172:	bd90      	pop	{r4, r7, pc}
 8004174:	40012400 	.word	0x40012400
 8004178:	40021000 	.word	0x40021000
 800417c:	2000086c 	.word	0x2000086c
 8004180:	40020008 	.word	0x40020008

08004184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <HAL_TIM_Base_MspInit+0xa8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d11e      	bne.n	80041d4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 800419c:	2180      	movs	r1, #128	; 0x80
 800419e:	0109      	lsls	r1, r1, #4
 80041a0:	430a      	orrs	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
 80041a4:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	4013      	ands	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	200d      	movs	r0, #13
 80041b8:	f000 ff8c 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80041bc:	200d      	movs	r0, #13
 80041be:	f000 ff9e 	bl	80050fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	200e      	movs	r0, #14
 80041c8:	f000 ff84 	bl	80050d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041cc:	200e      	movs	r0, #14
 80041ce:	f000 ff96 	bl	80050fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80041d2:	e026      	b.n	8004222 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a16      	ldr	r2, [pc, #88]	; (8004234 <HAL_TIM_Base_MspInit+0xb0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0289      	lsls	r1, r1, #10
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	029b      	lsls	r3, r3, #10
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
}
 80041fa:	e012      	b.n	8004222 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <HAL_TIM_Base_MspInit+0xb4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	02c9      	lsls	r1, r1, #11
 8004210:	430a      	orrs	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_TIM_Base_MspInit+0xac>)
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	02db      	lsls	r3, r3, #11
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b006      	add	sp, #24
 8004228:	bd80      	pop	{r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40021000 	.word	0x40021000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800

0800423c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b08b      	sub	sp, #44	; 0x2c
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	2414      	movs	r4, #20
 8004246:	193b      	adds	r3, r7, r4
 8004248:	0018      	movs	r0, r3
 800424a:	2314      	movs	r3, #20
 800424c:	001a      	movs	r2, r3
 800424e:	2100      	movs	r1, #0
 8004250:	f002 ff89 	bl	8007166 <memset>
  if(htim->Instance==TIM16)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_TIM_MspPostInit+0xcc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d125      	bne.n	80042aa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	02c9      	lsls	r1, r1, #11
 8004268:	430a      	orrs	r2, r1
 800426a:	615a      	str	r2, [r3, #20]
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	02db      	lsls	r3, r3, #11
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800427a:	193b      	adds	r3, r7, r4
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	0052      	lsls	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	0021      	movs	r1, r4
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2202      	movs	r2, #2
 8004288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004290:	187b      	adds	r3, r7, r1
 8004292:	2200      	movs	r2, #0
 8004294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8004296:	187b      	adds	r3, r7, r1
 8004298:	2202      	movs	r2, #2
 800429a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800429c:	187b      	adds	r3, r7, r1
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_TIM_MspPostInit+0xd4>)
 80042a0:	0019      	movs	r1, r3
 80042a2:	0010      	movs	r0, r2
 80042a4:	f001 f8e0 	bl	8005468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80042a8:	e029      	b.n	80042fe <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM17)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_MspPostInit+0xd8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d124      	bne.n	80042fe <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b4:	4b15      	ldr	r3, [pc, #84]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 80042ba:	2180      	movs	r1, #128	; 0x80
 80042bc:	02c9      	lsls	r1, r1, #11
 80042be:	430a      	orrs	r2, r1
 80042c0:	615a      	str	r2, [r3, #20]
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_TIM_MspPostInit+0xd0>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	02db      	lsls	r3, r3, #11
 80042ca:	4013      	ands	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80042d0:	2114      	movs	r1, #20
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	0092      	lsls	r2, r2, #2
 80042d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	2202      	movs	r2, #2
 80042de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	2200      	movs	r2, #0
 80042ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	2202      	movs	r2, #2
 80042f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	4a06      	ldr	r2, [pc, #24]	; (8004310 <HAL_TIM_MspPostInit+0xd4>)
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f001 f8b5 	bl	8005468 <HAL_GPIO_Init>
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	b00b      	add	sp, #44	; 0x2c
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40014400 	.word	0x40014400
 800430c:	40021000 	.word	0x40021000
 8004310:	48000400 	.word	0x48000400
 8004314:	40014800 	.word	0x40014800

08004318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800431c:	e7fe      	b.n	800431c <NMI_Handler+0x4>

0800431e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004322:	e7fe      	b.n	8004322 <HardFault_Handler+0x4>

08004324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800433c:	f000 f8ca 	bl	80044d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800434a:	2002      	movs	r0, #2
 800434c:	f001 fa36 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800435a:	2080      	movs	r0, #128	; 0x80
 800435c:	f001 fa2e 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	0018      	movs	r0, r3
 8004366:	f001 fa29 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	0018      	movs	r0, r3
 8004370:	f001 fa24 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	015b      	lsls	r3, r3, #5
 8004378:	0018      	movs	r0, r3
 800437a:	f001 fa1f 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <DMA1_Channel1_IRQHandler+0x14>)
 800438a:	0018      	movs	r0, r3
 800438c:	f000 ff82 	bl	8005294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	2000086c 	.word	0x2000086c

0800439c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <ADC1_IRQHandler+0x14>)
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 fa74 	bl	8004890 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	200008b0 	.word	0x200008b0

080043b4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80043ba:	0018      	movs	r0, r3
 80043bc:	f001 fffa 	bl	80063b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	20000824 	.word	0x20000824

080043cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <TIM1_CC_IRQHandler+0x14>)
 80043d2:	0018      	movs	r0, r3
 80043d4:	f001 ffee 	bl	80063b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	20000824 	.word	0x20000824

080043e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043f0:	480d      	ldr	r0, [pc, #52]	; (8004428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043f4:	480d      	ldr	r0, [pc, #52]	; (800442c <LoopForever+0x6>)
  ldr r1, =_edata
 80043f6:	490e      	ldr	r1, [pc, #56]	; (8004430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043f8:	4a0e      	ldr	r2, [pc, #56]	; (8004434 <LoopForever+0xe>)
  movs r3, #0
 80043fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043fc:	e002      	b.n	8004404 <LoopCopyDataInit>

080043fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004402:	3304      	adds	r3, #4

08004404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004408:	d3f9      	bcc.n	80043fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <LoopForever+0x12>)
  ldr r4, =_ebss
 800440c:	4c0b      	ldr	r4, [pc, #44]	; (800443c <LoopForever+0x16>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004410:	e001      	b.n	8004416 <LoopFillZerobss>

08004412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004414:	3204      	adds	r2, #4

08004416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004418:	d3fb      	bcc.n	8004412 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800441a:	f7ff ffe3 	bl	80043e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800441e:	f002 fe6b 	bl	80070f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004422:	f7ff fa81 	bl	8003928 <main>

08004426 <LoopForever>:

LoopForever:
    b LoopForever
 8004426:	e7fe      	b.n	8004426 <LoopForever>
  ldr   r0, =_estack
 8004428:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800442c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004430:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004434:	08007818 	.word	0x08007818
  ldr r2, =_sbss
 8004438:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800443c:	20000948 	.word	0x20000948

08004440 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004440:	e7fe      	b.n	8004440 <DMA1_Channel2_3_IRQHandler>
	...

08004444 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_Init+0x24>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_Init+0x24>)
 800444e:	2110      	movs	r1, #16
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004454:	2003      	movs	r0, #3
 8004456:	f000 f809 	bl	800446c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800445a:	f7ff fdf7 	bl	800404c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	40022000 	.word	0x40022000

0800446c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_InitTick+0x5c>)
 8004476:	681c      	ldr	r4, [r3, #0]
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_InitTick+0x60>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	0019      	movs	r1, r3
 800447e:	23fa      	movs	r3, #250	; 0xfa
 8004480:	0098      	lsls	r0, r3, #2
 8004482:	f7fb fe41 	bl	8000108 <__udivsi3>
 8004486:	0003      	movs	r3, r0
 8004488:	0019      	movs	r1, r3
 800448a:	0020      	movs	r0, r4
 800448c:	f7fb fe3c 	bl	8000108 <__udivsi3>
 8004490:	0003      	movs	r3, r0
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fe43 	bl	800511e <HAL_SYSTICK_Config>
 8004498:	1e03      	subs	r3, r0, #0
 800449a:	d001      	beq.n	80044a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e00f      	b.n	80044c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d80b      	bhi.n	80044be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	2301      	movs	r3, #1
 80044aa:	425b      	negs	r3, r3
 80044ac:	2200      	movs	r2, #0
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 fe10 	bl	80050d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_InitTick+0x64>)
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b003      	add	sp, #12
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	20000000 	.word	0x20000000
 80044cc:	20000008 	.word	0x20000008
 80044d0:	20000004 	.word	0x20000004

080044d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_IncTick+0x1c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	001a      	movs	r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_IncTick+0x20>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	18d2      	adds	r2, r2, r3
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_IncTick+0x20>)
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	20000008 	.word	0x20000008
 80044f4:	20000938 	.word	0x20000938

080044f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  return uwTick;
 80044fc:	4b02      	ldr	r3, [pc, #8]	; (8004508 <HAL_GetTick+0x10>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000938 	.word	0x20000938

0800450c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004514:	230f      	movs	r3, #15
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e125      	b.n	8004776 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2234      	movs	r2, #52	; 0x34
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f7ff fda6 	bl	8004094 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	2210      	movs	r2, #16
 800454e:	4013      	ands	r3, r2
 8004550:	d000      	beq.n	8004554 <HAL_ADC_Init+0x48>
 8004552:	e103      	b.n	800475c <HAL_ADC_Init+0x250>
 8004554:	230f      	movs	r3, #15
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d000      	beq.n	8004560 <HAL_ADC_Init+0x54>
 800455e:	e0fd      	b.n	800475c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2204      	movs	r2, #4
 8004568:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800456a:	d000      	beq.n	800456e <HAL_ADC_Init+0x62>
 800456c:	e0f6      	b.n	800475c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	4a83      	ldr	r2, [pc, #524]	; (8004780 <HAL_ADC_Init+0x274>)
 8004574:	4013      	ands	r3, r2
 8004576:	2202      	movs	r2, #2
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2203      	movs	r2, #3
 8004586:	4013      	ands	r3, r2
 8004588:	2b01      	cmp	r3, #1
 800458a:	d112      	bne.n	80045b2 <HAL_ADC_Init+0xa6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	4013      	ands	r3, r2
 8004596:	2b01      	cmp	r3, #1
 8004598:	d009      	beq.n	80045ae <HAL_ADC_Init+0xa2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	401a      	ands	r2, r3
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_Init+0xa6>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_Init+0xa8>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2218      	movs	r2, #24
 80045c0:	4393      	bics	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	0899      	lsrs	r1, r3, #2
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4964      	ldr	r1, [pc, #400]	; (8004784 <HAL_ADC_Init+0x278>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7e1b      	ldrb	r3, [r3, #24]
 80045fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7e5b      	ldrb	r3, [r3, #25]
 8004600:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004602:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7e9b      	ldrb	r3, [r3, #26]
 8004608:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800460a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2b01      	cmp	r3, #1
 8004612:	d002      	beq.n	800461a <HAL_ADC_Init+0x10e>
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	e000      	b.n	800461c <HAL_ADC_Init+0x110>
 800461a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800461c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004622:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d101      	bne.n	8004630 <HAL_ADC_Init+0x124>
 800462c:	2304      	movs	r3, #4
 800462e:	e000      	b.n	8004632 <HAL_ADC_Init+0x126>
 8004630:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004632:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2124      	movs	r1, #36	; 0x24
 8004638:	5c5b      	ldrb	r3, [r3, r1]
 800463a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800463c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7edb      	ldrb	r3, [r3, #27]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d115      	bne.n	8004678 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	7e9b      	ldrb	r3, [r3, #26]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	0252      	lsls	r2, r2, #9
 800465a:	4313      	orrs	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	e00b      	b.n	8004678 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	2220      	movs	r2, #32
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2201      	movs	r2, #1
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	23c2      	movs	r3, #194	; 0xc2
 800467e:	33ff      	adds	r3, #255	; 0xff
 8004680:	429a      	cmp	r2, r3
 8004682:	d007      	beq.n	8004694 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800468c:	4313      	orrs	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68d9      	ldr	r1, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	055b      	lsls	r3, r3, #21
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d01b      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d017      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d013      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d00f      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d00b      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d007      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d003      	beq.n	80046e8 <HAL_ADC_Init+0x1dc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	2b07      	cmp	r3, #7
 80046e6:	d112      	bne.n	800470e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2107      	movs	r1, #7
 80046f4:	438a      	bics	r2, r1
 80046f6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6959      	ldr	r1, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	2207      	movs	r2, #7
 8004704:	401a      	ands	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <HAL_ADC_Init+0x27c>)
 8004716:	4013      	ands	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	d10b      	bne.n	8004736 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	2203      	movs	r2, #3
 800472a:	4393      	bics	r3, r2
 800472c:	2201      	movs	r2, #1
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004734:	e01c      	b.n	8004770 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	2212      	movs	r2, #18
 800473c:	4393      	bics	r3, r2
 800473e:	2210      	movs	r2, #16
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	2201      	movs	r2, #1
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004752:	230f      	movs	r3, #15
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800475a:	e009      	b.n	8004770 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	2210      	movs	r2, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004768:	230f      	movs	r3, #15
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004770:	230f      	movs	r3, #15
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	781b      	ldrb	r3, [r3, #0]
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	fffffefd 	.word	0xfffffefd
 8004784:	fffe0219 	.word	0xfffe0219
 8004788:	833fffe7 	.word	0x833fffe7

0800478c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004798:	2317      	movs	r3, #23
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2204      	movs	r2, #4
 80047a8:	4013      	ands	r3, r2
 80047aa:	d15e      	bne.n	800486a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2234      	movs	r2, #52	; 0x34
 80047b0:	5c9b      	ldrb	r3, [r3, r2]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Start_DMA+0x2e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e05e      	b.n	8004878 <HAL_ADC_Start_DMA+0xec>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2234      	movs	r2, #52	; 0x34
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	7e5b      	ldrb	r3, [r3, #25]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d007      	beq.n	80047da <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80047ca:	2317      	movs	r3, #23
 80047cc:	18fc      	adds	r4, r7, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fa23 	bl	8004c1c <ADC_Enable>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80047da:	2317      	movs	r3, #23
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d146      	bne.n	8004872 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <HAL_ADC_Start_DMA+0xf4>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	0052      	lsls	r2, r2, #1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2234      	movs	r2, #52	; 0x34
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	4a1e      	ldr	r2, [pc, #120]	; (8004884 <HAL_ADC_Start_DMA+0xf8>)
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_ADC_Start_DMA+0xfc>)
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_ADC_Start_DMA+0x100>)
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	221c      	movs	r2, #28
 8004822:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2110      	movs	r1, #16
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3340      	adds	r3, #64	; 0x40
 800484e:	0019      	movs	r1, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f000 fcb8 	bl	80051c8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2104      	movs	r1, #4
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	e003      	b.n	8004872 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800486a:	2317      	movs	r3, #23
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004872:	2317      	movs	r3, #23
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	781b      	ldrb	r3, [r3, #0]
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b007      	add	sp, #28
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	fffff0fe 	.word	0xfffff0fe
 8004884:	08004d25 	.word	0x08004d25
 8004888:	08004dd9 	.word	0x08004dd9
 800488c:	08004df7 	.word	0x08004df7

08004890 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2204      	movs	r2, #4
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d106      	bne.n	80048b4 <HAL_ADC_IRQHandler+0x24>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00d      	beq.n	80048d0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d14f      	bne.n	8004962 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d148      	bne.n	8004962 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	2210      	movs	r2, #16
 80048d6:	4013      	ands	r3, r2
 80048d8:	d106      	bne.n	80048e8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	23c0      	movs	r3, #192	; 0xc0
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4013      	ands	r3, r2
 80048f4:	d12d      	bne.n	8004952 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d129      	bne.n	8004952 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	4013      	ands	r3, r2
 8004908:	2b08      	cmp	r3, #8
 800490a:	d122      	bne.n	8004952 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d110      	bne.n	800493a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	210c      	movs	r1, #12
 8004924:	438a      	bics	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	4a33      	ldr	r2, [pc, #204]	; (80049fc <HAL_ADC_IRQHandler+0x16c>)
 800492e:	4013      	ands	r3, r2
 8004930:	2201      	movs	r2, #1
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
 8004938:	e00b      	b.n	8004952 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	2220      	movs	r2, #32
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	2201      	movs	r2, #1
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ffc7 	bl	80038e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	220c      	movs	r2, #12
 8004960:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	4013      	ands	r3, r2
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d115      	bne.n	800499c <HAL_ADC_IRQHandler+0x10c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	4013      	ands	r3, r2
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d10e      	bne.n	800499c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	0252      	lsls	r2, r2, #9
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f83e 	bl	8004a10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2280      	movs	r2, #128	; 0x80
 800499a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2210      	movs	r2, #16
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d123      	bne.n	80049f2 <HAL_ADC_IRQHandler+0x162>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2210      	movs	r2, #16
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d11c      	bne.n	80049f2 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d006      	beq.n	80049ce <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d10d      	bne.n	80049ea <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2202      	movs	r2, #2
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 f81b 	bl	8004a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2210      	movs	r2, #16
 80049f0:	601a      	str	r2, [r3, #0]
  }

}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b002      	add	sp, #8
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	fffffefe 	.word	0xfffffefe

08004a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a3a:	230f      	movs	r3, #15
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	055b      	lsls	r3, r3, #21
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d011      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x46>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00d      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x46>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d009      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x46>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d005      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x46>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d001      	beq.n	8004a76 <HAL_ADC_ConfigChannel+0x46>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2234      	movs	r2, #52	; 0x34
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x54>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e0bb      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x1cc>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2234      	movs	r2, #52	; 0x34
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d000      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x6a>
 8004a98:	e09f      	b.n	8004bda <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4a59      	ldr	r2, [pc, #356]	; (8004c04 <HAL_ADC_ConfigChannel+0x1d4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x76>
 8004aa4:	e077      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	055b      	lsls	r3, r3, #21
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d037      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d033      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d02f      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d02b      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d027      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d023      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d01f      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d01b      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2107      	movs	r1, #7
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d012      	beq.n	8004b38 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2107      	movs	r1, #7
 8004b1e:	438a      	bics	r2, r1
 8004b20:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6959      	ldr	r1, [r3, #20]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	401a      	ands	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	d003      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x118>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b11      	cmp	r3, #17
 8004b46:	d152      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004b48:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <HAL_ADC_ConfigChannel+0x1d8>)
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d102      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x12a>
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	e001      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x12e>
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	03db      	lsls	r3, r3, #15
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <HAL_ADC_ConfigChannel+0x1d8>)
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d140      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_ADC_ConfigChannel+0x1dc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4927      	ldr	r1, [pc, #156]	; (8004c10 <HAL_ADC_ConfigChannel+0x1e0>)
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fb fac8 	bl	8000108 <__udivsi3>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	0013      	movs	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	189b      	adds	r3, r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b86:	e002      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f9      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x158>
 8004b94:	e02b      	b.n	8004bee <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4099      	lsls	r1, r3
 8004ba4:	000b      	movs	r3, r1
 8004ba6:	43d9      	mvns	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	400a      	ands	r2, r1
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d003      	beq.n	8004bc0 <HAL_ADC_ConfigChannel+0x190>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b11      	cmp	r3, #17
 8004bbe:	d116      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_ADC_ConfigChannel+0x1d8>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x1a0>
 8004bcc:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <HAL_ADC_ConfigChannel+0x1e4>)
 8004bce:	e000      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x1a2>
 8004bd0:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <HAL_ADC_ConfigChannel+0x1e8>)
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <HAL_ADC_ConfigChannel+0x1d8>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e009      	b.n	8004bee <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	2220      	movs	r2, #32
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004be6:	230f      	movs	r3, #15
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2234      	movs	r2, #52	; 0x34
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b004      	add	sp, #16
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	00001001 	.word	0x00001001
 8004c08:	40012708 	.word	0x40012708
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	000f4240 	.word	0x000f4240
 8004c14:	ff7fffff 	.word	0xff7fffff
 8004c18:	ffbfffff 	.word	0xffbfffff

08004c1c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2203      	movs	r2, #3
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d112      	bne.n	8004c60 <ADC_Enable+0x44>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d009      	beq.n	8004c5c <ADC_Enable+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	401a      	ands	r2, r3
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d101      	bne.n	8004c60 <ADC_Enable+0x44>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <ADC_Enable+0x46>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d152      	bne.n	8004d0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <ADC_Enable+0xfc>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d00d      	beq.n	8004c8e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	2210      	movs	r2, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2201      	movs	r2, #1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <ADC_Enable+0x100>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	491f      	ldr	r1, [pc, #124]	; (8004d20 <ADC_Enable+0x104>)
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7fb fa2f 	bl	8000108 <__udivsi3>
 8004caa:	0003      	movs	r3, r0
 8004cac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cae:	e002      	b.n	8004cb6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f9      	bne.n	8004cb0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cbc:	f7ff fc1c 	bl	80044f8 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004cc4:	e01b      	b.n	8004cfe <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cc6:	f7ff fc17 	bl	80044f8 <HAL_GetTick>
 8004cca:	0002      	movs	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d914      	bls.n	8004cfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d00d      	beq.n	8004cfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e007      	b.n	8004d0e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d1dc      	bne.n	8004cc6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b004      	add	sp, #16
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	80000017 	.word	0x80000017
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	000f4240 	.word	0x000f4240

08004d24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	2250      	movs	r2, #80	; 0x50
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d140      	bne.n	8004dbe <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	2280      	movs	r2, #128	; 0x80
 8004d42:	0092      	lsls	r2, r2, #2
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	23c0      	movs	r3, #192	; 0xc0
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	4013      	ands	r3, r2
 8004d56:	d12d      	bne.n	8004db4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d129      	bne.n	8004db4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2208      	movs	r2, #8
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d122      	bne.n	8004db4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2204      	movs	r2, #4
 8004d76:	4013      	ands	r3, r2
 8004d78:	d110      	bne.n	8004d9c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	210c      	movs	r1, #12
 8004d86:	438a      	bics	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <ADC_DMAConvCplt+0xb0>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	2201      	movs	r2, #1
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
 8004d9a:	e00b      	b.n	8004db4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	2220      	movs	r2, #32
 8004da2:	431a      	orrs	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	2201      	movs	r2, #1
 8004dae:	431a      	orrs	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7fe fd96 	bl	80038e8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004dbc:	e005      	b.n	8004dca <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	0010      	movs	r0, r2
 8004dc8:	4798      	blx	r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	fffffefe 	.word	0xfffffefe

08004dd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff fe09 	bl	8004a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b004      	add	sp, #16
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	2240      	movs	r2, #64	; 0x40
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	2204      	movs	r2, #4
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7ff fdfe 	bl	8004a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e34:	2317      	movs	r3, #23
 8004e36:	18fb      	adds	r3, r7, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2234      	movs	r2, #52	; 0x34
 8004e48:	5c9b      	ldrb	r3, [r3, r2]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_ADCEx_Calibration_Start+0x26>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e08d      	b.n	8004f6e <HAL_ADCEx_Calibration_Start+0x142>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2234      	movs	r2, #52	; 0x34
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2203      	movs	r2, #3
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d112      	bne.n	8004e8e <HAL_ADCEx_Calibration_Start+0x62>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d009      	beq.n	8004e8a <HAL_ADCEx_Calibration_Start+0x5e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	401a      	ands	r2, r3
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d101      	bne.n	8004e8e <HAL_ADCEx_Calibration_Start+0x62>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_ADCEx_Calibration_Start+0x64>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d15b      	bne.n	8004f4c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	4a37      	ldr	r2, [pc, #220]	; (8004f78 <HAL_ADCEx_Calibration_Start+0x14c>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	4013      	ands	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2103      	movs	r1, #3
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	0609      	lsls	r1, r1, #24
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004ed2:	f7ff fb11 	bl	80044f8 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004eda:	e01d      	b.n	8004f18 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004edc:	f7ff fb0c 	bl	80044f8 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d916      	bls.n	8004f18 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	0fdb      	lsrs	r3, r3, #31
 8004ef2:	07da      	lsls	r2, r3, #31
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d10d      	bne.n	8004f18 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	2212      	movs	r2, #18
 8004f02:	4393      	bics	r3, r2
 8004f04:	2210      	movs	r2, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2234      	movs	r2, #52	; 0x34
 8004f10:	2100      	movs	r1, #0
 8004f12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e02a      	b.n	8004f6e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	0fdb      	lsrs	r3, r3, #31
 8004f20:	07da      	lsls	r2, r3, #31
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d0d8      	beq.n	8004edc <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68d9      	ldr	r1, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	2203      	movs	r2, #3
 8004f40:	4393      	bics	r3, r2
 8004f42:	2201      	movs	r2, #1
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4a:	e009      	b.n	8004f60 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	2220      	movs	r2, #32
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004f58:	2317      	movs	r3, #23
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2234      	movs	r2, #52	; 0x34
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004f68:	2317      	movs	r3, #23
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b006      	add	sp, #24
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	fffffefd 	.word	0xfffffefd

08004f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	0002      	movs	r2, r0
 8004f84:	1dfb      	adds	r3, r7, #7
 8004f86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f88:	1dfb      	adds	r3, r7, #7
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8e:	d809      	bhi.n	8004fa4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	001a      	movs	r2, r3
 8004f96:	231f      	movs	r3, #31
 8004f98:	401a      	ands	r2, r3
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <__NVIC_EnableIRQ+0x30>)
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4091      	lsls	r1, r2
 8004fa0:	000a      	movs	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]
  }
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b002      	add	sp, #8
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	e000e100 	.word	0xe000e100

08004fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	1dfb      	adds	r3, r7, #7
 8004fbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004fbe:	1dfb      	adds	r3, r7, #7
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc4:	d828      	bhi.n	8005018 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fc6:	4a2f      	ldr	r2, [pc, #188]	; (8005084 <__NVIC_SetPriority+0xd4>)
 8004fc8:	1dfb      	adds	r3, r7, #7
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	33c0      	adds	r3, #192	; 0xc0
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	589b      	ldr	r3, [r3, r2]
 8004fd6:	1dfa      	adds	r2, r7, #7
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	0011      	movs	r1, r2
 8004fdc:	2203      	movs	r2, #3
 8004fde:	400a      	ands	r2, r1
 8004fe0:	00d2      	lsls	r2, r2, #3
 8004fe2:	21ff      	movs	r1, #255	; 0xff
 8004fe4:	4091      	lsls	r1, r2
 8004fe6:	000a      	movs	r2, r1
 8004fe8:	43d2      	mvns	r2, r2
 8004fea:	401a      	ands	r2, r3
 8004fec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	401a      	ands	r2, r3
 8004ff6:	1dfb      	adds	r3, r7, #7
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	4003      	ands	r3, r0
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005004:	481f      	ldr	r0, [pc, #124]	; (8005084 <__NVIC_SetPriority+0xd4>)
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b25b      	sxtb	r3, r3
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	430a      	orrs	r2, r1
 8005010:	33c0      	adds	r3, #192	; 0xc0
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005016:	e031      	b.n	800507c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005018:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <__NVIC_SetPriority+0xd8>)
 800501a:	1dfb      	adds	r3, r7, #7
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	0019      	movs	r1, r3
 8005020:	230f      	movs	r3, #15
 8005022:	400b      	ands	r3, r1
 8005024:	3b08      	subs	r3, #8
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	3306      	adds	r3, #6
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	3304      	adds	r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1dfa      	adds	r2, r7, #7
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	0011      	movs	r1, r2
 8005038:	2203      	movs	r2, #3
 800503a:	400a      	ands	r2, r1
 800503c:	00d2      	lsls	r2, r2, #3
 800503e:	21ff      	movs	r1, #255	; 0xff
 8005040:	4091      	lsls	r1, r2
 8005042:	000a      	movs	r2, r1
 8005044:	43d2      	mvns	r2, r2
 8005046:	401a      	ands	r2, r3
 8005048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	019b      	lsls	r3, r3, #6
 800504e:	22ff      	movs	r2, #255	; 0xff
 8005050:	401a      	ands	r2, r3
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	0018      	movs	r0, r3
 8005058:	2303      	movs	r3, #3
 800505a:	4003      	ands	r3, r0
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <__NVIC_SetPriority+0xd8>)
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	001c      	movs	r4, r3
 8005068:	230f      	movs	r3, #15
 800506a:	4023      	ands	r3, r4
 800506c:	3b08      	subs	r3, #8
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	430a      	orrs	r2, r1
 8005072:	3306      	adds	r3, #6
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	18c3      	adds	r3, r0, r3
 8005078:	3304      	adds	r3, #4
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b003      	add	sp, #12
 8005082:	bd90      	pop	{r4, r7, pc}
 8005084:	e000e100 	.word	0xe000e100
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1e5a      	subs	r2, r3, #1
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	045b      	lsls	r3, r3, #17
 800509c:	429a      	cmp	r2, r3
 800509e:	d301      	bcc.n	80050a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050a0:	2301      	movs	r3, #1
 80050a2:	e010      	b.n	80050c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050a4:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <SysTick_Config+0x44>)
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	3a01      	subs	r2, #1
 80050aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ac:	2301      	movs	r3, #1
 80050ae:	425b      	negs	r3, r3
 80050b0:	2103      	movs	r1, #3
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7ff ff7c 	bl	8004fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <SysTick_Config+0x44>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <SysTick_Config+0x44>)
 80050c0:	2207      	movs	r2, #7
 80050c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b002      	add	sp, #8
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	e000e010 	.word	0xe000e010

080050d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	210f      	movs	r1, #15
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	1c02      	adds	r2, r0, #0
 80050e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	0011      	movs	r1, r2
 80050f0:	0018      	movs	r0, r3
 80050f2:	f7ff ff5d 	bl	8004fb0 <__NVIC_SetPriority>
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	0002      	movs	r2, r0
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510a:	1dfb      	adds	r3, r7, #7
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b25b      	sxtb	r3, r3
 8005110:	0018      	movs	r0, r3
 8005112:	f7ff ff33 	bl	8004f7c <__NVIC_EnableIRQ>
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b002      	add	sp, #8
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff ffaf 	bl	800508c <SysTick_Config>
 800512e:	0003      	movs	r3, r0
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b002      	add	sp, #8
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e036      	b.n	80051bc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2221      	movs	r2, #33	; 0x21
 8005152:	2102      	movs	r1, #2
 8005154:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <HAL_DMA_Init+0x8c>)
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800516e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f946 	bl	8005430 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2221      	movs	r2, #33	; 0x21
 80051ae:	2101      	movs	r1, #1
 80051b0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	2100      	movs	r1, #0
 80051b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}  
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b004      	add	sp, #16
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	ffffc00f 	.word	0xffffc00f

080051c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2317      	movs	r3, #23
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	5c9b      	ldrb	r3, [r3, r2]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_DMA_Start_IT+0x24>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e04f      	b.n	800528c <HAL_DMA_Start_IT+0xc4>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2221      	movs	r2, #33	; 0x21
 80051f8:	5c9b      	ldrb	r3, [r3, r2]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d13a      	bne.n	8005276 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2221      	movs	r2, #33	; 0x21
 8005204:	2102      	movs	r1, #2
 8005206:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	438a      	bics	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f8d7 	bl	80053d8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	210e      	movs	r1, #14
 800523e:	430a      	orrs	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e00f      	b.n	8005264 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	210a      	movs	r1, #10
 8005250:	430a      	orrs	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2104      	movs	r1, #4
 8005260:	438a      	bics	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2101      	movs	r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e007      	b.n	8005286 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	2100      	movs	r1, #0
 800527c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800527e:	2317      	movs	r3, #23
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	2202      	movs	r2, #2
 8005284:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005286:	2317      	movs	r3, #23
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
} 
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2204      	movs	r2, #4
 80052b2:	409a      	lsls	r2, r3
 80052b4:	0013      	movs	r3, r2
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4013      	ands	r3, r2
 80052ba:	d024      	beq.n	8005306 <HAL_DMA_IRQHandler+0x72>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2204      	movs	r2, #4
 80052c0:	4013      	ands	r3, r2
 80052c2:	d020      	beq.n	8005306 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2220      	movs	r2, #32
 80052cc:	4013      	ands	r3, r2
 80052ce:	d107      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2104      	movs	r1, #4
 80052dc:	438a      	bics	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	2104      	movs	r1, #4
 80052ea:	4091      	lsls	r1, r2
 80052ec:	000a      	movs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d100      	bne.n	80052fa <HAL_DMA_IRQHandler+0x66>
 80052f8:	e06a      	b.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	0010      	movs	r0, r2
 8005302:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005304:	e064      	b.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2202      	movs	r2, #2
 800530c:	409a      	lsls	r2, r3
 800530e:	0013      	movs	r3, r2
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4013      	ands	r3, r2
 8005314:	d02b      	beq.n	800536e <HAL_DMA_IRQHandler+0xda>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2220      	movs	r2, #32
 8005326:	4013      	ands	r3, r2
 8005328:	d10b      	bne.n	8005342 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	210a      	movs	r1, #10
 8005336:	438a      	bics	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2221      	movs	r2, #33	; 0x21
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2102      	movs	r1, #2
 800534c:	4091      	lsls	r1, r2
 800534e:	000a      	movs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d036      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	0010      	movs	r0, r2
 800536a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800536c:	e030      	b.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2208      	movs	r2, #8
 8005374:	409a      	lsls	r2, r3
 8005376:	0013      	movs	r3, r2
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	d028      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2208      	movs	r2, #8
 8005382:	4013      	ands	r3, r2
 8005384:	d024      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	210e      	movs	r1, #14
 8005392:	438a      	bics	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539e:	2101      	movs	r1, #1
 80053a0:	4091      	lsls	r1, r2
 80053a2:	000a      	movs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2221      	movs	r2, #33	; 0x21
 80053b0:	2101      	movs	r1, #1
 80053b2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	2100      	movs	r1, #0
 80053ba:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	0010      	movs	r0, r2
 80053cc:	4798      	blx	r3
    }
   }
}  
 80053ce:	e7ff      	b.n	80053d0 <HAL_DMA_IRQHandler+0x13c>
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b004      	add	sp, #16
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	2101      	movs	r1, #1
 80053f0:	4091      	lsls	r1, r2
 80053f2:	000a      	movs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d108      	bne.n	8005418 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005416:	e007      	b.n	8005428 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}

08005430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a08      	ldr	r2, [pc, #32]	; (8005460 <DMA_CalcBaseAndBitshift+0x30>)
 800543e:	4694      	mov	ip, r2
 8005440:	4463      	add	r3, ip
 8005442:	2114      	movs	r1, #20
 8005444:	0018      	movs	r0, r3
 8005446:	f7fa fe5f 	bl	8000108 <__udivsi3>
 800544a:	0003      	movs	r3, r0
 800544c:	009a      	lsls	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a03      	ldr	r2, [pc, #12]	; (8005464 <DMA_CalcBaseAndBitshift+0x34>)
 8005456:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}
 8005460:	bffdfff8 	.word	0xbffdfff8
 8005464:	40020000 	.word	0x40020000

08005468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005476:	e14f      	b.n	8005718 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2101      	movs	r1, #1
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4091      	lsls	r1, r2
 8005482:	000a      	movs	r2, r1
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d100      	bne.n	8005490 <HAL_GPIO_Init+0x28>
 800548e:	e140      	b.n	8005712 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2203      	movs	r2, #3
 8005496:	4013      	ands	r3, r2
 8005498:	2b01      	cmp	r3, #1
 800549a:	d005      	beq.n	80054a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2203      	movs	r2, #3
 80054a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d130      	bne.n	800550a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	2203      	movs	r2, #3
 80054b4:	409a      	lsls	r2, r3
 80054b6:	0013      	movs	r3, r2
 80054b8:	43da      	mvns	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	0013      	movs	r3, r2
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054de:	2201      	movs	r2, #1
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	409a      	lsls	r2, r3
 80054e4:	0013      	movs	r3, r2
 80054e6:	43da      	mvns	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	2201      	movs	r2, #1
 80054f6:	401a      	ands	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	409a      	lsls	r2, r3
 80054fc:	0013      	movs	r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2203      	movs	r2, #3
 8005510:	4013      	ands	r3, r2
 8005512:	2b03      	cmp	r3, #3
 8005514:	d017      	beq.n	8005546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	2203      	movs	r2, #3
 8005522:	409a      	lsls	r2, r3
 8005524:	0013      	movs	r3, r2
 8005526:	43da      	mvns	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4013      	ands	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	409a      	lsls	r2, r3
 8005538:	0013      	movs	r3, r2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2203      	movs	r2, #3
 800554c:	4013      	ands	r3, r2
 800554e:	2b02      	cmp	r3, #2
 8005550:	d123      	bne.n	800559a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	08da      	lsrs	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3208      	adds	r2, #8
 800555a:	0092      	lsls	r2, r2, #2
 800555c:	58d3      	ldr	r3, [r2, r3]
 800555e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2207      	movs	r2, #7
 8005564:	4013      	ands	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	220f      	movs	r2, #15
 800556a:	409a      	lsls	r2, r3
 800556c:	0013      	movs	r3, r2
 800556e:	43da      	mvns	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2107      	movs	r1, #7
 800557e:	400b      	ands	r3, r1
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	409a      	lsls	r2, r3
 8005584:	0013      	movs	r3, r2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	08da      	lsrs	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3208      	adds	r2, #8
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	6939      	ldr	r1, [r7, #16]
 8005598:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	2203      	movs	r2, #3
 80055a6:	409a      	lsls	r2, r3
 80055a8:	0013      	movs	r3, r2
 80055aa:	43da      	mvns	r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4013      	ands	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2203      	movs	r2, #3
 80055b8:	401a      	ands	r2, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	0013      	movs	r3, r2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	23c0      	movs	r3, #192	; 0xc0
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	4013      	ands	r3, r2
 80055d8:	d100      	bne.n	80055dc <HAL_GPIO_Init+0x174>
 80055da:	e09a      	b.n	8005712 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055dc:	4b54      	ldr	r3, [pc, #336]	; (8005730 <HAL_GPIO_Init+0x2c8>)
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	4b53      	ldr	r3, [pc, #332]	; (8005730 <HAL_GPIO_Init+0x2c8>)
 80055e2:	2101      	movs	r1, #1
 80055e4:	430a      	orrs	r2, r1
 80055e6:	619a      	str	r2, [r3, #24]
 80055e8:	4b51      	ldr	r3, [pc, #324]	; (8005730 <HAL_GPIO_Init+0x2c8>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2201      	movs	r2, #1
 80055ee:	4013      	ands	r3, r2
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055f4:	4a4f      	ldr	r2, [pc, #316]	; (8005734 <HAL_GPIO_Init+0x2cc>)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	089b      	lsrs	r3, r3, #2
 80055fa:	3302      	adds	r3, #2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	589b      	ldr	r3, [r3, r2]
 8005600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2203      	movs	r2, #3
 8005606:	4013      	ands	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	220f      	movs	r2, #15
 800560c:	409a      	lsls	r2, r3
 800560e:	0013      	movs	r3, r2
 8005610:	43da      	mvns	r2, r3
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	2390      	movs	r3, #144	; 0x90
 800561c:	05db      	lsls	r3, r3, #23
 800561e:	429a      	cmp	r2, r3
 8005620:	d013      	beq.n	800564a <HAL_GPIO_Init+0x1e2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a44      	ldr	r2, [pc, #272]	; (8005738 <HAL_GPIO_Init+0x2d0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00d      	beq.n	8005646 <HAL_GPIO_Init+0x1de>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a43      	ldr	r2, [pc, #268]	; (800573c <HAL_GPIO_Init+0x2d4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d007      	beq.n	8005642 <HAL_GPIO_Init+0x1da>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a42      	ldr	r2, [pc, #264]	; (8005740 <HAL_GPIO_Init+0x2d8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <HAL_GPIO_Init+0x1d6>
 800563a:	2303      	movs	r3, #3
 800563c:	e006      	b.n	800564c <HAL_GPIO_Init+0x1e4>
 800563e:	2305      	movs	r3, #5
 8005640:	e004      	b.n	800564c <HAL_GPIO_Init+0x1e4>
 8005642:	2302      	movs	r3, #2
 8005644:	e002      	b.n	800564c <HAL_GPIO_Init+0x1e4>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_GPIO_Init+0x1e4>
 800564a:	2300      	movs	r3, #0
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	2103      	movs	r1, #3
 8005650:	400a      	ands	r2, r1
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	4093      	lsls	r3, r2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800565c:	4935      	ldr	r1, [pc, #212]	; (8005734 <HAL_GPIO_Init+0x2cc>)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	3302      	adds	r3, #2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800566a:	4b36      	ldr	r3, [pc, #216]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	43da      	mvns	r2, r3
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	025b      	lsls	r3, r3, #9
 8005682:	4013      	ands	r3, r2
 8005684:	d003      	beq.n	800568e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800568e:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	43da      	mvns	r2, r3
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4013      	ands	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	029b      	lsls	r3, r3, #10
 80056ac:	4013      	ands	r3, r2
 80056ae:	d003      	beq.n	80056b8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80056b8:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056be:	4b21      	ldr	r3, [pc, #132]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	43da      	mvns	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	035b      	lsls	r3, r3, #13
 80056d6:	4013      	ands	r3, r2
 80056d8:	d003      	beq.n	80056e2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	43da      	mvns	r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4013      	ands	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	039b      	lsls	r3, r3, #14
 8005700:	4013      	ands	r3, r2
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <HAL_GPIO_Init+0x2dc>)
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	3301      	adds	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	40da      	lsrs	r2, r3
 8005720:	1e13      	subs	r3, r2, #0
 8005722:	d000      	beq.n	8005726 <HAL_GPIO_Init+0x2be>
 8005724:	e6a8      	b.n	8005478 <HAL_GPIO_Init+0x10>
  } 
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	46c0      	nop			; (mov r8, r8)
 800572a:	46bd      	mov	sp, r7
 800572c:	b006      	add	sp, #24
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	40010000 	.word	0x40010000
 8005738:	48000400 	.word	0x48000400
 800573c:	48000800 	.word	0x48000800
 8005740:	48000c00 	.word	0x48000c00
 8005744:	40010400 	.word	0x40010400

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	000a      	movs	r2, r1
 8005752:	1cbb      	adds	r3, r7, #2
 8005754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	1cba      	adds	r2, r7, #2
 800575c:	8812      	ldrh	r2, [r2, #0]
 800575e:	4013      	ands	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005762:	230f      	movs	r3, #15
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e003      	b.n	8005774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005774:	230f      	movs	r3, #15
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	781b      	ldrb	r3, [r3, #0]
  }
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	0008      	movs	r0, r1
 800578c:	0011      	movs	r1, r2
 800578e:	1cbb      	adds	r3, r7, #2
 8005790:	1c02      	adds	r2, r0, #0
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	1c7b      	adds	r3, r7, #1
 8005796:	1c0a      	adds	r2, r1, #0
 8005798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800579a:	1c7b      	adds	r3, r7, #1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d004      	beq.n	80057ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057a2:	1cbb      	adds	r3, r7, #2
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057aa:	e003      	b.n	80057b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057ac:	1cbb      	adds	r3, r7, #2
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	0002      	movs	r2, r0
 80057c4:	1dbb      	adds	r3, r7, #6
 80057c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	1dba      	adds	r2, r7, #6
 80057ce:	8812      	ldrh	r2, [r2, #0]
 80057d0:	4013      	ands	r3, r2
 80057d2:	d008      	beq.n	80057e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80057d6:	1dba      	adds	r2, r7, #6
 80057d8:	8812      	ldrh	r2, [r2, #0]
 80057da:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057dc:	1dbb      	adds	r3, r7, #6
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7fc fdc3 	bl	800236c <HAL_GPIO_EXTI_Callback>
  }
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b002      	add	sp, #8
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e301      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	4013      	ands	r3, r2
 800580e:	d100      	bne.n	8005812 <HAL_RCC_OscConfig+0x1e>
 8005810:	e08d      	b.n	800592e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005812:	4bc3      	ldr	r3, [pc, #780]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	220c      	movs	r2, #12
 8005818:	4013      	ands	r3, r2
 800581a:	2b04      	cmp	r3, #4
 800581c:	d00e      	beq.n	800583c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800581e:	4bc0      	ldr	r3, [pc, #768]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	220c      	movs	r2, #12
 8005824:	4013      	ands	r3, r2
 8005826:	2b08      	cmp	r3, #8
 8005828:	d116      	bne.n	8005858 <HAL_RCC_OscConfig+0x64>
 800582a:	4bbd      	ldr	r3, [pc, #756]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	025b      	lsls	r3, r3, #9
 8005832:	401a      	ands	r2, r3
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	025b      	lsls	r3, r3, #9
 8005838:	429a      	cmp	r2, r3
 800583a:	d10d      	bne.n	8005858 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583c:	4bb8      	ldr	r3, [pc, #736]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	4013      	ands	r3, r2
 8005846:	d100      	bne.n	800584a <HAL_RCC_OscConfig+0x56>
 8005848:	e070      	b.n	800592c <HAL_RCC_OscConfig+0x138>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d000      	beq.n	8005854 <HAL_RCC_OscConfig+0x60>
 8005852:	e06b      	b.n	800592c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e2d8      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x7c>
 8005860:	4baf      	ldr	r3, [pc, #700]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4bae      	ldr	r3, [pc, #696]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005866:	2180      	movs	r1, #128	; 0x80
 8005868:	0249      	lsls	r1, r1, #9
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e02f      	b.n	80058d0 <HAL_RCC_OscConfig+0xdc>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x9e>
 8005878:	4ba9      	ldr	r3, [pc, #676]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4ba8      	ldr	r3, [pc, #672]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800587e:	49a9      	ldr	r1, [pc, #676]	; (8005b24 <HAL_RCC_OscConfig+0x330>)
 8005880:	400a      	ands	r2, r1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	4ba6      	ldr	r3, [pc, #664]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4ba5      	ldr	r3, [pc, #660]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800588a:	49a7      	ldr	r1, [pc, #668]	; (8005b28 <HAL_RCC_OscConfig+0x334>)
 800588c:	400a      	ands	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e01e      	b.n	80058d0 <HAL_RCC_OscConfig+0xdc>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d10e      	bne.n	80058b8 <HAL_RCC_OscConfig+0xc4>
 800589a:	4ba1      	ldr	r3, [pc, #644]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4ba0      	ldr	r3, [pc, #640]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	02c9      	lsls	r1, r1, #11
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	4b9d      	ldr	r3, [pc, #628]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b9c      	ldr	r3, [pc, #624]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	0249      	lsls	r1, r1, #9
 80058b2:	430a      	orrs	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e00b      	b.n	80058d0 <HAL_RCC_OscConfig+0xdc>
 80058b8:	4b99      	ldr	r3, [pc, #612]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b98      	ldr	r3, [pc, #608]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058be:	4999      	ldr	r1, [pc, #612]	; (8005b24 <HAL_RCC_OscConfig+0x330>)
 80058c0:	400a      	ands	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	4b96      	ldr	r3, [pc, #600]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b95      	ldr	r3, [pc, #596]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058ca:	4997      	ldr	r1, [pc, #604]	; (8005b28 <HAL_RCC_OscConfig+0x334>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d014      	beq.n	8005902 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fe fe0e 	bl	80044f8 <HAL_GetTick>
 80058dc:	0003      	movs	r3, r0
 80058de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e2:	f7fe fe09 	bl	80044f8 <HAL_GetTick>
 80058e6:	0002      	movs	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	; 0x64
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e28a      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f4:	4b8a      	ldr	r3, [pc, #552]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	4013      	ands	r3, r2
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0xee>
 8005900:	e015      	b.n	800592e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7fe fdf9 	bl	80044f8 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590c:	f7fe fdf4 	bl	80044f8 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b64      	cmp	r3, #100	; 0x64
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e275      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	4b80      	ldr	r3, [pc, #512]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	4013      	ands	r3, r2
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x118>
 800592a:	e000      	b.n	800592e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2202      	movs	r2, #2
 8005934:	4013      	ands	r3, r2
 8005936:	d100      	bne.n	800593a <HAL_RCC_OscConfig+0x146>
 8005938:	e069      	b.n	8005a0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800593a:	4b79      	ldr	r3, [pc, #484]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	220c      	movs	r2, #12
 8005940:	4013      	ands	r3, r2
 8005942:	d00b      	beq.n	800595c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005944:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	220c      	movs	r2, #12
 800594a:	4013      	ands	r3, r2
 800594c:	2b08      	cmp	r3, #8
 800594e:	d11c      	bne.n	800598a <HAL_RCC_OscConfig+0x196>
 8005950:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	2380      	movs	r3, #128	; 0x80
 8005956:	025b      	lsls	r3, r3, #9
 8005958:	4013      	ands	r3, r2
 800595a:	d116      	bne.n	800598a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800595c:	4b70      	ldr	r3, [pc, #448]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2202      	movs	r2, #2
 8005962:	4013      	ands	r3, r2
 8005964:	d005      	beq.n	8005972 <HAL_RCC_OscConfig+0x17e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e24b      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005972:	4b6b      	ldr	r3, [pc, #428]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	22f8      	movs	r2, #248	; 0xf8
 8005978:	4393      	bics	r3, r2
 800597a:	0019      	movs	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	00da      	lsls	r2, r3, #3
 8005982:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005988:	e041      	b.n	8005a0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d024      	beq.n	80059dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005992:	4b63      	ldr	r3, [pc, #396]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b62      	ldr	r3, [pc, #392]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005998:	2101      	movs	r1, #1
 800599a:	430a      	orrs	r2, r1
 800599c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7fe fdab 	bl	80044f8 <HAL_GetTick>
 80059a2:	0003      	movs	r3, r0
 80059a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fe fda6 	bl	80044f8 <HAL_GetTick>
 80059ac:	0002      	movs	r2, r0
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e227      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2202      	movs	r2, #2
 80059c0:	4013      	ands	r3, r2
 80059c2:	d0f1      	beq.n	80059a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c4:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	22f8      	movs	r2, #248	; 0xf8
 80059ca:	4393      	bics	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	00da      	lsls	r2, r3, #3
 80059d4:	4b52      	ldr	r3, [pc, #328]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	e018      	b.n	8005a0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059dc:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b4f      	ldr	r3, [pc, #316]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 80059e2:	2101      	movs	r1, #1
 80059e4:	438a      	bics	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fe fd86 	bl	80044f8 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fe fd81 	bl	80044f8 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e202      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a04:	4b46      	ldr	r3, [pc, #280]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d1f1      	bne.n	80059f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2208      	movs	r2, #8
 8005a14:	4013      	ands	r3, r2
 8005a16:	d036      	beq.n	8005a86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a20:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a24:	4b3e      	ldr	r3, [pc, #248]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a26:	2101      	movs	r1, #1
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2c:	f7fe fd64 	bl	80044f8 <HAL_GetTick>
 8005a30:	0003      	movs	r3, r0
 8005a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a36:	f7fe fd5f 	bl	80044f8 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e1e0      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d0f1      	beq.n	8005a36 <HAL_RCC_OscConfig+0x242>
 8005a52:	e018      	b.n	8005a86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	438a      	bics	r2, r1
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a60:	f7fe fd4a 	bl	80044f8 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6a:	f7fe fd45 	bl	80044f8 <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1c6      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7c:	4b28      	ldr	r3, [pc, #160]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	2202      	movs	r2, #2
 8005a82:	4013      	ands	r3, r2
 8005a84:	d1f1      	bne.n	8005a6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d100      	bne.n	8005a92 <HAL_RCC_OscConfig+0x29e>
 8005a90:	e0b4      	b.n	8005bfc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a92:	201f      	movs	r0, #31
 8005a94:	183b      	adds	r3, r7, r0
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9a:	4b21      	ldr	r3, [pc, #132]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	055b      	lsls	r3, r3, #21
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d110      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	0549      	lsls	r1, r1, #21
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	61da      	str	r2, [r3, #28]
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	055b      	lsls	r3, r3, #21
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ac2:	183b      	adds	r3, r7, r0
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_RCC_OscConfig+0x338>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d11a      	bne.n	8005b0a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <HAL_RCC_OscConfig+0x338>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_RCC_OscConfig+0x338>)
 8005ada:	2180      	movs	r1, #128	; 0x80
 8005adc:	0049      	lsls	r1, r1, #1
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae2:	f7fe fd09 	bl	80044f8 <HAL_GetTick>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aec:	f7fe fd04 	bl	80044f8 <HAL_GetTick>
 8005af0:	0002      	movs	r2, r0
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e185      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_OscConfig+0x338>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4013      	ands	r3, r2
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10e      	bne.n	8005b30 <HAL_RCC_OscConfig+0x33c>
 8005b12:	4b03      	ldr	r3, [pc, #12]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005b14:	6a1a      	ldr	r2, [r3, #32]
 8005b16:	4b02      	ldr	r3, [pc, #8]	; (8005b20 <HAL_RCC_OscConfig+0x32c>)
 8005b18:	2101      	movs	r1, #1
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	621a      	str	r2, [r3, #32]
 8005b1e:	e035      	b.n	8005b8c <HAL_RCC_OscConfig+0x398>
 8005b20:	40021000 	.word	0x40021000
 8005b24:	fffeffff 	.word	0xfffeffff
 8005b28:	fffbffff 	.word	0xfffbffff
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10c      	bne.n	8005b52 <HAL_RCC_OscConfig+0x35e>
 8005b38:	4bb6      	ldr	r3, [pc, #728]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	4bb5      	ldr	r3, [pc, #724]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b3e:	2101      	movs	r1, #1
 8005b40:	438a      	bics	r2, r1
 8005b42:	621a      	str	r2, [r3, #32]
 8005b44:	4bb3      	ldr	r3, [pc, #716]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	4bb2      	ldr	r3, [pc, #712]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	621a      	str	r2, [r3, #32]
 8005b50:	e01c      	b.n	8005b8c <HAL_RCC_OscConfig+0x398>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCC_OscConfig+0x380>
 8005b5a:	4bae      	ldr	r3, [pc, #696]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	4bad      	ldr	r3, [pc, #692]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b60:	2104      	movs	r1, #4
 8005b62:	430a      	orrs	r2, r1
 8005b64:	621a      	str	r2, [r3, #32]
 8005b66:	4bab      	ldr	r3, [pc, #684]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	4baa      	ldr	r3, [pc, #680]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	621a      	str	r2, [r3, #32]
 8005b72:	e00b      	b.n	8005b8c <HAL_RCC_OscConfig+0x398>
 8005b74:	4ba7      	ldr	r3, [pc, #668]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	4ba6      	ldr	r3, [pc, #664]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	621a      	str	r2, [r3, #32]
 8005b80:	4ba4      	ldr	r3, [pc, #656]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	4ba3      	ldr	r3, [pc, #652]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005b86:	2104      	movs	r1, #4
 8005b88:	438a      	bics	r2, r1
 8005b8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d014      	beq.n	8005bbe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b94:	f7fe fcb0 	bl	80044f8 <HAL_GetTick>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9c:	e009      	b.n	8005bb2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9e:	f7fe fcab 	bl	80044f8 <HAL_GetTick>
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	4a9b      	ldr	r2, [pc, #620]	; (8005e18 <HAL_RCC_OscConfig+0x624>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e12b      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb2:	4b98      	ldr	r3, [pc, #608]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x3aa>
 8005bbc:	e013      	b.n	8005be6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fe fc9b 	bl	80044f8 <HAL_GetTick>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc6:	e009      	b.n	8005bdc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bc8:	f7fe fc96 	bl	80044f8 <HAL_GetTick>
 8005bcc:	0002      	movs	r2, r0
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	4a91      	ldr	r2, [pc, #580]	; (8005e18 <HAL_RCC_OscConfig+0x624>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e116      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bdc:	4b8d      	ldr	r3, [pc, #564]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	2202      	movs	r2, #2
 8005be2:	4013      	ands	r3, r2
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005be6:	231f      	movs	r3, #31
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d105      	bne.n	8005bfc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf0:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	4b87      	ldr	r3, [pc, #540]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005bf6:	4989      	ldr	r1, [pc, #548]	; (8005e1c <HAL_RCC_OscConfig+0x628>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2210      	movs	r2, #16
 8005c02:	4013      	ands	r3, r2
 8005c04:	d063      	beq.n	8005cce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d12a      	bne.n	8005c64 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c0e:	4b81      	ldr	r3, [pc, #516]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c12:	4b80      	ldr	r3, [pc, #512]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c14:	2104      	movs	r1, #4
 8005c16:	430a      	orrs	r2, r1
 8005c18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005c1a:	4b7e      	ldr	r3, [pc, #504]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1e:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c20:	2101      	movs	r1, #1
 8005c22:	430a      	orrs	r2, r1
 8005c24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c26:	f7fe fc67 	bl	80044f8 <HAL_GetTick>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005c30:	f7fe fc62 	bl	80044f8 <HAL_GetTick>
 8005c34:	0002      	movs	r2, r0
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0e3      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005c42:	4b74      	ldr	r3, [pc, #464]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	2202      	movs	r2, #2
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	22f8      	movs	r2, #248	; 0xf8
 8005c52:	4393      	bics	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	00da      	lsls	r2, r3, #3
 8005c5c:	4b6d      	ldr	r3, [pc, #436]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	635a      	str	r2, [r3, #52]	; 0x34
 8005c62:	e034      	b.n	8005cce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	3305      	adds	r3, #5
 8005c6a:	d111      	bne.n	8005c90 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005c6c:	4b69      	ldr	r3, [pc, #420]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c70:	4b68      	ldr	r3, [pc, #416]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c72:	2104      	movs	r1, #4
 8005c74:	438a      	bics	r2, r1
 8005c76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005c78:	4b66      	ldr	r3, [pc, #408]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	22f8      	movs	r2, #248	; 0xf8
 8005c7e:	4393      	bics	r3, r2
 8005c80:	0019      	movs	r1, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	00da      	lsls	r2, r3, #3
 8005c88:	4b62      	ldr	r3, [pc, #392]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8005c8e:	e01e      	b.n	8005cce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005c90:	4b60      	ldr	r3, [pc, #384]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c94:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c96:	2104      	movs	r1, #4
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005c9c:	4b5d      	ldr	r3, [pc, #372]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca0:	4b5c      	ldr	r3, [pc, #368]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca8:	f7fe fc26 	bl	80044f8 <HAL_GetTick>
 8005cac:	0003      	movs	r3, r0
 8005cae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005cb2:	f7fe fc21 	bl	80044f8 <HAL_GetTick>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e0a2      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005cc4:	4b53      	ldr	r3, [pc, #332]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	2202      	movs	r2, #2
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d1f1      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d100      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x4e4>
 8005cd6:	e097      	b.n	8005e08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cd8:	4b4e      	ldr	r3, [pc, #312]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	220c      	movs	r2, #12
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d100      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x4f2>
 8005ce4:	e06b      	b.n	8005dbe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d14c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005cf4:	494a      	ldr	r1, [pc, #296]	; (8005e20 <HAL_RCC_OscConfig+0x62c>)
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7fe fbfd 	bl	80044f8 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fe fbf8 	bl	80044f8 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e079      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d16:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	049b      	lsls	r3, r3, #18
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d22:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	220f      	movs	r2, #15
 8005d28:	4393      	bics	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d32:	430a      	orrs	r2, r1
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d36:	4b37      	ldr	r3, [pc, #220]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4a3a      	ldr	r2, [pc, #232]	; (8005e24 <HAL_RCC_OscConfig+0x630>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	0449      	lsls	r1, r1, #17
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5e:	f7fe fbcb 	bl	80044f8 <HAL_GetTick>
 8005d62:	0003      	movs	r3, r0
 8005d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fe fbc6 	bl	80044f8 <HAL_GetTick>
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e047      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	049b      	lsls	r3, r3, #18
 8005d82:	4013      	ands	r3, r2
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x574>
 8005d86:	e03f      	b.n	8005e08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d8e:	4924      	ldr	r1, [pc, #144]	; (8005e20 <HAL_RCC_OscConfig+0x62c>)
 8005d90:	400a      	ands	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fe fbb0 	bl	80044f8 <HAL_GetTick>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9e:	f7fe fbab 	bl	80044f8 <HAL_GetTick>
 8005da2:	0002      	movs	r2, r0
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e02c      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db0:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	049b      	lsls	r3, r3, #18
 8005db8:	4013      	ands	r3, r2
 8005dba:	d1f0      	bne.n	8005d9e <HAL_RCC_OscConfig+0x5aa>
 8005dbc:	e024      	b.n	8005e08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e01f      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	025b      	lsls	r3, r3, #9
 8005ddc:	401a      	ands	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d10e      	bne.n	8005e04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	220f      	movs	r2, #15
 8005dea:	401a      	ands	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d107      	bne.n	8005e04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	23f0      	movs	r3, #240	; 0xf0
 8005df8:	039b      	lsls	r3, r3, #14
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b008      	add	sp, #32
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	40021000 	.word	0x40021000
 8005e18:	00001388 	.word	0x00001388
 8005e1c:	efffffff 	.word	0xefffffff
 8005e20:	feffffff 	.word	0xfeffffff
 8005e24:	ffc2ffff 	.word	0xffc2ffff

08005e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0b3      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2201      	movs	r2, #1
 8005e42:	4013      	ands	r3, r2
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d911      	bls.n	8005e6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4393      	bics	r3, r2
 8005e52:	0019      	movs	r1, r3
 8005e54:	4b55      	ldr	r3, [pc, #340]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2201      	movs	r2, #1
 8005e62:	4013      	ands	r3, r2
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e09a      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2202      	movs	r2, #2
 8005e74:	4013      	ands	r3, r2
 8005e76:	d015      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d006      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005e82:	4b4b      	ldr	r3, [pc, #300]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	4b4a      	ldr	r3, [pc, #296]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005e88:	21e0      	movs	r1, #224	; 0xe0
 8005e8a:	00c9      	lsls	r1, r1, #3
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e90:	4b47      	ldr	r3, [pc, #284]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	22f0      	movs	r2, #240	; 0xf0
 8005e96:	4393      	bics	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b44      	ldr	r3, [pc, #272]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d040      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d114      	bne.n	8005eec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06e      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ece:	4b38      	ldr	r3, [pc, #224]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	049b      	lsls	r3, r3, #18
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d108      	bne.n	8005eec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e062      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ede:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e05b      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eec:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	4393      	bics	r3, r2
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f00:	f7fe fafa 	bl	80044f8 <HAL_GetTick>
 8005f04:	0003      	movs	r3, r0
 8005f06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f08:	e009      	b.n	8005f1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0a:	f7fe faf5 	bl	80044f8 <HAL_GetTick>
 8005f0e:	0002      	movs	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <HAL_RCC_ClockConfig+0x18c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e042      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	220c      	movs	r2, #12
 8005f24:	401a      	ands	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d1ec      	bne.n	8005f0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d211      	bcs.n	8005f62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4393      	bics	r3, r2
 8005f46:	0019      	movs	r1, r3
 8005f48:	4b18      	ldr	r3, [pc, #96]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f50:	4b16      	ldr	r3, [pc, #88]	; (8005fac <HAL_RCC_ClockConfig+0x184>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4013      	ands	r3, r2
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d001      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e020      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2204      	movs	r2, #4
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6c:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <HAL_RCC_ClockConfig+0x190>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	0019      	movs	r1, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f80:	f000 f820 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f84:	0001      	movs	r1, r0
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_ClockConfig+0x188>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	220f      	movs	r2, #15
 8005f8e:	4013      	ands	r3, r2
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <HAL_RCC_ClockConfig+0x194>)
 8005f92:	5cd3      	ldrb	r3, [r2, r3]
 8005f94:	000a      	movs	r2, r1
 8005f96:	40da      	lsrs	r2, r3
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_RCC_ClockConfig+0x198>)
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005f9c:	2003      	movs	r0, #3
 8005f9e:	f7fe fa65 	bl	800446c <HAL_InitTick>
  
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b004      	add	sp, #16
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40022000 	.word	0x40022000
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	00001388 	.word	0x00001388
 8005fb8:	fffff8ff 	.word	0xfffff8ff
 8005fbc:	080077f8 	.word	0x080077f8
 8005fc0:	20000000 	.word	0x20000000

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b08f      	sub	sp, #60	; 0x3c
 8005fc8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005fca:	2314      	movs	r3, #20
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	4a2b      	ldr	r2, [pc, #172]	; (800607c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fd2:	c313      	stmia	r3!, {r0, r1, r4}
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	4a29      	ldr	r2, [pc, #164]	; (8006080 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005fdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fde:	c313      	stmia	r3!, {r0, r1, r4}
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fec:	2300      	movs	r3, #0
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	220c      	movs	r2, #12
 8006002:	4013      	ands	r3, r2
 8006004:	2b04      	cmp	r3, #4
 8006006:	d002      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x4a>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d003      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x50>
 800600c:	e02d      	b.n	800606a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800600e:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006012:	e02d      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	0c9b      	lsrs	r3, r3, #18
 8006018:	220f      	movs	r2, #15
 800601a:	4013      	ands	r3, r2
 800601c:	2214      	movs	r2, #20
 800601e:	18ba      	adds	r2, r7, r2
 8006020:	5cd3      	ldrb	r3, [r2, r3]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006024:	4b17      	ldr	r3, [pc, #92]	; (8006084 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	220f      	movs	r2, #15
 800602a:	4013      	ands	r3, r2
 800602c:	1d3a      	adds	r2, r7, #4
 800602e:	5cd3      	ldrb	r3, [r2, r3]
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	025b      	lsls	r3, r3, #9
 8006038:	4013      	ands	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800603c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603e:	4812      	ldr	r0, [pc, #72]	; (8006088 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006040:	f7fa f862 	bl	8000108 <__udivsi3>
 8006044:	0003      	movs	r3, r0
 8006046:	001a      	movs	r2, r3
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	4353      	muls	r3, r2
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
 800604e:	e009      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006052:	000a      	movs	r2, r1
 8006054:	0152      	lsls	r2, r2, #5
 8006056:	1a52      	subs	r2, r2, r1
 8006058:	0193      	lsls	r3, r2, #6
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	185b      	adds	r3, r3, r1
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006068:	e002      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_RCC_GetSysClockFreq+0xc4>)
 800606c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800606e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b00f      	add	sp, #60	; 0x3c
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	080075e4 	.word	0x080075e4
 8006080:	080075f4 	.word	0x080075f4
 8006084:	40021000 	.word	0x40021000
 8006088:	007a1200 	.word	0x007a1200

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e042      	b.n	8006124 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223d      	movs	r2, #61	; 0x3d
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d107      	bne.n	80060ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	223c      	movs	r2, #60	; 0x3c
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fe f865 	bl	8004184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	223d      	movs	r2, #61	; 0x3d
 80060be:	2102      	movs	r1, #2
 80060c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	0019      	movs	r1, r3
 80060cc:	0010      	movs	r0, r2
 80060ce:	f000 fc41 	bl	8006954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2246      	movs	r2, #70	; 0x46
 80060d6:	2101      	movs	r1, #1
 80060d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223e      	movs	r2, #62	; 0x3e
 80060de:	2101      	movs	r1, #1
 80060e0:	5499      	strb	r1, [r3, r2]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	223f      	movs	r2, #63	; 0x3f
 80060e6:	2101      	movs	r1, #1
 80060e8:	5499      	strb	r1, [r3, r2]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2240      	movs	r2, #64	; 0x40
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2241      	movs	r2, #65	; 0x41
 80060f6:	2101      	movs	r1, #1
 80060f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2242      	movs	r2, #66	; 0x42
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2243      	movs	r2, #67	; 0x43
 8006106:	2101      	movs	r1, #1
 8006108:	5499      	strb	r1, [r3, r2]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2244      	movs	r2, #68	; 0x44
 800610e:	2101      	movs	r1, #1
 8006110:	5499      	strb	r1, [r3, r2]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2245      	movs	r2, #69	; 0x45
 8006116:	2101      	movs	r1, #1
 8006118:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	223d      	movs	r2, #61	; 0x3d
 800611e:	2101      	movs	r1, #1
 8006120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	0018      	movs	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	223d      	movs	r2, #61	; 0x3d
 8006138:	5c9b      	ldrb	r3, [r3, r2]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e030      	b.n	80061a6 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	223d      	movs	r2, #61	; 0x3d
 8006148:	2102      	movs	r1, #2
 800614a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2101      	movs	r1, #1
 8006158:	430a      	orrs	r2, r1
 800615a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <HAL_TIM_Base_Start_IT+0x84>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x44>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <HAL_TIM_Base_Start_IT+0x88>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d111      	bne.n	8006194 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2207      	movs	r2, #7
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b06      	cmp	r3, #6
 8006180:	d010      	beq.n	80061a4 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	430a      	orrs	r2, r1
 8006190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	e007      	b.n	80061a4 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	430a      	orrs	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b004      	add	sp, #16
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40000400 	.word	0x40000400

080061b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e042      	b.n	8006250 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	223d      	movs	r2, #61	; 0x3d
 80061ce:	5c9b      	ldrb	r3, [r3, r2]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	223c      	movs	r2, #60	; 0x3c
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 f839 	bl	8006258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	223d      	movs	r2, #61	; 0x3d
 80061ea:	2102      	movs	r1, #2
 80061ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	0019      	movs	r1, r3
 80061f8:	0010      	movs	r0, r2
 80061fa:	f000 fbab 	bl	8006954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2246      	movs	r2, #70	; 0x46
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	223e      	movs	r2, #62	; 0x3e
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	223f      	movs	r2, #63	; 0x3f
 8006212:	2101      	movs	r1, #1
 8006214:	5499      	strb	r1, [r3, r2]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2240      	movs	r2, #64	; 0x40
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2241      	movs	r2, #65	; 0x41
 8006222:	2101      	movs	r1, #1
 8006224:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2242      	movs	r2, #66	; 0x42
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2243      	movs	r2, #67	; 0x43
 8006232:	2101      	movs	r1, #1
 8006234:	5499      	strb	r1, [r3, r2]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2244      	movs	r2, #68	; 0x44
 800623a:	2101      	movs	r1, #1
 800623c:	5499      	strb	r1, [r3, r2]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2245      	movs	r2, #69	; 0x45
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	223d      	movs	r2, #61	; 0x3d
 800624a:	2101      	movs	r1, #1
 800624c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b002      	add	sp, #8
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006260:	46c0      	nop			; (mov r8, r8)
 8006262:	46bd      	mov	sp, r7
 8006264:	b002      	add	sp, #8
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d108      	bne.n	800628a <HAL_TIM_PWM_Start+0x22>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	223e      	movs	r2, #62	; 0x3e
 800627c:	5c9b      	ldrb	r3, [r3, r2]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	1e5a      	subs	r2, r3, #1
 8006284:	4193      	sbcs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e01f      	b.n	80062ca <HAL_TIM_PWM_Start+0x62>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d108      	bne.n	80062a2 <HAL_TIM_PWM_Start+0x3a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223f      	movs	r2, #63	; 0x3f
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	4193      	sbcs	r3, r2
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	e013      	b.n	80062ca <HAL_TIM_PWM_Start+0x62>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d108      	bne.n	80062ba <HAL_TIM_PWM_Start+0x52>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2240      	movs	r2, #64	; 0x40
 80062ac:	5c9b      	ldrb	r3, [r3, r2]
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	1e5a      	subs	r2, r3, #1
 80062b4:	4193      	sbcs	r3, r2
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e007      	b.n	80062ca <HAL_TIM_PWM_Start+0x62>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2241      	movs	r2, #65	; 0x41
 80062be:	5c9b      	ldrb	r3, [r3, r2]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	1e5a      	subs	r2, r3, #1
 80062c6:	4193      	sbcs	r3, r2
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e064      	b.n	800639c <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_PWM_Start+0x7a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	223e      	movs	r2, #62	; 0x3e
 80062dc:	2102      	movs	r1, #2
 80062de:	5499      	strb	r1, [r3, r2]
 80062e0:	e013      	b.n	800630a <HAL_TIM_PWM_Start+0xa2>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x8a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	223f      	movs	r2, #63	; 0x3f
 80062ec:	2102      	movs	r1, #2
 80062ee:	5499      	strb	r1, [r3, r2]
 80062f0:	e00b      	b.n	800630a <HAL_TIM_PWM_Start+0xa2>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_PWM_Start+0x9a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2240      	movs	r2, #64	; 0x40
 80062fc:	2102      	movs	r1, #2
 80062fe:	5499      	strb	r1, [r3, r2]
 8006300:	e003      	b.n	800630a <HAL_TIM_PWM_Start+0xa2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2241      	movs	r2, #65	; 0x41
 8006306:	2102      	movs	r1, #2
 8006308:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	2201      	movs	r2, #1
 8006312:	0018      	movs	r0, r3
 8006314:	f000 fe04 	bl	8006f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <HAL_TIM_PWM_Start+0x13c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIM_PWM_Start+0xce>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <HAL_TIM_PWM_Start+0x140>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIM_PWM_Start+0xce>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <HAL_TIM_PWM_Start+0x144>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_TIM_PWM_Start+0xd2>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_TIM_PWM_Start+0xd4>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	0209      	lsls	r1, r1, #8
 800634e:	430a      	orrs	r2, r1
 8006350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <HAL_TIM_PWM_Start+0x13c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_TIM_PWM_Start+0xfe>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <HAL_TIM_PWM_Start+0x148>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d111      	bne.n	800638a <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2207      	movs	r2, #7
 800636e:	4013      	ands	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b06      	cmp	r3, #6
 8006376:	d010      	beq.n	800639a <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2101      	movs	r1, #1
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006388:	e007      	b.n	800639a <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2101      	movs	r1, #1
 8006396:	430a      	orrs	r2, r1
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	0018      	movs	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	b004      	add	sp, #16
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40014400 	.word	0x40014400
 80063ac:	40014800 	.word	0x40014800
 80063b0:	40000400 	.word	0x40000400

080063b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2202      	movs	r2, #2
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d124      	bne.n	8006414 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2202      	movs	r2, #2
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11d      	bne.n	8006414 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2203      	movs	r2, #3
 80063de:	4252      	negs	r2, r2
 80063e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2203      	movs	r2, #3
 80063f0:	4013      	ands	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fa94 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 80063fc:	e007      	b.n	800640e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 fa87 	bl	8006914 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 fa93 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2204      	movs	r2, #4
 800641c:	4013      	ands	r3, r2
 800641e:	2b04      	cmp	r3, #4
 8006420:	d125      	bne.n	800646e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2204      	movs	r2, #4
 800642a:	4013      	ands	r3, r2
 800642c:	2b04      	cmp	r3, #4
 800642e:	d11e      	bne.n	800646e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2205      	movs	r2, #5
 8006436:	4252      	negs	r2, r2
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	23c0      	movs	r3, #192	; 0xc0
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4013      	ands	r3, r2
 800644c:	d004      	beq.n	8006458 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	0018      	movs	r0, r3
 8006452:	f000 fa67 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 8006456:	e007      	b.n	8006468 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fa5a 	bl	8006914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	0018      	movs	r0, r3
 8006464:	f000 fa66 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2208      	movs	r2, #8
 8006476:	4013      	ands	r3, r2
 8006478:	2b08      	cmp	r3, #8
 800647a:	d124      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2208      	movs	r2, #8
 8006484:	4013      	ands	r3, r2
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11d      	bne.n	80064c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2209      	movs	r2, #9
 8006490:	4252      	negs	r2, r2
 8006492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2204      	movs	r2, #4
 8006498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	2203      	movs	r2, #3
 80064a2:	4013      	ands	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fa3b 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 80064ae:	e007      	b.n	80064c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 fa2e 	bl	8006914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 fa3a 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2210      	movs	r2, #16
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d125      	bne.n	8006520 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	2210      	movs	r2, #16
 80064dc:	4013      	ands	r3, r2
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d11e      	bne.n	8006520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2211      	movs	r2, #17
 80064e8:	4252      	negs	r2, r2
 80064ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2208      	movs	r2, #8
 80064f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	23c0      	movs	r3, #192	; 0xc0
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4013      	ands	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 fa0e 	bl	8006924 <HAL_TIM_IC_CaptureCallback>
 8006508:	e007      	b.n	800651a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	0018      	movs	r0, r3
 800650e:	f000 fa01 	bl	8006914 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0018      	movs	r0, r3
 8006516:	f000 fa0d 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2201      	movs	r2, #1
 8006528:	4013      	ands	r3, r2
 800652a:	2b01      	cmp	r3, #1
 800652c:	d10f      	bne.n	800654e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	4013      	ands	r3, r2
 8006538:	2b01      	cmp	r3, #1
 800653a:	d108      	bne.n	800654e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2202      	movs	r2, #2
 8006542:	4252      	negs	r2, r2
 8006544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f7fd f9dd 	bl	8003908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	4013      	ands	r3, r2
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d10f      	bne.n	800657c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	4013      	ands	r3, r2
 8006566:	2b80      	cmp	r3, #128	; 0x80
 8006568:	d108      	bne.n	800657c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2281      	movs	r2, #129	; 0x81
 8006570:	4252      	negs	r2, r2
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0018      	movs	r0, r3
 8006578:	f000 fdae 	bl	80070d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2240      	movs	r2, #64	; 0x40
 8006584:	4013      	ands	r3, r2
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d10f      	bne.n	80065aa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	4013      	ands	r3, r2
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d108      	bne.n	80065aa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2241      	movs	r2, #65	; 0x41
 800659e:	4252      	negs	r2, r2
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	0018      	movs	r0, r3
 80065a6:	f000 f9cd 	bl	8006944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2220      	movs	r2, #32
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d10f      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d108      	bne.n	80065d8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2221      	movs	r2, #33	; 0x21
 80065cc:	4252      	negs	r2, r2
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 fd78 	bl	80070c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d8:	46c0      	nop			; (mov r8, r8)
 80065da:	46bd      	mov	sp, r7
 80065dc:	b002      	add	sp, #8
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ec:	2317      	movs	r3, #23
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	223c      	movs	r2, #60	; 0x3c
 80065f8:	5c9b      	ldrb	r3, [r3, r2]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_PWM_ConfigChannel+0x22>
 80065fe:	2302      	movs	r3, #2
 8006600:	e0ad      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	223c      	movs	r2, #60	; 0x3c
 8006606:	2101      	movs	r1, #1
 8006608:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b0c      	cmp	r3, #12
 800660e:	d100      	bne.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006610:	e076      	b.n	8006700 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	d900      	bls.n	800661a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006618:	e095      	b.n	8006746 <HAL_TIM_PWM_ConfigChannel+0x166>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d04e      	beq.n	80066be <HAL_TIM_PWM_ConfigChannel+0xde>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d900      	bls.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006626:	e08e      	b.n	8006746 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_PWM_ConfigChannel+0x56>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b04      	cmp	r3, #4
 8006632:	d021      	beq.n	8006678 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006634:	e087      	b.n	8006746 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0011      	movs	r1, r2
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f9f4 	bl	8006a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2108      	movs	r1, #8
 8006650:	430a      	orrs	r2, r1
 8006652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2104      	movs	r1, #4
 8006660:	438a      	bics	r2, r1
 8006662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6999      	ldr	r1, [r3, #24]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	619a      	str	r2, [r3, #24]
      break;
 8006676:	e06b      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	0011      	movs	r1, r2
 8006680:	0018      	movs	r0, r3
 8006682:	f000 fa51 	bl	8006b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	0109      	lsls	r1, r1, #4
 8006694:	430a      	orrs	r2, r1
 8006696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4931      	ldr	r1, [pc, #196]	; (8006768 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6999      	ldr	r1, [r3, #24]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	021a      	lsls	r2, r3, #8
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	619a      	str	r2, [r3, #24]
      break;
 80066bc:	e048      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0011      	movs	r1, r2
 80066c6:	0018      	movs	r0, r3
 80066c8:	f000 faac 	bl	8006c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69da      	ldr	r2, [r3, #28]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2108      	movs	r1, #8
 80066d8:	430a      	orrs	r2, r1
 80066da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	69da      	ldr	r2, [r3, #28]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2104      	movs	r1, #4
 80066e8:	438a      	bics	r2, r1
 80066ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69d9      	ldr	r1, [r3, #28]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691a      	ldr	r2, [r3, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
      break;
 80066fe:	e027      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	0011      	movs	r1, r2
 8006708:	0018      	movs	r0, r3
 800670a:	f000 fb0b 	bl	8006d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2180      	movs	r1, #128	; 0x80
 800671a:	0109      	lsls	r1, r1, #4
 800671c:	430a      	orrs	r2, r1
 800671e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69da      	ldr	r2, [r3, #28]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	490f      	ldr	r1, [pc, #60]	; (8006768 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800672c:	400a      	ands	r2, r1
 800672e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69d9      	ldr	r1, [r3, #28]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	021a      	lsls	r2, r3, #8
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	61da      	str	r2, [r3, #28]
      break;
 8006744:	e004      	b.n	8006750 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006746:	2317      	movs	r3, #23
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
      break;
 800674e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	223c      	movs	r2, #60	; 0x3c
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

  return status;
 8006758:	2317      	movs	r3, #23
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	781b      	ldrb	r3, [r3, #0]
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b006      	add	sp, #24
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	fffffbff 	.word	0xfffffbff

0800676c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	230f      	movs	r3, #15
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	223c      	movs	r2, #60	; 0x3c
 8006782:	5c9b      	ldrb	r3, [r3, r2]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x20>
 8006788:	2302      	movs	r3, #2
 800678a:	e0bc      	b.n	8006906 <HAL_TIM_ConfigClockSource+0x19a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	223c      	movs	r2, #60	; 0x3c
 8006790:	2101      	movs	r1, #1
 8006792:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	223d      	movs	r2, #61	; 0x3d
 8006798:	2102      	movs	r1, #2
 800679a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2277      	movs	r2, #119	; 0x77
 80067a8:	4393      	bics	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4a58      	ldr	r2, [pc, #352]	; (8006910 <HAL_TIM_ConfigClockSource+0x1a4>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2280      	movs	r2, #128	; 0x80
 80067c2:	0192      	lsls	r2, r2, #6
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <HAL_TIM_ConfigClockSource+0xde>
 80067c8:	2280      	movs	r2, #128	; 0x80
 80067ca:	0192      	lsls	r2, r2, #6
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d900      	bls.n	80067d2 <HAL_TIM_ConfigClockSource+0x66>
 80067d0:	e088      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 80067d2:	2280      	movs	r2, #128	; 0x80
 80067d4:	0152      	lsls	r2, r2, #5
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d100      	bne.n	80067dc <HAL_TIM_ConfigClockSource+0x70>
 80067da:	e088      	b.n	80068ee <HAL_TIM_ConfigClockSource+0x182>
 80067dc:	2280      	movs	r2, #128	; 0x80
 80067de:	0152      	lsls	r2, r2, #5
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d900      	bls.n	80067e6 <HAL_TIM_ConfigClockSource+0x7a>
 80067e4:	e07e      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 80067e6:	2b70      	cmp	r3, #112	; 0x70
 80067e8:	d018      	beq.n	800681c <HAL_TIM_ConfigClockSource+0xb0>
 80067ea:	d900      	bls.n	80067ee <HAL_TIM_ConfigClockSource+0x82>
 80067ec:	e07a      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 80067ee:	2b60      	cmp	r3, #96	; 0x60
 80067f0:	d04f      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x126>
 80067f2:	d900      	bls.n	80067f6 <HAL_TIM_ConfigClockSource+0x8a>
 80067f4:	e076      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 80067f6:	2b50      	cmp	r3, #80	; 0x50
 80067f8:	d03b      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x106>
 80067fa:	d900      	bls.n	80067fe <HAL_TIM_ConfigClockSource+0x92>
 80067fc:	e072      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d057      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x146>
 8006802:	d900      	bls.n	8006806 <HAL_TIM_ConfigClockSource+0x9a>
 8006804:	e06e      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d063      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x166>
 800680a:	d86b      	bhi.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d060      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x166>
 8006810:	d868      	bhi.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d05d      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x166>
 8006816:	2b10      	cmp	r3, #16
 8006818:	d05b      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x166>
 800681a:	e063      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6899      	ldr	r1, [r3, #8]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f000 fb58 	bl	8006ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2277      	movs	r2, #119	; 0x77
 800683c:	4313      	orrs	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	609a      	str	r2, [r3, #8]
      break;
 8006848:	e052      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f000 fb41 	bl	8006ee0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	01c9      	lsls	r1, r1, #7
 800686c:	430a      	orrs	r2, r1
 800686e:	609a      	str	r2, [r3, #8]
      break;
 8006870:	e03e      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	001a      	movs	r2, r3
 8006880:	f000 fab4 	bl	8006dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2150      	movs	r1, #80	; 0x50
 800688a:	0018      	movs	r0, r3
 800688c:	f000 fb0e 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006890:	e02e      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	001a      	movs	r2, r3
 80068a0:	f000 fad2 	bl	8006e48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2160      	movs	r1, #96	; 0x60
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 fafe 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 80068b0:	e01e      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	001a      	movs	r2, r3
 80068c0:	f000 fa94 	bl	8006dec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 faee 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 80068d0:	e00e      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	0019      	movs	r1, r3
 80068dc:	0010      	movs	r0, r2
 80068de:	f000 fae5 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 80068e2:	e005      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80068e4:	230f      	movs	r3, #15
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
      break;
 80068ec:	e000      	b.n	80068f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80068ee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	223d      	movs	r2, #61	; 0x3d
 80068f4:	2101      	movs	r1, #1
 80068f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	223c      	movs	r2, #60	; 0x3c
 80068fc:	2100      	movs	r1, #0
 80068fe:	5499      	strb	r1, [r3, r2]

  return status;
 8006900:	230f      	movs	r3, #15
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	781b      	ldrb	r3, [r3, #0]
}
 8006906:	0018      	movs	r0, r3
 8006908:	46bd      	mov	sp, r7
 800690a:	b004      	add	sp, #16
 800690c:	bd80      	pop	{r7, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	ffff00ff 	.word	0xffff00ff

08006914 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800691c:	46c0      	nop			; (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b002      	add	sp, #8
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	b002      	add	sp, #8
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}

08006954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a2b      	ldr	r2, [pc, #172]	; (8006a14 <TIM_Base_SetConfig+0xc0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d003      	beq.n	8006974 <TIM_Base_SetConfig+0x20>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a2a      	ldr	r2, [pc, #168]	; (8006a18 <TIM_Base_SetConfig+0xc4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d108      	bne.n	8006986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2270      	movs	r2, #112	; 0x70
 8006978:	4393      	bics	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <TIM_Base_SetConfig+0xc0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00f      	beq.n	80069ae <TIM_Base_SetConfig+0x5a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <TIM_Base_SetConfig+0xc4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00b      	beq.n	80069ae <TIM_Base_SetConfig+0x5a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <TIM_Base_SetConfig+0xc8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d007      	beq.n	80069ae <TIM_Base_SetConfig+0x5a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <TIM_Base_SetConfig+0xcc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_Base_SetConfig+0x5a>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <TIM_Base_SetConfig+0xd0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d108      	bne.n	80069c0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <TIM_Base_SetConfig+0xd4>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2280      	movs	r2, #128	; 0x80
 80069c4:	4393      	bics	r3, r2
 80069c6:	001a      	movs	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <TIM_Base_SetConfig+0xc0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d007      	beq.n	80069fe <TIM_Base_SetConfig+0xaa>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a0b      	ldr	r2, [pc, #44]	; (8006a20 <TIM_Base_SetConfig+0xcc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_Base_SetConfig+0xaa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <TIM_Base_SetConfig+0xd0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d103      	bne.n	8006a06 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	615a      	str	r2, [r3, #20]
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b004      	add	sp, #16
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40002000 	.word	0x40002000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800
 8006a28:	fffffcff 	.word	0xfffffcff

08006a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4393      	bics	r3, r2
 8006a3e:	001a      	movs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2270      	movs	r2, #112	; 0x70
 8006a5a:	4393      	bics	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2203      	movs	r2, #3
 8006a62:	4393      	bics	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2202      	movs	r2, #2
 8006a74:	4393      	bics	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a23      	ldr	r2, [pc, #140]	; (8006b14 <TIM_OC1_SetConfig+0xe8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC1_SetConfig+0x6e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <TIM_OC1_SetConfig+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC1_SetConfig+0x6e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <TIM_OC1_SetConfig+0xf0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d10c      	bne.n	8006ab4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4393      	bics	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	4393      	bics	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <TIM_OC1_SetConfig+0xe8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_OC1_SetConfig+0xa0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <TIM_OC1_SetConfig+0xec>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC1_SetConfig+0xa0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <TIM_OC1_SetConfig+0xf0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d111      	bne.n	8006af0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_OC1_SetConfig+0xf4>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <TIM_OC1_SetConfig+0xf8>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	46c0      	nop			; (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b006      	add	sp, #24
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40014400 	.word	0x40014400
 8006b1c:	40014800 	.word	0x40014800
 8006b20:	fffffeff 	.word	0xfffffeff
 8006b24:	fffffdff 	.word	0xfffffdff

08006b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	2210      	movs	r2, #16
 8006b38:	4393      	bics	r3, r2
 8006b3a:	001a      	movs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <TIM_OC2_SetConfig+0xe0>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <TIM_OC2_SetConfig+0xe4>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2220      	movs	r2, #32
 8006b72:	4393      	bics	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a22      	ldr	r2, [pc, #136]	; (8006c10 <TIM_OC2_SetConfig+0xe8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2280      	movs	r2, #128	; 0x80
 8006b8e:	4393      	bics	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2240      	movs	r2, #64	; 0x40
 8006ba2:	4393      	bics	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	; (8006c10 <TIM_OC2_SetConfig+0xe8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_OC2_SetConfig+0x96>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <TIM_OC2_SetConfig+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC2_SetConfig+0x96>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <TIM_OC2_SetConfig+0xf0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d113      	bne.n	8006be6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <TIM_OC2_SetConfig+0xf4>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <TIM_OC2_SetConfig+0xf8>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b006      	add	sp, #24
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	ffff8fff 	.word	0xffff8fff
 8006c0c:	fffffcff 	.word	0xfffffcff
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800
 8006c1c:	fffffbff 	.word	0xfffffbff
 8006c20:	fffff7ff 	.word	0xfffff7ff

08006c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4a33      	ldr	r2, [pc, #204]	; (8006d00 <TIM_OC3_SetConfig+0xdc>)
 8006c34:	401a      	ands	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2270      	movs	r2, #112	; 0x70
 8006c50:	4393      	bics	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2203      	movs	r2, #3
 8006c58:	4393      	bics	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4a26      	ldr	r2, [pc, #152]	; (8006d04 <TIM_OC3_SetConfig+0xe0>)
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <TIM_OC3_SetConfig+0xe4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d10d      	bne.n	8006c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <TIM_OC3_SetConfig+0xe8>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <TIM_OC3_SetConfig+0xec>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <TIM_OC3_SetConfig+0xe4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x92>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	; (8006d14 <TIM_OC3_SetConfig+0xf0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_OC3_SetConfig+0x92>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <TIM_OC3_SetConfig+0xf4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d113      	bne.n	8006cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <TIM_OC3_SetConfig+0xf8>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	4a17      	ldr	r2, [pc, #92]	; (8006d20 <TIM_OC3_SetConfig+0xfc>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	b006      	add	sp, #24
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	fffffeff 	.word	0xfffffeff
 8006d04:	fffffdff 	.word	0xfffffdff
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	fffff7ff 	.word	0xfffff7ff
 8006d10:	fffffbff 	.word	0xfffffbff
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800
 8006d1c:	ffffefff 	.word	0xffffefff
 8006d20:	ffffdfff 	.word	0xffffdfff

08006d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	4a26      	ldr	r2, [pc, #152]	; (8006dcc <TIM_OC4_SetConfig+0xa8>)
 8006d34:	401a      	ands	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <TIM_OC4_SetConfig+0xac>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <TIM_OC4_SetConfig+0xb0>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <TIM_OC4_SetConfig+0xb4>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	031b      	lsls	r3, r3, #12
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a17      	ldr	r2, [pc, #92]	; (8006ddc <TIM_OC4_SetConfig+0xb8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_OC4_SetConfig+0x70>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <TIM_OC4_SetConfig+0xbc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC4_SetConfig+0x70>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <TIM_OC4_SetConfig+0xc0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d109      	bne.n	8006da8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <TIM_OC4_SetConfig+0xc4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	019b      	lsls	r3, r3, #6
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b006      	add	sp, #24
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	ffffefff 	.word	0xffffefff
 8006dd0:	ffff8fff 	.word	0xffff8fff
 8006dd4:	fffffcff 	.word	0xfffffcff
 8006dd8:	ffffdfff 	.word	0xffffdfff
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800
 8006de8:	ffffbfff 	.word	0xffffbfff

08006dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	2201      	movs	r2, #1
 8006e04:	4393      	bics	r3, r2
 8006e06:	001a      	movs	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	22f0      	movs	r2, #240	; 0xf0
 8006e16:	4393      	bics	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	220a      	movs	r2, #10
 8006e28:	4393      	bics	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	621a      	str	r2, [r3, #32]
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b006      	add	sp, #24
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	4393      	bics	r3, r2
 8006e5c:	001a      	movs	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <TIM_TI2_ConfigInputStage+0x60>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	22a0      	movs	r2, #160	; 0xa0
 8006e84:	4393      	bics	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b006      	add	sp, #24
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	ffff0fff 	.word	0xffff0fff

08006eac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2270      	movs	r2, #112	; 0x70
 8006ec0:	4393      	bics	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	2207      	movs	r2, #7
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b004      	add	sp, #16
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <TIM_ETR_SetConfig+0x3c>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	021a      	lsls	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	46c0      	nop			; (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b006      	add	sp, #24
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	ffff00ff 	.word	0xffff00ff

08006f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	221f      	movs	r2, #31
 8006f30:	4013      	ands	r3, r2
 8006f32:	2201      	movs	r2, #1
 8006f34:	409a      	lsls	r2, r3
 8006f36:	0013      	movs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	43d2      	mvns	r2, r2
 8006f42:	401a      	ands	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	211f      	movs	r1, #31
 8006f50:	400b      	ands	r3, r1
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4099      	lsls	r1, r3
 8006f56:	000b      	movs	r3, r1
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b006      	add	sp, #24
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	223c      	movs	r2, #60	; 0x3c
 8006f76:	5c9b      	ldrb	r3, [r3, r2]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e03c      	b.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	223c      	movs	r2, #60	; 0x3c
 8006f84:	2101      	movs	r1, #1
 8006f86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	223d      	movs	r2, #61	; 0x3d
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2270      	movs	r2, #112	; 0x70
 8006fa4:	4393      	bics	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a11      	ldr	r2, [pc, #68]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	4393      	bics	r3, r2
 8006fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	223d      	movs	r2, #61	; 0x3d
 8006fec:	2101      	movs	r1, #1
 8006fee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	223c      	movs	r2, #60	; 0x3c
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	b004      	add	sp, #16
 8007000:	bd80      	pop	{r7, pc}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40000400 	.word	0x40000400

0800700c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	223c      	movs	r2, #60	; 0x3c
 800701e:	5c9b      	ldrb	r3, [r3, r2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007024:	2302      	movs	r3, #2
 8007026:	e03e      	b.n	80070a6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	223c      	movs	r2, #60	; 0x3c
 800702c:	2101      	movs	r1, #1
 800702e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	22ff      	movs	r2, #255	; 0xff
 8007034:	4393      	bics	r3, r2
 8007036:	001a      	movs	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007044:	401a      	ands	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007052:	401a      	ands	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007060:	401a      	ands	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a13      	ldr	r2, [pc, #76]	; (80070bc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800706e:	401a      	ands	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800707c:	401a      	ands	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a0e      	ldr	r2, [pc, #56]	; (80070c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800708a:	401a      	ands	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	223c      	movs	r2, #60	; 0x3c
 80070a0:	2100      	movs	r1, #0
 80070a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	0018      	movs	r0, r3
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b004      	add	sp, #16
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	fffffcff 	.word	0xfffffcff
 80070b4:	fffffbff 	.word	0xfffffbff
 80070b8:	fffff7ff 	.word	0xfffff7ff
 80070bc:	ffffefff 	.word	0xffffefff
 80070c0:	ffffdfff 	.word	0xffffdfff
 80070c4:	ffffbfff 	.word	0xffffbfff

080070c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b002      	add	sp, #8
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b002      	add	sp, #8
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <_ZdlPvj>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	f000 f801 	bl	80070f0 <_ZdlPv>
 80070ee:	bd10      	pop	{r4, pc}

080070f0 <_ZdlPv>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	f000 f825 	bl	8007140 <free>
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <__libc_init_array>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	2600      	movs	r6, #0
 80070fc:	4d0c      	ldr	r5, [pc, #48]	; (8007130 <__libc_init_array+0x38>)
 80070fe:	4c0d      	ldr	r4, [pc, #52]	; (8007134 <__libc_init_array+0x3c>)
 8007100:	1b64      	subs	r4, r4, r5
 8007102:	10a4      	asrs	r4, r4, #2
 8007104:	42a6      	cmp	r6, r4
 8007106:	d109      	bne.n	800711c <__libc_init_array+0x24>
 8007108:	2600      	movs	r6, #0
 800710a:	f000 f891 	bl	8007230 <_init>
 800710e:	4d0a      	ldr	r5, [pc, #40]	; (8007138 <__libc_init_array+0x40>)
 8007110:	4c0a      	ldr	r4, [pc, #40]	; (800713c <__libc_init_array+0x44>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	42a6      	cmp	r6, r4
 8007118:	d105      	bne.n	8007126 <__libc_init_array+0x2e>
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	00b3      	lsls	r3, r6, #2
 800711e:	58eb      	ldr	r3, [r5, r3]
 8007120:	4798      	blx	r3
 8007122:	3601      	adds	r6, #1
 8007124:	e7ee      	b.n	8007104 <__libc_init_array+0xc>
 8007126:	00b3      	lsls	r3, r6, #2
 8007128:	58eb      	ldr	r3, [r5, r3]
 800712a:	4798      	blx	r3
 800712c:	3601      	adds	r6, #1
 800712e:	e7f2      	b.n	8007116 <__libc_init_array+0x1e>
 8007130:	08007808 	.word	0x08007808
 8007134:	08007808 	.word	0x08007808
 8007138:	08007808 	.word	0x08007808
 800713c:	08007810 	.word	0x08007810

08007140 <free>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <free+0x10>)
 8007144:	0001      	movs	r1, r0
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	f000 f816 	bl	8007178 <_free_r>
 800714c:	bd10      	pop	{r4, pc}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	2000000c 	.word	0x2000000c

08007154 <memcpy>:
 8007154:	2300      	movs	r3, #0
 8007156:	b510      	push	{r4, lr}
 8007158:	429a      	cmp	r2, r3
 800715a:	d100      	bne.n	800715e <memcpy+0xa>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	5ccc      	ldrb	r4, [r1, r3]
 8007160:	54c4      	strb	r4, [r0, r3]
 8007162:	3301      	adds	r3, #1
 8007164:	e7f8      	b.n	8007158 <memcpy+0x4>

08007166 <memset>:
 8007166:	0003      	movs	r3, r0
 8007168:	1882      	adds	r2, r0, r2
 800716a:	4293      	cmp	r3, r2
 800716c:	d100      	bne.n	8007170 <memset+0xa>
 800716e:	4770      	bx	lr
 8007170:	7019      	strb	r1, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	e7f9      	b.n	800716a <memset+0x4>
	...

08007178 <_free_r>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	0005      	movs	r5, r0
 800717c:	2900      	cmp	r1, #0
 800717e:	d010      	beq.n	80071a2 <_free_r+0x2a>
 8007180:	1f0c      	subs	r4, r1, #4
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da00      	bge.n	800718a <_free_r+0x12>
 8007188:	18e4      	adds	r4, r4, r3
 800718a:	0028      	movs	r0, r5
 800718c:	f000 f83e 	bl	800720c <__malloc_lock>
 8007190:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <_free_r+0x90>)
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <_free_r+0x2c>
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	6014      	str	r4, [r2, #0]
 800719c:	0028      	movs	r0, r5
 800719e:	f000 f83d 	bl	800721c <__malloc_unlock>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d908      	bls.n	80071ba <_free_r+0x42>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	1860      	adds	r0, r4, r1
 80071ac:	4283      	cmp	r3, r0
 80071ae:	d1f3      	bne.n	8007198 <_free_r+0x20>
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	1841      	adds	r1, r0, r1
 80071b6:	6021      	str	r1, [r4, #0]
 80071b8:	e7ee      	b.n	8007198 <_free_r+0x20>
 80071ba:	001a      	movs	r2, r3
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <_free_r+0x4e>
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	d9f9      	bls.n	80071ba <_free_r+0x42>
 80071c6:	6811      	ldr	r1, [r2, #0]
 80071c8:	1850      	adds	r0, r2, r1
 80071ca:	42a0      	cmp	r0, r4
 80071cc:	d10b      	bne.n	80071e6 <_free_r+0x6e>
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	1809      	adds	r1, r1, r0
 80071d2:	1850      	adds	r0, r2, r1
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	4283      	cmp	r3, r0
 80071d8:	d1e0      	bne.n	800719c <_free_r+0x24>
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	1841      	adds	r1, r0, r1
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	6053      	str	r3, [r2, #4]
 80071e4:	e7da      	b.n	800719c <_free_r+0x24>
 80071e6:	42a0      	cmp	r0, r4
 80071e8:	d902      	bls.n	80071f0 <_free_r+0x78>
 80071ea:	230c      	movs	r3, #12
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7d5      	b.n	800719c <_free_r+0x24>
 80071f0:	6821      	ldr	r1, [r4, #0]
 80071f2:	1860      	adds	r0, r4, r1
 80071f4:	4283      	cmp	r3, r0
 80071f6:	d103      	bne.n	8007200 <_free_r+0x88>
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1841      	adds	r1, r0, r1
 80071fe:	6021      	str	r1, [r4, #0]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6054      	str	r4, [r2, #4]
 8007204:	e7ca      	b.n	800719c <_free_r+0x24>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	200007a8 	.word	0x200007a8

0800720c <__malloc_lock>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4802      	ldr	r0, [pc, #8]	; (8007218 <__malloc_lock+0xc>)
 8007210:	f000 f80c 	bl	800722c <__retarget_lock_acquire_recursive>
 8007214:	bd10      	pop	{r4, pc}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	20000940 	.word	0x20000940

0800721c <__malloc_unlock>:
 800721c:	b510      	push	{r4, lr}
 800721e:	4802      	ldr	r0, [pc, #8]	; (8007228 <__malloc_unlock+0xc>)
 8007220:	f000 f805 	bl	800722e <__retarget_lock_release_recursive>
 8007224:	bd10      	pop	{r4, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	20000940 	.word	0x20000940

0800722c <__retarget_lock_acquire_recursive>:
 800722c:	4770      	bx	lr

0800722e <__retarget_lock_release_recursive>:
 800722e:	4770      	bx	lr

08007230 <_init>:
 8007230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007236:	bc08      	pop	{r3}
 8007238:	469e      	mov	lr, r3
 800723a:	4770      	bx	lr

0800723c <_fini>:
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007242:	bc08      	pop	{r3}
 8007244:	469e      	mov	lr, r3
 8007246:	4770      	bx	lr
